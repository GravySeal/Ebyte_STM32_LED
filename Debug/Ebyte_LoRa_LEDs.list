
Ebyte_LoRa_LEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800b62c  0800b62c  0001b62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b774  0800b774  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  0800b774  0800b774  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b774  0800b774  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b774  0800b774  0001b774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b778  0800b778  0001b778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800b77c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001228  20000138  0800b8b4  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001360  0800b8b4  00021360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159a4  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003842  00000000  00000000  00035b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00039390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5b  00000000  00000000  0003a790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b69f  00000000  00000000  0003b6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018676  00000000  00000000  00056d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009188c  00000000  00000000  0006f400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ab8  00000000  00000000  00100c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00106744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000138 	.word	0x20000138
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b614 	.word	0x0800b614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000013c 	.word	0x2000013c
 8000148:	0800b614 	.word	0x0800b614

0800014c <initialise_e32>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void initialise_e32()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000156:	483d      	ldr	r0, [pc, #244]	; (800024c <initialise_e32+0x100>)
 8000158:	f001 fcc7 	bl	8001aea <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	2180      	movs	r1, #128	; 0x80
 8000160:	483a      	ldr	r0, [pc, #232]	; (800024c <initialise_e32+0x100>)
 8000162:	f001 fcc2 	bl	8001aea <HAL_GPIO_WritePin>

	  memset(Tx_data, 0xC1, 3);
 8000166:	2203      	movs	r2, #3
 8000168:	21c1      	movs	r1, #193	; 0xc1
 800016a:	4839      	ldr	r0, [pc, #228]	; (8000250 <initialise_e32+0x104>)
 800016c:	f00a fbe9 	bl	800a942 <memset>

	  HAL_UART_Transmit(&huart1, Tx_data, 3, 1000);
 8000170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000174:	2203      	movs	r2, #3
 8000176:	4936      	ldr	r1, [pc, #216]	; (8000250 <initialise_e32+0x104>)
 8000178:	4836      	ldr	r0, [pc, #216]	; (8000254 <initialise_e32+0x108>)
 800017a:	f004 fd71 	bl	8004c60 <HAL_UART_Transmit>

	  HAL_UART_Receive(&huart1, Rx_data, 6, 1000);
 800017e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000182:	2206      	movs	r2, #6
 8000184:	4934      	ldr	r1, [pc, #208]	; (8000258 <initialise_e32+0x10c>)
 8000186:	4833      	ldr	r0, [pc, #204]	; (8000254 <initialise_e32+0x108>)
 8000188:	f004 fded 	bl	8004d66 <HAL_UART_Receive>

	  HAL_Delay(100);
 800018c:	2064      	movs	r0, #100	; 0x64
 800018e:	f000 ff3d 	bl	800100c <HAL_Delay>

	  Tx_data[0] = 0xC0;//head
 8000192:	4b2f      	ldr	r3, [pc, #188]	; (8000250 <initialise_e32+0x104>)
 8000194:	22c0      	movs	r2, #192	; 0xc0
 8000196:	701a      	strb	r2, [r3, #0]
	  Tx_data[1] = 0x00;//addrl
 8000198:	4b2d      	ldr	r3, [pc, #180]	; (8000250 <initialise_e32+0x104>)
 800019a:	2200      	movs	r2, #0
 800019c:	705a      	strb	r2, [r3, #1]
	  Tx_data[2] = 0x00;//addrh
 800019e:	4b2c      	ldr	r3, [pc, #176]	; (8000250 <initialise_e32+0x104>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	709a      	strb	r2, [r3, #2]
	  Tx_data[3] = 0x3D;
 80001a4:	4b2a      	ldr	r3, [pc, #168]	; (8000250 <initialise_e32+0x104>)
 80001a6:	223d      	movs	r2, #61	; 0x3d
 80001a8:	70da      	strb	r2, [r3, #3]
	  Tx_data[4] = 0x17;
 80001aa:	4b29      	ldr	r3, [pc, #164]	; (8000250 <initialise_e32+0x104>)
 80001ac:	2217      	movs	r2, #23
 80001ae:	711a      	strb	r2, [r3, #4]
	  Tx_data[5] = 0x80;
 80001b0:	4b27      	ldr	r3, [pc, #156]	; (8000250 <initialise_e32+0x104>)
 80001b2:	2280      	movs	r2, #128	; 0x80
 80001b4:	715a      	strb	r2, [r3, #5]

	  HAL_UART_Transmit(&huart1, Tx_data, 6, 1000);
 80001b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ba:	2206      	movs	r2, #6
 80001bc:	4924      	ldr	r1, [pc, #144]	; (8000250 <initialise_e32+0x104>)
 80001be:	4825      	ldr	r0, [pc, #148]	; (8000254 <initialise_e32+0x108>)
 80001c0:	f004 fd4e 	bl	8004c60 <HAL_UART_Transmit>

	  HAL_UART_Receive(&huart1, Rx_data, 6, 1000);
 80001c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001c8:	2206      	movs	r2, #6
 80001ca:	4923      	ldr	r1, [pc, #140]	; (8000258 <initialise_e32+0x10c>)
 80001cc:	4821      	ldr	r0, [pc, #132]	; (8000254 <initialise_e32+0x108>)
 80001ce:	f004 fdca 	bl	8004d66 <HAL_UART_Receive>

	  HAL_Delay(100);
 80001d2:	2064      	movs	r0, #100	; 0x64
 80001d4:	f000 ff1a 	bl	800100c <HAL_Delay>

	  memset(Tx_data, 0xC1, 3);
 80001d8:	2203      	movs	r2, #3
 80001da:	21c1      	movs	r1, #193	; 0xc1
 80001dc:	481c      	ldr	r0, [pc, #112]	; (8000250 <initialise_e32+0x104>)
 80001de:	f00a fbb0 	bl	800a942 <memset>

	  memset(Rx_data, 0, sizeof(Rx_data));
 80001e2:	223a      	movs	r2, #58	; 0x3a
 80001e4:	2100      	movs	r1, #0
 80001e6:	481c      	ldr	r0, [pc, #112]	; (8000258 <initialise_e32+0x10c>)
 80001e8:	f00a fbab 	bl	800a942 <memset>

	  HAL_UART_Transmit(&huart1, Tx_data, 3, 1000);
 80001ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f0:	2203      	movs	r2, #3
 80001f2:	4917      	ldr	r1, [pc, #92]	; (8000250 <initialise_e32+0x104>)
 80001f4:	4817      	ldr	r0, [pc, #92]	; (8000254 <initialise_e32+0x108>)
 80001f6:	f004 fd33 	bl	8004c60 <HAL_UART_Transmit>

	  HAL_UART_Receive(&huart1, Rx_data, 6, 1000);
 80001fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001fe:	2206      	movs	r2, #6
 8000200:	4915      	ldr	r1, [pc, #84]	; (8000258 <initialise_e32+0x10c>)
 8000202:	4814      	ldr	r0, [pc, #80]	; (8000254 <initialise_e32+0x108>)
 8000204:	f004 fdaf 	bl	8004d66 <HAL_UART_Receive>

	  HAL_Delay(100);
 8000208:	2064      	movs	r0, #100	; 0x64
 800020a:	f000 feff 	bl	800100c <HAL_Delay>

	  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000214:	480d      	ldr	r0, [pc, #52]	; (800024c <initialise_e32+0x100>)
 8000216:	f001 fc68 	bl	8001aea <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2180      	movs	r1, #128	; 0x80
 800021e:	480b      	ldr	r0, [pc, #44]	; (800024c <initialise_e32+0x100>)
 8000220:	f001 fc63 	bl	8001aea <HAL_GPIO_WritePin>

	  HAL_Delay(100);
 8000224:	2064      	movs	r0, #100	; 0x64
 8000226:	f000 fef1 	bl	800100c <HAL_Delay>

	  USART1 -> CR1 &= ~(USART_CR1_UE);
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <initialise_e32+0x110>)
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <initialise_e32+0x110>)
 8000230:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000234:	60d3      	str	r3, [r2, #12]
	  USART1 -> BRR = 0x8b;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <initialise_e32+0x110>)
 8000238:	228b      	movs	r2, #139	; 0x8b
 800023a:	609a      	str	r2, [r3, #8]
	  USART1 -> CR1 |= USART_CR1_UE;
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <initialise_e32+0x110>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <initialise_e32+0x110>)
 8000242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40010c00 	.word	0x40010c00
 8000250:	200002b4 	.word	0x200002b4
 8000254:	20000228 	.word	0x20000228
 8000258:	200002f0 	.word	0x200002f0
 800025c:	40013800 	.word	0x40013800

08000260 <get_id>:

uint8_t get_id(){
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0

	uint8_t id = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	71fb      	strb	r3, [r7, #7]

	if (HAL_GPIO_ReadPin(DIP1_GPIO_Port, DIP1_Pin)){
 800026a:	2140      	movs	r1, #64	; 0x40
 800026c:	482f      	ldr	r0, [pc, #188]	; (800032c <get_id+0xcc>)
 800026e:	f001 fc25 	bl	8001abc <HAL_GPIO_ReadPin>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d003      	beq.n	8000280 <get_id+0x20>
		id |= 0b00000001;
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	71fb      	strb	r3, [r7, #7]
	}

	if (HAL_GPIO_ReadPin(DIP2_GPIO_Port, DIP2_Pin)){
 8000280:	2120      	movs	r1, #32
 8000282:	482a      	ldr	r0, [pc, #168]	; (800032c <get_id+0xcc>)
 8000284:	f001 fc1a 	bl	8001abc <HAL_GPIO_ReadPin>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d003      	beq.n	8000296 <get_id+0x36>
		id |= 0b00000010;
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f043 0302 	orr.w	r3, r3, #2
 8000294:	71fb      	strb	r3, [r7, #7]
	}

	if (HAL_GPIO_ReadPin(DIP3_GPIO_Port, DIP3_Pin)){
 8000296:	2110      	movs	r1, #16
 8000298:	4824      	ldr	r0, [pc, #144]	; (800032c <get_id+0xcc>)
 800029a:	f001 fc0f 	bl	8001abc <HAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d003      	beq.n	80002ac <get_id+0x4c>
		id |= 0b00000100;
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	71fb      	strb	r3, [r7, #7]
	}

	if (HAL_GPIO_ReadPin(DIP4_GPIO_Port, DIP4_Pin)){
 80002ac:	2108      	movs	r1, #8
 80002ae:	481f      	ldr	r0, [pc, #124]	; (800032c <get_id+0xcc>)
 80002b0:	f001 fc04 	bl	8001abc <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d003      	beq.n	80002c2 <get_id+0x62>
		id |= 0b00001000;
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f043 0308 	orr.w	r3, r3, #8
 80002c0:	71fb      	strb	r3, [r7, #7]
	}

	if (HAL_GPIO_ReadPin(DIP5_GPIO_Port, DIP5_Pin)){
 80002c2:	2104      	movs	r1, #4
 80002c4:	4819      	ldr	r0, [pc, #100]	; (800032c <get_id+0xcc>)
 80002c6:	f001 fbf9 	bl	8001abc <HAL_GPIO_ReadPin>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d003      	beq.n	80002d8 <get_id+0x78>
		id |= 0b00010000;
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	71fb      	strb	r3, [r7, #7]
	}

	if (HAL_GPIO_ReadPin(DIP6_GPIO_Port, DIP6_Pin)){
 80002d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <get_id+0xcc>)
 80002de:	f001 fbed 	bl	8001abc <HAL_GPIO_ReadPin>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d003      	beq.n	80002f0 <get_id+0x90>
		id |= 0b00100000;
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	71fb      	strb	r3, [r7, #7]
	}

	if (HAL_GPIO_ReadPin(DIP7_GPIO_Port, DIP7_Pin)){
 80002f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <get_id+0xcc>)
 80002f6:	f001 fbe1 	bl	8001abc <HAL_GPIO_ReadPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d003      	beq.n	8000308 <get_id+0xa8>
		id |= 0b01000000;
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000306:	71fb      	strb	r3, [r7, #7]
	}

	if (HAL_GPIO_ReadPin(DIP8_GPIO_Port, DIP8_Pin)){
 8000308:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800030c:	4807      	ldr	r0, [pc, #28]	; (800032c <get_id+0xcc>)
 800030e:	f001 fbd5 	bl	8001abc <HAL_GPIO_ReadPin>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <get_id+0xc0>
		id |= 0b10000000;
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800031e:	71fb      	strb	r3, [r7, #7]
	}

	return id;
 8000320:	79fb      	ldrb	r3, [r7, #7]
}
 8000322:	4618      	mov	r0, r3
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010c00 	.word	0x40010c00

08000330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000334:	f000 fe08 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000338:	f000 f88e 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033c:	f000 fa1c 	bl	8000778 <MX_GPIO_Init>
  MX_DMA_Init();
 8000340:	f000 f9f4 	bl	800072c <MX_DMA_Init>
  MX_TIM2_Init();
 8000344:	f000 f8e2 	bl	800050c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000348:	f000 f958 	bl	80005fc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800034c:	f000 f9c4 	bl	80006d8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000350:	f009 fdea 	bl	8009f28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  DIP_ID = get_id();
 8000354:	f7ff ff84 	bl	8000260 <get_id>
 8000358:	4603      	mov	r3, r0
 800035a:	461a      	mov	r2, r3
 800035c:	4b34      	ldr	r3, [pc, #208]	; (8000430 <main+0x100>)
 800035e:	701a      	strb	r2, [r3, #0]

  initialise_e32();
 8000360:	f7ff fef4 	bl	800014c <initialise_e32>

  // enable LINE IDLE detect
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) Rx_data, sizeof(Rx_data));
 8000364:	223a      	movs	r2, #58	; 0x3a
 8000366:	4933      	ldr	r1, [pc, #204]	; (8000434 <main+0x104>)
 8000368:	4833      	ldr	r0, [pc, #204]	; (8000438 <main+0x108>)
 800036a:	f004 fd8e 	bl	8004e8a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800036e:	4b33      	ldr	r3, [pc, #204]	; (800043c <main+0x10c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4b31      	ldr	r3, [pc, #196]	; (800043c <main+0x10c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f022 0204 	bic.w	r2, r2, #4
 800037c:	601a      	str	r2, [r3, #0]

  //Dumb RGB strip mode
  if (MODE == 1){
	  //Start timers
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800037e:	2100      	movs	r1, #0
 8000380:	482f      	ldr	r0, [pc, #188]	; (8000440 <main+0x110>)
 8000382:	f003 fe49 	bl	8004018 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000386:	2104      	movs	r1, #4
 8000388:	482d      	ldr	r0, [pc, #180]	; (8000440 <main+0x110>)
 800038a:	f003 fe45 	bl	8004018 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800038e:	2108      	movs	r1, #8
 8000390:	482b      	ldr	r0, [pc, #172]	; (8000440 <main+0x110>)
 8000392:	f003 fe41 	bl	8004018 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000396:	2100      	movs	r1, #0
 8000398:	482a      	ldr	r0, [pc, #168]	; (8000444 <main+0x114>)
 800039a:	f003 fe3d 	bl	8004018 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800039e:	2104      	movs	r1, #4
 80003a0:	4828      	ldr	r0, [pc, #160]	; (8000444 <main+0x114>)
 80003a2:	f003 fe39 	bl	8004018 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80003a6:	2108      	movs	r1, #8
 80003a8:	4826      	ldr	r0, [pc, #152]	; (8000444 <main+0x114>)
 80003aa:	f003 fe35 	bl	8004018 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  while (panic == 1){
 80003ae:	e014      	b.n	80003da <main+0xaa>
		  TIM2->CCR1 = 255;
 80003b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b4:	22ff      	movs	r2, #255	; 0xff
 80003b6:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM2->CCR2 = 255;
 80003b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003bc:	22ff      	movs	r2, #255	; 0xff
 80003be:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM2->CCR3 = 255;
 80003c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c4:	22ff      	movs	r2, #255	; 0xff
 80003c6:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM3->CCR1 = 255;
 80003c8:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <main+0x118>)
 80003ca:	22ff      	movs	r2, #255	; 0xff
 80003cc:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM3->CCR2 = 255;
 80003ce:	4b1e      	ldr	r3, [pc, #120]	; (8000448 <main+0x118>)
 80003d0:	22ff      	movs	r2, #255	; 0xff
 80003d2:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM3->CCR3 = 255;
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <main+0x118>)
 80003d6:	22ff      	movs	r2, #255	; 0xff
 80003d8:	63da      	str	r2, [r3, #60]	; 0x3c
	  while (panic == 1){
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <main+0x11c>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d0e6      	beq.n	80003b0 <main+0x80>
	  }

	  //Copy data and put it in our array
	  memcpy(&our_data, &DMX_data[DIP_ID*8], 8);
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <main+0x100>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	00db      	lsls	r3, r3, #3
 80003e8:	4a19      	ldr	r2, [pc, #100]	; (8000450 <main+0x120>)
 80003ea:	441a      	add	r2, r3
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <main+0x124>)
 80003ee:	6810      	ldr	r0, [r2, #0]
 80003f0:	6851      	ldr	r1, [r2, #4]
 80003f2:	c303      	stmia	r3!, {r0, r1}

	  switch (MODE) {
		case 1:
			TIM2->CCR1 = our_data[0];
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <main+0x124>)
 80003f6:	781a      	ldrb	r2, [r3, #0]
 80003f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003fc:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = our_data[1];
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <main+0x124>)
 8000400:	785a      	ldrb	r2, [r3, #1]
 8000402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000406:	639a      	str	r2, [r3, #56]	; 0x38
		    TIM2->CCR3= our_data[2];
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <main+0x124>)
 800040a:	789a      	ldrb	r2, [r3, #2]
 800040c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000410:	63da      	str	r2, [r3, #60]	; 0x3c
		    TIM3->CCR1 = our_data[4];
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <main+0x124>)
 8000414:	791a      	ldrb	r2, [r3, #4]
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <main+0x118>)
 8000418:	635a      	str	r2, [r3, #52]	; 0x34
		    TIM3->CCR2 = our_data[5];
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <main+0x124>)
 800041c:	795a      	ldrb	r2, [r3, #5]
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <main+0x118>)
 8000420:	639a      	str	r2, [r3, #56]	; 0x38
		    TIM3->CCR3 = our_data[6];
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <main+0x124>)
 8000424:	799a      	ldrb	r2, [r3, #6]
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <main+0x118>)
 8000428:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800042a:	bf00      	nop
	  while (panic == 1){
 800042c:	e7d5      	b.n	80003da <main+0xaa>
 800042e:	bf00      	nop
 8000430:	20000534 	.word	0x20000534
 8000434:	200002f0 	.word	0x200002f0
 8000438:	20000228 	.word	0x20000228
 800043c:	20000270 	.word	0x20000270
 8000440:	20000154 	.word	0x20000154
 8000444:	2000019c 	.word	0x2000019c
 8000448:	40000400 	.word	0x40000400
 800044c:	20000535 	.word	0x20000535
 8000450:	2000032c 	.word	0x2000032c
 8000454:	2000052c 	.word	0x2000052c

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b094      	sub	sp, #80	; 0x50
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000462:	2228      	movs	r2, #40	; 0x28
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f00a fa6b 	bl	800a942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000488:	2301      	movs	r3, #1
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000496:	2301      	movs	r3, #1
 8000498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049a:	2302      	movs	r3, #2
 800049c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80004a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80004a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ae:	4618      	mov	r0, r3
 80004b0:	f003 f89a 	bl	80035e8 <HAL_RCC_OscConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004ba:	f000 fa7b 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004be:	230f      	movs	r3, #15
 80004c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80004c2:	2301      	movs	r3, #1
 80004c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f003 fb07 	bl	8003aec <HAL_RCC_ClockConfig>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004e4:	f000 fa66 	bl	80009b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004e8:	2310      	movs	r3, #16
 80004ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 fc89 	bl	8003e0c <HAL_RCCEx_PeriphCLKConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000500:	f000 fa58 	bl	80009b4 <Error_Handler>
  }
}
 8000504:	bf00      	nop
 8000506:	3750      	adds	r7, #80	; 0x50
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
 800052a:	615a      	str	r2, [r3, #20]
 800052c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800052e:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <MX_TIM2_Init+0xec>)
 8000530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000534:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000536:	4b30      	ldr	r3, [pc, #192]	; (80005f8 <MX_TIM2_Init+0xec>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <MX_TIM2_Init+0xec>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000542:	4b2d      	ldr	r3, [pc, #180]	; (80005f8 <MX_TIM2_Init+0xec>)
 8000544:	22ff      	movs	r2, #255	; 0xff
 8000546:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000548:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <MX_TIM2_Init+0xec>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054e:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <MX_TIM2_Init+0xec>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000554:	4828      	ldr	r0, [pc, #160]	; (80005f8 <MX_TIM2_Init+0xec>)
 8000556:	f003 fd0f 	bl	8003f78 <HAL_TIM_PWM_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000560:	f000 fa28 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4619      	mov	r1, r3
 8000572:	4821      	ldr	r0, [pc, #132]	; (80005f8 <MX_TIM2_Init+0xec>)
 8000574:	f004 fab4 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800057e:	f000 fa19 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000582:	2360      	movs	r3, #96	; 0x60
 8000584:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	4619      	mov	r1, r3
 8000598:	4817      	ldr	r0, [pc, #92]	; (80005f8 <MX_TIM2_Init+0xec>)
 800059a:	f003 ffad 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80005a4:	f000 fa06 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2204      	movs	r2, #4
 80005ac:	4619      	mov	r1, r3
 80005ae:	4812      	ldr	r0, [pc, #72]	; (80005f8 <MX_TIM2_Init+0xec>)
 80005b0:	f003 ffa2 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80005ba:	f000 f9fb 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2208      	movs	r2, #8
 80005c2:	4619      	mov	r1, r3
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <MX_TIM2_Init+0xec>)
 80005c6:	f003 ff97 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 80005d0:	f000 f9f0 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	220c      	movs	r2, #12
 80005d8:	4619      	mov	r1, r3
 80005da:	4807      	ldr	r0, [pc, #28]	; (80005f8 <MX_TIM2_Init+0xec>)
 80005dc:	f003 ff8c 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80005e6:	f000 f9e5 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <MX_TIM2_Init+0xec>)
 80005ec:	f000 fa84 	bl	8000af8 <HAL_TIM_MspPostInit>

}
 80005f0:	bf00      	nop
 80005f2:	3728      	adds	r7, #40	; 0x28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000154 	.word	0x20000154

080005fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
 800061a:	615a      	str	r2, [r3, #20]
 800061c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800061e:	4b2c      	ldr	r3, [pc, #176]	; (80006d0 <MX_TIM3_Init+0xd4>)
 8000620:	4a2c      	ldr	r2, [pc, #176]	; (80006d4 <MX_TIM3_Init+0xd8>)
 8000622:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <MX_TIM3_Init+0xd4>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062a:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <MX_TIM3_Init+0xd4>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <MX_TIM3_Init+0xd4>)
 8000632:	22ff      	movs	r2, #255	; 0xff
 8000634:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000636:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <MX_TIM3_Init+0xd4>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063c:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <MX_TIM3_Init+0xd4>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000642:	4823      	ldr	r0, [pc, #140]	; (80006d0 <MX_TIM3_Init+0xd4>)
 8000644:	f003 fc98 	bl	8003f78 <HAL_TIM_PWM_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800064e:	f000 f9b1 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4619      	mov	r1, r3
 8000660:	481b      	ldr	r0, [pc, #108]	; (80006d0 <MX_TIM3_Init+0xd4>)
 8000662:	f004 fa3d 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800066c:	f000 f9a2 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000670:	2360      	movs	r3, #96	; 0x60
 8000672:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	4619      	mov	r1, r3
 8000686:	4812      	ldr	r0, [pc, #72]	; (80006d0 <MX_TIM3_Init+0xd4>)
 8000688:	f003 ff36 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000692:	f000 f98f 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2204      	movs	r2, #4
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_TIM3_Init+0xd4>)
 800069e:	f003 ff2b 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80006a8:	f000 f984 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2208      	movs	r2, #8
 80006b0:	4619      	mov	r1, r3
 80006b2:	4807      	ldr	r0, [pc, #28]	; (80006d0 <MX_TIM3_Init+0xd4>)
 80006b4:	f003 ff20 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80006be:	f000 f979 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006c2:	4803      	ldr	r0, [pc, #12]	; (80006d0 <MX_TIM3_Init+0xd4>)
 80006c4:	f000 fa18 	bl	8000af8 <HAL_TIM_MspPostInit>

}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000019c 	.word	0x2000019c
 80006d4:	40000400 	.word	0x40000400

080006d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART1_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART1_UART_Init+0x4c>)
 8000710:	f004 fa56 	bl	8004bc0 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f94b 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000228 	.word	0x20000228
 8000728:	40013800 	.word	0x40013800

0800072c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_DMA_Init+0x48>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <MX_DMA_Init+0x48>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_DMA_Init+0x48>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	200f      	movs	r0, #15
 8000750:	f000 fd57 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000754:	200f      	movs	r0, #15
 8000756:	f000 fd70 	bl	800123a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2011      	movs	r0, #17
 8000760:	f000 fd4f 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000764:	2011      	movs	r0, #17
 8000766:	f000 fd68 	bl	800123a <HAL_NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078c:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <MX_GPIO_Init+0x128>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a43      	ldr	r2, [pc, #268]	; (80008a0 <MX_GPIO_Init+0x128>)
 8000792:	f043 0320 	orr.w	r3, r3, #32
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <MX_GPIO_Init+0x128>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0320 	and.w	r3, r3, #32
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a3d      	ldr	r2, [pc, #244]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a37      	ldr	r2, [pc, #220]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007c2:	f043 0308 	orr.w	r3, r3, #8
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <MX_GPIO_Init+0x128>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0308 	and.w	r3, r3, #8
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007da:	4832      	ldr	r0, [pc, #200]	; (80008a4 <MX_GPIO_Init+0x12c>)
 80007dc:	f001 f985 	bl	8001aea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80007e6:	4830      	ldr	r0, [pc, #192]	; (80008a8 <MX_GPIO_Init+0x130>)
 80007e8:	f001 f97f 	bl	8001aea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP5_Pin DIP6_Pin DIP7_Pin DIP8_Pin
                           DIP4_Pin DIP3_Pin DIP2_Pin DIP1_Pin */
  GPIO_InitStruct.Pin = DIP5_Pin|DIP6_Pin|DIP7_Pin|DIP8_Pin
 80007ec:	f247 037c 	movw	r3, #28796	; 0x707c
 80007f0:	613b      	str	r3, [r7, #16]
                          |DIP4_Pin|DIP3_Pin|DIP2_Pin|DIP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	4619      	mov	r1, r3
 8000800:	4829      	ldr	r0, [pc, #164]	; (80008a8 <MX_GPIO_Init+0x130>)
 8000802:	f000 ffd7 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2302      	movs	r3, #2
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	4821      	ldr	r0, [pc, #132]	; (80008a4 <MX_GPIO_Init+0x12c>)
 8000820:	f000 ffc8 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PANIC_Pin */
  GPIO_InitStruct.Pin = PANIC_Pin;
 8000824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_GPIO_Init+0x134>)
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PANIC_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	4619      	mov	r1, r3
 8000838:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_GPIO_Init+0x12c>)
 800083a:	f000 ffbb 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin;
 800083e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	4814      	ldr	r0, [pc, #80]	; (80008a8 <MX_GPIO_Init+0x130>)
 8000858:	f000 ffac 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 800085c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_GPIO_Init+0x134>)
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4619      	mov	r1, r3
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_GPIO_Init+0x130>)
 8000872:	f000 ff9f 	bl	80017b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2017      	movs	r0, #23
 800087c:	f000 fcc1 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000880:	2017      	movs	r0, #23
 8000882:	f000 fcda 	bl	800123a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2028      	movs	r0, #40	; 0x28
 800088c:	f000 fcb9 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000890:	2028      	movs	r0, #40	; 0x28
 8000892:	f000 fcd2 	bl	800123a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	bf00      	nop
 8000898:	3720      	adds	r7, #32
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010800 	.word	0x40010800
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	10110000 	.word	0x10110000

080008b0 <HAL_UARTEx_RxEventCallback>:
	HAL_UART_Receive_IT(&huart1, Rx_data, 40);
}
*/

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <HAL_UARTEx_RxEventCallback+0x80>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d130      	bne.n	8000928 <HAL_UARTEx_RxEventCallback+0x78>

		// https://controllerstech.com/uart-dma-with-idle-line-detection/


		//check if total data receiving is not exceeding 512 bytes (check for whether data belongs to us)
		if (Rx_data[0] <= Rx_data[1] && Rx_data[1] <= 10){
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <HAL_UARTEx_RxEventCallback+0x84>)
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <HAL_UARTEx_RxEventCallback+0x84>)
 80008cc:	785b      	ldrb	r3, [r3, #1]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d813      	bhi.n	80008fa <HAL_UARTEx_RxEventCallback+0x4a>
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_UARTEx_RxEventCallback+0x84>)
 80008d4:	785b      	ldrb	r3, [r3, #1]
 80008d6:	2b0a      	cmp	r3, #10
 80008d8:	d80f      	bhi.n	80008fa <HAL_UARTEx_RxEventCallback+0x4a>
			//calculate offset
			int offset = (Rx_data[0] - 1) * 56;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <HAL_UARTEx_RxEventCallback+0x84>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	4613      	mov	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	1a9b      	subs	r3, r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	60fb      	str	r3, [r7, #12]
			//Copy to DMX_data + offset of the receiving data, copy from Rx_data minus the message info, with the size of 56
			memcpy(&DMX_data[offset], &Rx_data[2], 56);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	4a12      	ldr	r2, [pc, #72]	; (8000938 <HAL_UARTEx_RxEventCallback+0x88>)
 80008ee:	4413      	add	r3, r2
 80008f0:	2238      	movs	r2, #56	; 0x38
 80008f2:	4912      	ldr	r1, [pc, #72]	; (800093c <HAL_UARTEx_RxEventCallback+0x8c>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00a f89f 	bl	800aa38 <memcpy>
		}

		// empty the RX array
		memset(Rx_data, 0, sizeof(Rx_data));
 80008fa:	223a      	movs	r2, #58	; 0x3a
 80008fc:	2100      	movs	r1, #0
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <HAL_UARTEx_RxEventCallback+0x84>)
 8000900:	f00a f81f 	bl	800a942 <memset>

		//toggle LED
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <HAL_UARTEx_RxEventCallback+0x90>)
 800090a:	f001 f906 	bl	8001b1a <HAL_GPIO_TogglePin>

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) Rx_data, sizeof(Rx_data));
 800090e:	223a      	movs	r2, #58	; 0x3a
 8000910:	4908      	ldr	r1, [pc, #32]	; (8000934 <HAL_UARTEx_RxEventCallback+0x84>)
 8000912:	480c      	ldr	r0, [pc, #48]	; (8000944 <HAL_UARTEx_RxEventCallback+0x94>)
 8000914:	f004 fab9 	bl	8004e8a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_UARTEx_RxEventCallback+0x98>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <HAL_UARTEx_RxEventCallback+0x98>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f022 0204 	bic.w	r2, r2, #4
 8000926:	601a      	str	r2, [r3, #0]

	}
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40013800 	.word	0x40013800
 8000934:	200002f0 	.word	0x200002f0
 8000938:	2000032c 	.word	0x2000032c
 800093c:	200002f2 	.word	0x200002f2
 8000940:	40010800 	.word	0x40010800
 8000944:	20000228 	.word	0x20000228
 8000948:	20000270 	.word	0x20000270

0800094c <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_4);
 8000954:	210c      	movs	r1, #12
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000958:	f003 fc00 	bl	800415c <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000154 	.word	0x20000154
 8000970:	20000536 	.word	0x20000536

08000974 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000984:	d00e      	beq.n	80009a4 <HAL_GPIO_EXTI_Callback+0x30>
 8000986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800098a:	d000      	beq.n	800098e <HAL_GPIO_EXTI_Callback+0x1a>

		case PANIC_Pin:
			panic = !panic;
			break;
		default:
			break;
 800098c:	e00b      	b.n	80009a6 <HAL_GPIO_EXTI_Callback+0x32>
			panic = !panic;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	bf0c      	ite	eq
 8000996:	2301      	moveq	r3, #1
 8000998:	2300      	movne	r3, #0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	461a      	mov	r2, r3
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80009a0:	701a      	strb	r2, [r3, #0]
			break;
 80009a2:	e000      	b.n	80009a6 <HAL_GPIO_EXTI_Callback+0x32>
			break;
 80009a4:	bf00      	nop
	}
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	20000535 	.word	0x20000535

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_MspInit+0x5c>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <HAL_MspInit+0x5c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6193      	str	r3, [r2, #24]
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_MspInit+0x5c>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_MspInit+0x5c>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_MspInit+0x5c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_MspInit+0x5c>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_MspInit+0x60>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_MspInit+0x60>)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010000 	.word	0x40010000

08000a24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a34:	d142      	bne.n	8000abc <HAL_TIM_PWM_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <HAL_TIM_PWM_MspInit+0xc4>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <HAL_TIM_PWM_MspInit+0xc4>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <HAL_TIM_PWM_MspInit+0xc4>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000a4e:	4b27      	ldr	r3, [pc, #156]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000a50:	4a27      	ldr	r2, [pc, #156]	; (8000af0 <HAL_TIM_PWM_MspInit+0xcc>)
 8000a52:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000a56:	2210      	movs	r2, #16
 8000a58:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5a:	4b24      	ldr	r3, [pc, #144]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a6c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a74:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000a82:	481a      	ldr	r0, [pc, #104]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000a84:	f000 fbf4 	bl	8001270 <HAL_DMA_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000a8e:	f7ff ff91 	bl	80009b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a15      	ldr	r2, [pc, #84]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8000aa4:	4a11      	ldr	r2, [pc, #68]	; (8000aec <HAL_TIM_PWM_MspInit+0xc8>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	201c      	movs	r0, #28
 8000ab0:	f000 fba7 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ab4:	201c      	movs	r0, #28
 8000ab6:	f000 fbc0 	bl	800123a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000aba:	e010      	b.n	8000ade <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_TIM_PWM_MspInit+0xd0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d10b      	bne.n	8000ade <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_TIM_PWM_MspInit+0xc4>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_TIM_PWM_MspInit+0xc4>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_TIM_PWM_MspInit+0xc4>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	200001e4 	.word	0x200001e4
 8000af0:	40020080 	.word	0x40020080
 8000af4:	40000400 	.word	0x40000400

08000af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b16:	d118      	bne.n	8000b4a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <HAL_TIM_MspPostInit+0xc4>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <HAL_TIM_MspPostInit+0xc4>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <HAL_TIM_MspPostInit+0xc4>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b30:	230f      	movs	r3, #15
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	4619      	mov	r1, r3
 8000b42:	481f      	ldr	r0, [pc, #124]	; (8000bc0 <HAL_TIM_MspPostInit+0xc8>)
 8000b44:	f000 fe36 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b48:	e034      	b.n	8000bb4 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <HAL_TIM_MspPostInit+0xcc>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d12f      	bne.n	8000bb4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_TIM_MspPostInit+0xc4>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <HAL_TIM_MspPostInit+0xc4>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_TIM_MspPostInit+0xc4>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_TIM_MspPostInit+0xc4>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <HAL_TIM_MspPostInit+0xc4>)
 8000b72:	f043 0308 	orr.w	r3, r3, #8
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_TIM_MspPostInit+0xc4>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b84:	23c0      	movs	r3, #192	; 0xc0
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	4619      	mov	r1, r3
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <HAL_TIM_MspPostInit+0xc8>)
 8000b98:	f000 fe0c 	bl	80017b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0318 	add.w	r3, r7, #24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <HAL_TIM_MspPostInit+0xd0>)
 8000bb0:	f000 fe00 	bl	80017b4 <HAL_GPIO_Init>
}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010800 	.word	0x40010800
 8000bc4:	40000400 	.word	0x40000400
 8000bc8:	40010c00 	.word	0x40010c00

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a33      	ldr	r2, [pc, #204]	; (8000cb4 <HAL_UART_MspInit+0xe8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d15f      	bne.n	8000cac <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bec:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <HAL_UART_MspInit+0xec>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a31      	ldr	r2, [pc, #196]	; (8000cb8 <HAL_UART_MspInit+0xec>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <HAL_UART_MspInit+0xec>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <HAL_UART_MspInit+0xec>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a2b      	ldr	r2, [pc, #172]	; (8000cb8 <HAL_UART_MspInit+0xec>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <HAL_UART_MspInit+0xec>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4822      	ldr	r0, [pc, #136]	; (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c32:	f000 fdbf 	bl	80017b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481c      	ldr	r0, [pc, #112]	; (8000cbc <HAL_UART_MspInit+0xf0>)
 8000c4c:	f000 fdb2 	bl	80017b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <HAL_UART_MspInit+0xf8>)
 8000c54:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c80:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c82:	f000 faf5 	bl	8001270 <HAL_DMA_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000c8c:	f7ff fe92 	bl	80009b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_UART_MspInit+0xf4>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2025      	movs	r0, #37	; 0x25
 8000ca2:	f000 faae 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ca6:	2025      	movs	r0, #37	; 0x25
 8000ca8:	f000 fac7 	bl	800123a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40013800 	.word	0x40013800
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	20000270 	.word	0x20000270
 8000cc4:	40020058 	.word	0x40020058

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0e:	f000 f961 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <DMA1_Channel5_IRQHandler+0x10>)
 8000d1e:	f000 fc15 	bl	800154c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000270 	.word	0x20000270

08000d2c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <DMA1_Channel7_IRQHandler+0x10>)
 8000d32:	f000 fc0b 	bl	800154c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200001e4 	.word	0x200001e4

08000d40 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000d46:	f001 f864 	bl	8001e12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000b04 	.word	0x20000b04

08000d54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d5a:	f001 f85a 	bl	8001e12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000b04 	.word	0x20000b04

08000d68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AUX_Pin);
 8000d6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d70:	f000 feec 	bl	8001b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <TIM2_IRQHandler+0x10>)
 8000d7e:	f003 fab3 	bl	80042e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000154 	.word	0x20000154

08000d8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <USART1_IRQHandler+0x10>)
 8000d92:	f004 f8d7 	bl	8004f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000228 	.word	0x20000228

08000da0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PANIC_Pin);
 8000da4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000da8:	f000 fed0 	bl	8001b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_read>:
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_write>:
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e009      	b.n	8000e10 <_write+0x26>
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f3af 8000 	nop.w
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf1      	blt.n	8000dfc <_write+0x12>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <_fstat>:
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <_isatty>:
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <_lseek>:
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	2300      	movs	r3, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
	...

08000e84 <_sbrk>:
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
 8000eb4:	f009 fd94 	bl	800a9e0 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20005000 	.word	0x20005000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	20000538 	.word	0x20000538
 8000eec:	20001360 	.word	0x20001360

08000ef0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <Reset_Handler>:
 8000efc:	f7ff fff8 	bl	8000ef0 <SystemInit>
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <LoopFillZerobss+0xe>)
 8000f02:	490c      	ldr	r1, [pc, #48]	; (8000f34 <LoopFillZerobss+0x12>)
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <LoopFillZerobss+0x16>)
 8000f06:	2300      	movs	r3, #0
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:
 8000f0a:	58d4      	ldr	r4, [r2, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:
 8000f10:	18c4      	adds	r4, r0, r3
 8000f12:	428c      	cmp	r4, r1
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <LoopFillZerobss+0x1a>)
 8000f18:	4c09      	ldr	r4, [pc, #36]	; (8000f40 <LoopFillZerobss+0x1e>)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:
 8000f22:	42a2      	cmp	r2, r4
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>
 8000f26:	f009 fd61 	bl	800a9ec <__libc_init_array>
 8000f2a:	f7ff fa01 	bl	8000330 <main>
 8000f2e:	4770      	bx	lr
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000138 	.word	0x20000138
 8000f38:	0800b77c 	.word	0x0800b77c
 8000f3c:	20000138 	.word	0x20000138
 8000f40:	20001360 	.word	0x20001360

08000f44 <ADC1_2_IRQHandler>:
 8000f44:	e7fe      	b.n	8000f44 <ADC1_2_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_Init+0x28>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_Init+0x28>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f947 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	200f      	movs	r0, #15
 8000f60:	f000 f808 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff fd2c 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40022000 	.word	0x40022000

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x54>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f95f 	bl	8001256 <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 f927 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_InitTick+0x5c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x1c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	2000053c 	.word	0x2000053c

08000ff8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <HAL_GetTick+0x10>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	2000053c 	.word	0x2000053c

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff fff0 	bl	8000ff8 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffe0 	bl	8000ff8 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4906      	ldr	r1, [pc, #24]	; (80010ec <__NVIC_EnableIRQ+0x34>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff90 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff2d 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff42 	bl	800109c <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff90 	bl	8001144 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5f 	bl	80010f0 <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff35 	bl	80010b8 <__NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffa2 	bl	80011a8 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e043      	b.n	800130e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <HAL_DMA_Init+0xa8>)
 800128e:	4413      	add	r3, r2
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <HAL_DMA_Init+0xac>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	009a      	lsls	r2, r3, #2
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <HAL_DMA_Init+0xb0>)
 80012a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	bffdfff8 	.word	0xbffdfff8
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	40020000 	.word	0x40020000

08001324 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_DMA_Start_IT+0x20>
 8001340:	2302      	movs	r3, #2
 8001342:	e04b      	b.n	80013dc <HAL_DMA_Start_IT+0xb8>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d13a      	bne.n	80013ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2202      	movs	r2, #2
 800135c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0201 	bic.w	r2, r2, #1
 8001374:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	68b9      	ldr	r1, [r7, #8]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 f9eb 	bl	8001758 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 020e 	orr.w	r2, r2, #14
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e00f      	b.n	80013bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0204 	bic.w	r2, r2, #4
 80013aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 020a 	orr.w	r2, r2, #10
 80013ba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e005      	b.n	80013da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80013d6:	2302      	movs	r3, #2
 80013d8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80013da:	7dfb      	ldrb	r3, [r7, #23]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d008      	beq.n	800140e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2204      	movs	r2, #4
 8001400:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e020      	b.n	8001450 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 020e 	bic.w	r2, r2, #14
 800141c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0201 	bic.w	r2, r2, #1
 800142c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001436:	2101      	movs	r1, #1
 8001438:	fa01 f202 	lsl.w	r2, r1, r2
 800143c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800144e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
	...

0800145c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d005      	beq.n	8001480 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2204      	movs	r2, #4
 8001478:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e051      	b.n	8001524 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 020e 	bic.w	r2, r2, #14
 800148e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a22      	ldr	r2, [pc, #136]	; (8001530 <HAL_DMA_Abort_IT+0xd4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d029      	beq.n	80014fe <HAL_DMA_Abort_IT+0xa2>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a21      	ldr	r2, [pc, #132]	; (8001534 <HAL_DMA_Abort_IT+0xd8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d022      	beq.n	80014fa <HAL_DMA_Abort_IT+0x9e>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <HAL_DMA_Abort_IT+0xdc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d01a      	beq.n	80014f4 <HAL_DMA_Abort_IT+0x98>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a1e      	ldr	r2, [pc, #120]	; (800153c <HAL_DMA_Abort_IT+0xe0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d012      	beq.n	80014ee <HAL_DMA_Abort_IT+0x92>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <HAL_DMA_Abort_IT+0xe4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00a      	beq.n	80014e8 <HAL_DMA_Abort_IT+0x8c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <HAL_DMA_Abort_IT+0xe8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d102      	bne.n	80014e2 <HAL_DMA_Abort_IT+0x86>
 80014dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014e0:	e00e      	b.n	8001500 <HAL_DMA_Abort_IT+0xa4>
 80014e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014e6:	e00b      	b.n	8001500 <HAL_DMA_Abort_IT+0xa4>
 80014e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ec:	e008      	b.n	8001500 <HAL_DMA_Abort_IT+0xa4>
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	e005      	b.n	8001500 <HAL_DMA_Abort_IT+0xa4>
 80014f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f8:	e002      	b.n	8001500 <HAL_DMA_Abort_IT+0xa4>
 80014fa:	2310      	movs	r3, #16
 80014fc:	e000      	b.n	8001500 <HAL_DMA_Abort_IT+0xa4>
 80014fe:	2301      	movs	r3, #1
 8001500:	4a11      	ldr	r2, [pc, #68]	; (8001548 <HAL_DMA_Abort_IT+0xec>)
 8001502:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4798      	blx	r3
    } 
  }
  return status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40020008 	.word	0x40020008
 8001534:	4002001c 	.word	0x4002001c
 8001538:	40020030 	.word	0x40020030
 800153c:	40020044 	.word	0x40020044
 8001540:	40020058 	.word	0x40020058
 8001544:	4002006c 	.word	0x4002006c
 8001548:	40020000 	.word	0x40020000

0800154c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	2204      	movs	r2, #4
 800156a:	409a      	lsls	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d04f      	beq.n	8001614 <HAL_DMA_IRQHandler+0xc8>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b00      	cmp	r3, #0
 800157c:	d04a      	beq.n	8001614 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0320 	and.w	r3, r3, #32
 8001588:	2b00      	cmp	r3, #0
 800158a:	d107      	bne.n	800159c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0204 	bic.w	r2, r2, #4
 800159a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a66      	ldr	r2, [pc, #408]	; (800173c <HAL_DMA_IRQHandler+0x1f0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d029      	beq.n	80015fa <HAL_DMA_IRQHandler+0xae>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a65      	ldr	r2, [pc, #404]	; (8001740 <HAL_DMA_IRQHandler+0x1f4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d022      	beq.n	80015f6 <HAL_DMA_IRQHandler+0xaa>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a63      	ldr	r2, [pc, #396]	; (8001744 <HAL_DMA_IRQHandler+0x1f8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01a      	beq.n	80015f0 <HAL_DMA_IRQHandler+0xa4>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a62      	ldr	r2, [pc, #392]	; (8001748 <HAL_DMA_IRQHandler+0x1fc>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d012      	beq.n	80015ea <HAL_DMA_IRQHandler+0x9e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a60      	ldr	r2, [pc, #384]	; (800174c <HAL_DMA_IRQHandler+0x200>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00a      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x98>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a5f      	ldr	r2, [pc, #380]	; (8001750 <HAL_DMA_IRQHandler+0x204>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d102      	bne.n	80015de <HAL_DMA_IRQHandler+0x92>
 80015d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015dc:	e00e      	b.n	80015fc <HAL_DMA_IRQHandler+0xb0>
 80015de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015e2:	e00b      	b.n	80015fc <HAL_DMA_IRQHandler+0xb0>
 80015e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015e8:	e008      	b.n	80015fc <HAL_DMA_IRQHandler+0xb0>
 80015ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ee:	e005      	b.n	80015fc <HAL_DMA_IRQHandler+0xb0>
 80015f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f4:	e002      	b.n	80015fc <HAL_DMA_IRQHandler+0xb0>
 80015f6:	2340      	movs	r3, #64	; 0x40
 80015f8:	e000      	b.n	80015fc <HAL_DMA_IRQHandler+0xb0>
 80015fa:	2304      	movs	r3, #4
 80015fc:	4a55      	ldr	r2, [pc, #340]	; (8001754 <HAL_DMA_IRQHandler+0x208>)
 80015fe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8094 	beq.w	8001732 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001612:	e08e      	b.n	8001732 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	2202      	movs	r2, #2
 800161a:	409a      	lsls	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d056      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x186>
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d051      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0320 	and.w	r3, r3, #32
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10b      	bne.n	8001654 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 020a 	bic.w	r2, r2, #10
 800164a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a38      	ldr	r2, [pc, #224]	; (800173c <HAL_DMA_IRQHandler+0x1f0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d029      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x166>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a37      	ldr	r2, [pc, #220]	; (8001740 <HAL_DMA_IRQHandler+0x1f4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d022      	beq.n	80016ae <HAL_DMA_IRQHandler+0x162>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a35      	ldr	r2, [pc, #212]	; (8001744 <HAL_DMA_IRQHandler+0x1f8>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d01a      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x15c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a34      	ldr	r2, [pc, #208]	; (8001748 <HAL_DMA_IRQHandler+0x1fc>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d012      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x156>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a32      	ldr	r2, [pc, #200]	; (800174c <HAL_DMA_IRQHandler+0x200>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00a      	beq.n	800169c <HAL_DMA_IRQHandler+0x150>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a31      	ldr	r2, [pc, #196]	; (8001750 <HAL_DMA_IRQHandler+0x204>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d102      	bne.n	8001696 <HAL_DMA_IRQHandler+0x14a>
 8001690:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001694:	e00e      	b.n	80016b4 <HAL_DMA_IRQHandler+0x168>
 8001696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800169a:	e00b      	b.n	80016b4 <HAL_DMA_IRQHandler+0x168>
 800169c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a0:	e008      	b.n	80016b4 <HAL_DMA_IRQHandler+0x168>
 80016a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a6:	e005      	b.n	80016b4 <HAL_DMA_IRQHandler+0x168>
 80016a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ac:	e002      	b.n	80016b4 <HAL_DMA_IRQHandler+0x168>
 80016ae:	2320      	movs	r3, #32
 80016b0:	e000      	b.n	80016b4 <HAL_DMA_IRQHandler+0x168>
 80016b2:	2302      	movs	r3, #2
 80016b4:	4a27      	ldr	r2, [pc, #156]	; (8001754 <HAL_DMA_IRQHandler+0x208>)
 80016b6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d034      	beq.n	8001732 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016d0:	e02f      	b.n	8001732 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2208      	movs	r2, #8
 80016d8:	409a      	lsls	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d028      	beq.n	8001734 <HAL_DMA_IRQHandler+0x1e8>
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d023      	beq.n	8001734 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 020e 	bic.w	r2, r2, #14
 80016fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001704:	2101      	movs	r1, #1
 8001706:	fa01 f202 	lsl.w	r2, r1, r2
 800170a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	4798      	blx	r3
    }
  }
  return;
 8001732:	bf00      	nop
 8001734:	bf00      	nop
}
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020008 	.word	0x40020008
 8001740:	4002001c 	.word	0x4002001c
 8001744:	40020030 	.word	0x40020030
 8001748:	40020044 	.word	0x40020044
 800174c:	40020058 	.word	0x40020058
 8001750:	4002006c 	.word	0x4002006c
 8001754:	40020000 	.word	0x40020000

08001758 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f202 	lsl.w	r2, r1, r2
 8001774:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b10      	cmp	r3, #16
 8001784:	d108      	bne.n	8001798 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001796:	e007      	b.n	80017a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b08b      	sub	sp, #44	; 0x2c
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c6:	e169      	b.n	8001a9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c8:	2201      	movs	r2, #1
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	f040 8158 	bne.w	8001a96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a9a      	ldr	r2, [pc, #616]	; (8001a54 <HAL_GPIO_Init+0x2a0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d05e      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 80017f0:	4a98      	ldr	r2, [pc, #608]	; (8001a54 <HAL_GPIO_Init+0x2a0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d875      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 80017f6:	4a98      	ldr	r2, [pc, #608]	; (8001a58 <HAL_GPIO_Init+0x2a4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d058      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 80017fc:	4a96      	ldr	r2, [pc, #600]	; (8001a58 <HAL_GPIO_Init+0x2a4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d86f      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 8001802:	4a96      	ldr	r2, [pc, #600]	; (8001a5c <HAL_GPIO_Init+0x2a8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d052      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001808:	4a94      	ldr	r2, [pc, #592]	; (8001a5c <HAL_GPIO_Init+0x2a8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d869      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800180e:	4a94      	ldr	r2, [pc, #592]	; (8001a60 <HAL_GPIO_Init+0x2ac>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d04c      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001814:	4a92      	ldr	r2, [pc, #584]	; (8001a60 <HAL_GPIO_Init+0x2ac>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d863      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800181a:	4a92      	ldr	r2, [pc, #584]	; (8001a64 <HAL_GPIO_Init+0x2b0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d046      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001820:	4a90      	ldr	r2, [pc, #576]	; (8001a64 <HAL_GPIO_Init+0x2b0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d85d      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 8001826:	2b12      	cmp	r3, #18
 8001828:	d82a      	bhi.n	8001880 <HAL_GPIO_Init+0xcc>
 800182a:	2b12      	cmp	r3, #18
 800182c:	d859      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800182e:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <HAL_GPIO_Init+0x80>)
 8001830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001834:	080018af 	.word	0x080018af
 8001838:	08001889 	.word	0x08001889
 800183c:	0800189b 	.word	0x0800189b
 8001840:	080018dd 	.word	0x080018dd
 8001844:	080018e3 	.word	0x080018e3
 8001848:	080018e3 	.word	0x080018e3
 800184c:	080018e3 	.word	0x080018e3
 8001850:	080018e3 	.word	0x080018e3
 8001854:	080018e3 	.word	0x080018e3
 8001858:	080018e3 	.word	0x080018e3
 800185c:	080018e3 	.word	0x080018e3
 8001860:	080018e3 	.word	0x080018e3
 8001864:	080018e3 	.word	0x080018e3
 8001868:	080018e3 	.word	0x080018e3
 800186c:	080018e3 	.word	0x080018e3
 8001870:	080018e3 	.word	0x080018e3
 8001874:	080018e3 	.word	0x080018e3
 8001878:	08001891 	.word	0x08001891
 800187c:	080018a5 	.word	0x080018a5
 8001880:	4a79      	ldr	r2, [pc, #484]	; (8001a68 <HAL_GPIO_Init+0x2b4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001886:	e02c      	b.n	80018e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e029      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	3304      	adds	r3, #4
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e024      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	3308      	adds	r3, #8
 80018a0:	623b      	str	r3, [r7, #32]
          break;
 80018a2:	e01f      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	330c      	adds	r3, #12
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	e01a      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018b6:	2304      	movs	r3, #4
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e013      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	611a      	str	r2, [r3, #16]
          break;
 80018ce:	e009      	b.n	80018e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d0:	2308      	movs	r3, #8
 80018d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	615a      	str	r2, [r3, #20]
          break;
 80018da:	e003      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          break;
 80018e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2bff      	cmp	r3, #255	; 0xff
 80018e8:	d801      	bhi.n	80018ee <HAL_GPIO_Init+0x13a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	e001      	b.n	80018f2 <HAL_GPIO_Init+0x13e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3304      	adds	r3, #4
 80018f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d802      	bhi.n	8001900 <HAL_GPIO_Init+0x14c>
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	e002      	b.n	8001906 <HAL_GPIO_Init+0x152>
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	3b08      	subs	r3, #8
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	210f      	movs	r1, #15
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	401a      	ands	r2, r3
 8001918:	6a39      	ldr	r1, [r7, #32]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80b1 	beq.w	8001a96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001934:	4b4d      	ldr	r3, [pc, #308]	; (8001a6c <HAL_GPIO_Init+0x2b8>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a4c      	ldr	r2, [pc, #304]	; (8001a6c <HAL_GPIO_Init+0x2b8>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <HAL_GPIO_Init+0x2b8>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800194c:	4a48      	ldr	r2, [pc, #288]	; (8001a70 <HAL_GPIO_Init+0x2bc>)
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001958:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a40      	ldr	r2, [pc, #256]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d013      	beq.n	80019a0 <HAL_GPIO_Init+0x1ec>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a3f      	ldr	r2, [pc, #252]	; (8001a78 <HAL_GPIO_Init+0x2c4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d00d      	beq.n	800199c <HAL_GPIO_Init+0x1e8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3e      	ldr	r2, [pc, #248]	; (8001a7c <HAL_GPIO_Init+0x2c8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d007      	beq.n	8001998 <HAL_GPIO_Init+0x1e4>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a3d      	ldr	r2, [pc, #244]	; (8001a80 <HAL_GPIO_Init+0x2cc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d101      	bne.n	8001994 <HAL_GPIO_Init+0x1e0>
 8001990:	2303      	movs	r3, #3
 8001992:	e006      	b.n	80019a2 <HAL_GPIO_Init+0x1ee>
 8001994:	2304      	movs	r3, #4
 8001996:	e004      	b.n	80019a2 <HAL_GPIO_Init+0x1ee>
 8001998:	2302      	movs	r3, #2
 800199a:	e002      	b.n	80019a2 <HAL_GPIO_Init+0x1ee>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_GPIO_Init+0x1ee>
 80019a0:	2300      	movs	r3, #0
 80019a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a4:	f002 0203 	and.w	r2, r2, #3
 80019a8:	0092      	lsls	r2, r2, #2
 80019aa:	4093      	lsls	r3, r2
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b2:	492f      	ldr	r1, [pc, #188]	; (8001a70 <HAL_GPIO_Init+0x2bc>)
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	492c      	ldr	r1, [pc, #176]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4928      	ldr	r1, [pc, #160]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f4:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	4922      	ldr	r1, [pc, #136]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	491e      	ldr	r1, [pc, #120]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4918      	ldr	r1, [pc, #96]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4914      	ldr	r1, [pc, #80]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d021      	beq.n	8001a88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	490e      	ldr	r1, [pc, #56]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e021      	b.n	8001a96 <HAL_GPIO_Init+0x2e2>
 8001a52:	bf00      	nop
 8001a54:	10320000 	.word	0x10320000
 8001a58:	10310000 	.word	0x10310000
 8001a5c:	10220000 	.word	0x10220000
 8001a60:	10210000 	.word	0x10210000
 8001a64:	10120000 	.word	0x10120000
 8001a68:	10110000 	.word	0x10110000
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010000 	.word	0x40010000
 8001a74:	40010800 	.word	0x40010800
 8001a78:	40010c00 	.word	0x40010c00
 8001a7c:	40011000 	.word	0x40011000
 8001a80:	40011400 	.word	0x40011400
 8001a84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	4909      	ldr	r1, [pc, #36]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	3301      	adds	r3, #1
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f47f ae8e 	bne.w	80017c8 <HAL_GPIO_Init+0x14>
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	372c      	adds	r7, #44	; 0x2c
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	40010400 	.word	0x40010400

08001abc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e001      	b.n	8001ade <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	807b      	strh	r3, [r7, #2]
 8001af6:	4613      	mov	r3, r2
 8001af8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afa:	787b      	ldrb	r3, [r7, #1]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b06:	e003      	b.n	8001b10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	041a      	lsls	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	611a      	str	r2, [r3, #16]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b2c:	887a      	ldrh	r2, [r7, #2]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	041a      	lsls	r2, r3, #16
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	611a      	str	r2, [r3, #16]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d006      	beq.n	8001b70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe ff02 	bl	8000974 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40010400 	.word	0x40010400

08001b7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	b08b      	sub	sp, #44	; 0x2c
 8001b80:	af06      	add	r7, sp, #24
 8001b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0f1      	b.n	8001d72 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f008 fb3e 	bl	800a224 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2203      	movs	r2, #3
 8001bac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f004 f8f7 	bl	8005da8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	687e      	ldr	r6, [r7, #4]
 8001bc2:	466d      	mov	r5, sp
 8001bc4:	f106 0410 	add.w	r4, r6, #16
 8001bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	602b      	str	r3, [r5, #0]
 8001bd0:	1d33      	adds	r3, r6, #4
 8001bd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bd4:	6838      	ldr	r0, [r7, #0]
 8001bd6:	f004 f8c1 	bl	8005d5c <USB_CoreInit>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0c2      	b.n	8001d72 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 f8f2 	bl	8005ddc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	e040      	b.n	8001c80 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3301      	adds	r3, #1
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	3303      	adds	r3, #3
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3338      	adds	r3, #56	; 0x38
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	333c      	adds	r3, #60	; 0x3c
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	3340      	adds	r3, #64	; 0x40
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d3b9      	bcc.n	8001bfe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	e044      	b.n	8001d1a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	3301      	adds	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3b5      	bcc.n	8001c90 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	687e      	ldr	r6, [r7, #4]
 8001d2c:	466d      	mov	r5, sp
 8001d2e:	f106 0410 	add.w	r4, r6, #16
 8001d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	602b      	str	r3, [r5, #0]
 8001d3a:	1d33      	adds	r3, r6, #4
 8001d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3e:	6838      	ldr	r0, [r7, #0]
 8001d40:	f004 f858 	bl	8005df4 <USB_DevInit>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00d      	b.n	8001d72 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f006 f8ed 	bl	8007f4a <USB_DevDisconnect>

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_PCD_Start+0x16>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e016      	b.n	8001dbe <HAL_PCD_Start+0x44>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 ffed 	bl	8005d7c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001da2:	2101      	movs	r1, #1
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f008 fc88 	bl	800a6ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f006 f8c1 	bl	8007f36 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_PCD_Stop+0x16>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e016      	b.n	8001e0a <HAL_PCD_Stop+0x44>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 ffdd 	bl	8005da8 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8001dee:	2100      	movs	r1, #0
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f008 fc62 	bl	800a6ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f006 f8a5 	bl	8007f4a <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b088      	sub	sp, #32
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f006 f89d 	bl	8007f5e <USB_ReadInterrupts>
 8001e24:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fabc 	bl	80023ae <PCD_EP_ISR_Handler>

    return;
 8001e36:	e119      	b.n	800206c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d013      	beq.n	8001e6a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e54:	b292      	uxth	r2, r2
 8001e56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f008 fa65 	bl	800a32a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f905 	bl	8002072 <HAL_PCD_SetAddress>

    return;
 8001e68:	e100      	b.n	800206c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00c      	beq.n	8001e8e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e86:	b292      	uxth	r2, r2
 8001e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e8c:	e0ee      	b.n	800206c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00c      	beq.n	8001eb2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eaa:	b292      	uxth	r2, r2
 8001eac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001eb0:	e0dc      	b.n	800206c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d027      	beq.n	8001f0c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0204 	bic.w	r2, r2, #4
 8001ece:	b292      	uxth	r2, r2
 8001ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0208 	bic.w	r2, r2, #8
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f008 fa55 	bl	800a39c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f04:	b292      	uxth	r2, r2
 8001f06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f0a:	e0af      	b.n	800206c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8083 	beq.w	800201e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	77fb      	strb	r3, [r7, #31]
 8001f1c:	e010      	b.n	8001f40 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	7ffb      	ldrb	r3, [r7, #31]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	441a      	add	r2, r3
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
 8001f2c:	8812      	ldrh	r2, [r2, #0]
 8001f2e:	b292      	uxth	r2, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	3320      	adds	r3, #32
 8001f34:	443b      	add	r3, r7
 8001f36:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001f3a:	7ffb      	ldrb	r3, [r7, #31]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	77fb      	strb	r3, [r7, #31]
 8001f40:	7ffb      	ldrb	r3, [r7, #31]
 8001f42:	2b07      	cmp	r3, #7
 8001f44:	d9eb      	bls.n	8001f1e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	b292      	uxth	r2, r2
 8001f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	b292      	uxth	r2, r2
 8001f72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001f76:	bf00      	nop
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f6      	beq.n	8001f78 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9c:	b292      	uxth	r2, r2
 8001f9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	77fb      	strb	r3, [r7, #31]
 8001fa6:	e00f      	b.n	8001fc8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001fa8:	7ffb      	ldrb	r3, [r7, #31]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	7ffa      	ldrb	r2, [r7, #31]
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	440a      	add	r2, r1
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	3320      	adds	r3, #32
 8001fba:	443b      	add	r3, r7
 8001fbc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001fc0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	77fb      	strb	r3, [r7, #31]
 8001fc8:	7ffb      	ldrb	r3, [r7, #31]
 8001fca:	2b07      	cmp	r3, #7
 8001fcc:	d9ec      	bls.n	8001fa8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0208 	orr.w	r2, r2, #8
 8001fe0:	b292      	uxth	r2, r2
 8001fe2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff8:	b292      	uxth	r2, r2
 8001ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002006:	b29a      	uxth	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0204 	orr.w	r2, r2, #4
 8002010:	b292      	uxth	r2, r2
 8002012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f008 f9a6 	bl	800a368 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800201c:	e026      	b.n	800206c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00f      	beq.n	8002048 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002030:	b29a      	uxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800203a:	b292      	uxth	r2, r2
 800203c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f008 f964 	bl	800a30e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002046:	e011      	b.n	800206c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002064:	b292      	uxth	r2, r2
 8002066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800206a:	bf00      	nop
  }
}
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_PCD_SetAddress+0x1a>
 8002088:	2302      	movs	r3, #2
 800208a:	e013      	b.n	80020b4 <HAL_PCD_SetAddress+0x42>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f005 ff33 	bl	8007f10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	4608      	mov	r0, r1
 80020c6:	4611      	mov	r1, r2
 80020c8:	461a      	mov	r2, r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	70fb      	strb	r3, [r7, #3]
 80020ce:	460b      	mov	r3, r1
 80020d0:	803b      	strh	r3, [r7, #0]
 80020d2:	4613      	mov	r3, r2
 80020d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	da0e      	bge.n	8002100 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	705a      	strb	r2, [r3, #1]
 80020fe:	e00e      	b.n	800211e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 0207 	and.w	r2, r3, #7
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	b2da      	uxtb	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800212a:	883a      	ldrh	r2, [r7, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	78ba      	ldrb	r2, [r7, #2]
 8002134:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002136:	78bb      	ldrb	r3, [r7, #2]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d102      	bne.n	8002142 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_PCD_EP_Open+0x94>
 800214c:	2302      	movs	r3, #2
 800214e:	e00e      	b.n	800216e <HAL_PCD_EP_Open+0xb2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68f9      	ldr	r1, [r7, #12]
 800215e:	4618      	mov	r0, r3
 8002160:	f003 fe68 	bl	8005e34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800216c:	7afb      	ldrb	r3, [r7, #11]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	460b      	mov	r3, r1
 8002184:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002186:	7afb      	ldrb	r3, [r7, #11]
 8002188:	f003 0207 	and.w	r2, r3, #7
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2200      	movs	r2, #0
 80021ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2200      	movs	r2, #0
 80021b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b6:	7afb      	ldrb	r3, [r7, #11]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6979      	ldr	r1, [r7, #20]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 f9f3 	bl	80065b4 <USB_EPStartXfer>

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	460b      	mov	r3, r1
 80021e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e8:	7afb      	ldrb	r3, [r7, #11]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2201      	movs	r2, #1
 8002222:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002224:	7afb      	ldrb	r3, [r7, #11]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	b2da      	uxtb	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6979      	ldr	r1, [r7, #20]
 8002236:	4618      	mov	r0, r3
 8002238:	f004 f9bc 	bl	80065b4 <USB_EPStartXfer>

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 0207 	and.w	r2, r3, #7
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	d901      	bls.n	8002264 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e04c      	b.n	80022fe <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002268:	2b00      	cmp	r3, #0
 800226a:	da0e      	bge.n	800228a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	705a      	strb	r2, [r3, #1]
 8002288:	e00c      	b.n	80022a4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_PCD_EP_SetStall+0x7e>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e01c      	b.n	80022fe <HAL_PCD_EP_SetStall+0xb8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68f9      	ldr	r1, [r7, #12]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f005 fd1f 	bl	8007d16 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d108      	bne.n	80022f4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f005 fe44 	bl	8007f7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	f003 020f 	and.w	r2, r3, #15
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	d901      	bls.n	8002324 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e040      	b.n	80023a6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002328:	2b00      	cmp	r3, #0
 800232a:	da0e      	bge.n	800234a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	705a      	strb	r2, [r3, #1]
 8002348:	e00e      	b.n	8002368 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f003 0207 	and.w	r2, r3, #7
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	b2da      	uxtb	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_PCD_EP_ClrStall+0x82>
 8002384:	2302      	movs	r3, #2
 8002386:	e00e      	b.n	80023a6 <HAL_PCD_EP_ClrStall+0xa0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68f9      	ldr	r1, [r7, #12]
 8002396:	4618      	mov	r0, r3
 8002398:	f005 fd0d 	bl	8007db6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b096      	sub	sp, #88	; 0x58
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023b6:	e3bf      	b.n	8002b38 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80023d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 8179 	bne.w	80026ce <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d152      	bne.n	800248e <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f8:	81fb      	strh	r3, [r7, #14]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	89fb      	ldrh	r3, [r7, #14]
 8002400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002408:	b29b      	uxth	r3, r3
 800240a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3328      	adds	r3, #40	; 0x28
 8002410:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	3302      	adds	r3, #2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800243a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800243e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	441a      	add	r2, r3
 8002448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800244c:	2100      	movs	r1, #0
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f007 ff43 	bl	800a2da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 836b 	beq.w	8002b38 <PCD_EP_ISR_Handler+0x78a>
 8002462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 8366 	bne.w	8002b38 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002478:	b2da      	uxtb	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b292      	uxth	r2, r2
 8002480:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800248c:	e354      	b.n	8002b38 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002494:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d034      	beq.n	8002516 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	3306      	adds	r3, #6
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80024e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f005 fd96 	bl	800801c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024fc:	4013      	ands	r3, r2
 80024fe:	823b      	strh	r3, [r7, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	8a3a      	ldrh	r2, [r7, #16]
 8002506:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800250a:	b292      	uxth	r2, r2
 800250c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f007 feb6 	bl	800a280 <HAL_PCD_SetupStageCallback>
 8002514:	e310      	b.n	8002b38 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002516:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800251a:	2b00      	cmp	r3, #0
 800251c:	f280 830c 	bge.w	8002b38 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29a      	uxth	r2, r3
 8002528:	f640 738f 	movw	r3, #3983	; 0xf8f
 800252c:	4013      	ands	r3, r2
 800252e:	83fb      	strh	r3, [r7, #30]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	8bfa      	ldrh	r2, [r7, #30]
 8002536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800253a:	b292      	uxth	r2, r2
 800253c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	3306      	adds	r3, #6
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002568:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800256a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d019      	beq.n	80025a6 <PCD_EP_ISR_Handler+0x1f8>
 8002572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002580:	6959      	ldr	r1, [r3, #20]
 8002582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002584:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002588:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800258a:	b29b      	uxth	r3, r3
 800258c:	f005 fd46 	bl	800801c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	441a      	add	r2, r3
 800259a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800259e:	2100      	movs	r1, #0
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f007 fe7f 	bl	800a2a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80025b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 82bd 	bne.w	8002b38 <PCD_EP_ISR_Handler+0x78a>
 80025be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80025c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025ca:	f000 82b5 	beq.w	8002b38 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025dc:	b29b      	uxth	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4413      	add	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	801a      	strh	r2, [r3, #0]
 80025fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b3e      	cmp	r3, #62	; 0x3e
 8002604:	d91d      	bls.n	8002642 <PCD_EP_ISR_Handler+0x294>
 8002606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	647b      	str	r3, [r7, #68]	; 0x44
 800260e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <PCD_EP_ISR_Handler+0x272>
 800261a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261c:	3b01      	subs	r3, #1
 800261e:	647b      	str	r3, [r7, #68]	; 0x44
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29a      	uxth	r2, r3
 8002626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002628:	b29b      	uxth	r3, r3
 800262a:	029b      	lsls	r3, r3, #10
 800262c:	b29b      	uxth	r3, r3
 800262e:	4313      	orrs	r3, r2
 8002630:	b29b      	uxth	r3, r3
 8002632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800263a:	b29a      	uxth	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	801a      	strh	r2, [r3, #0]
 8002640:	e026      	b.n	8002690 <PCD_EP_ISR_Handler+0x2e2>
 8002642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <PCD_EP_ISR_Handler+0x2b2>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002658:	b29a      	uxth	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	e017      	b.n	8002690 <PCD_EP_ISR_Handler+0x2e2>
 8002660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	647b      	str	r3, [r7, #68]	; 0x44
 8002668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <PCD_EP_ISR_Handler+0x2cc>
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	3301      	adds	r3, #1
 8002678:	647b      	str	r3, [r7, #68]	; 0x44
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29a      	uxth	r2, r3
 8002680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002682:	b29b      	uxth	r3, r3
 8002684:	029b      	lsls	r3, r3, #10
 8002686:	b29b      	uxth	r3, r3
 8002688:	4313      	orrs	r3, r2
 800268a:	b29a      	uxth	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800269c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a0:	827b      	strh	r3, [r7, #18]
 80026a2:	8a7b      	ldrh	r3, [r7, #18]
 80026a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026a8:	827b      	strh	r3, [r7, #18]
 80026aa:	8a7b      	ldrh	r3, [r7, #18]
 80026ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026b0:	827b      	strh	r3, [r7, #18]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	8a7b      	ldrh	r3, [r7, #18]
 80026b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	8013      	strh	r3, [r2, #0]
 80026cc:	e234      	b.n	8002b38 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f280 80fc 	bge.w	80028e4 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002702:	4013      	ands	r3, r2
 8002704:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800271a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800271e:	b292      	uxth	r2, r2
 8002720:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002722:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273a:	7b1b      	ldrb	r3, [r3, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d125      	bne.n	800278c <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	3306      	adds	r3, #6
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002768:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800276c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8092 	beq.w	800289a <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277c:	6959      	ldr	r1, [r3, #20]
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002780:	88da      	ldrh	r2, [r3, #6]
 8002782:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002786:	f005 fc49 	bl	800801c <USB_ReadPMA>
 800278a:	e086      	b.n	800289a <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800278c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278e:	78db      	ldrb	r3, [r3, #3]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d10a      	bne.n	80027aa <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002794:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002798:	461a      	mov	r2, r3
 800279a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f9d9 	bl	8002b54 <HAL_PCD_EP_DB_Receive>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80027a8:	e077      	b.n	800289a <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80027da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d024      	beq.n	8002852 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	3302      	adds	r3, #2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002830:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002834:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02e      	beq.n	800289a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002842:	6959      	ldr	r1, [r3, #20]
 8002844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002846:	891a      	ldrh	r2, [r3, #8]
 8002848:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800284c:	f005 fbe6 	bl	800801c <USB_ReadPMA>
 8002850:	e023      	b.n	800289a <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285a:	b29b      	uxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	3306      	adds	r3, #6
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800287e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288c:	6959      	ldr	r1, [r3, #20]
 800288e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002890:	895a      	ldrh	r2, [r3, #10]
 8002892:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002896:	f005 fbc1 	bl	800801c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800289a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028a2:	441a      	add	r2, r3
 80028a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028b0:	441a      	add	r2, r3
 80028b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <PCD_EP_ISR_Handler+0x51c>
 80028be:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d206      	bcs.n	80028d8 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f007 fce7 	bl	800a2a4 <HAL_PCD_DataOutStageCallback>
 80028d6:	e005      	b.n	80028e4 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fe68 	bl	80065b4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8123 	beq.w	8002b38 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80028f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800291c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002920:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	441a      	add	r2, r3
 8002932:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800293a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800293e:	b29b      	uxth	r3, r3
 8002940:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002944:	78db      	ldrb	r3, [r3, #3]
 8002946:	2b01      	cmp	r3, #1
 8002948:	f040 80a2 	bne.w	8002a90 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800294c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002954:	7b1b      	ldrb	r3, [r3, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8093 	beq.w	8002a82 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800295c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d046      	beq.n	80029f6 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296a:	785b      	ldrb	r3, [r3, #1]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d126      	bne.n	80029be <PCD_EP_ISR_Handler+0x610>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297e:	b29b      	uxth	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	4413      	add	r3, r2
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	011a      	lsls	r2, r3, #4
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	4413      	add	r3, r2
 8002992:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	801a      	strh	r2, [r3, #0]
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	e061      	b.n	8002a82 <PCD_EP_ISR_Handler+0x6d4>
 80029be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c0:	785b      	ldrb	r3, [r3, #1]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d15d      	bne.n	8002a82 <PCD_EP_ISR_Handler+0x6d4>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	4413      	add	r3, r2
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	011a      	lsls	r2, r3, #4
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	4413      	add	r3, r2
 80029e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	2200      	movs	r2, #0
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	e045      	b.n	8002a82 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fe:	785b      	ldrb	r3, [r3, #1]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d126      	bne.n	8002a52 <PCD_EP_ISR_Handler+0x6a4>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a18:	4413      	add	r3, r2
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	011a      	lsls	r2, r3, #4
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a24:	4413      	add	r3, r2
 8002a26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	801a      	strh	r2, [r3, #0]
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	801a      	strh	r2, [r3, #0]
 8002a50:	e017      	b.n	8002a82 <PCD_EP_ISR_Handler+0x6d4>
 8002a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d113      	bne.n	8002a82 <PCD_EP_ISR_Handler+0x6d4>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a68:	4413      	add	r3, r2
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	011a      	lsls	r2, r3, #4
 8002a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a74:	4413      	add	r3, r2
 8002a76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7e:	2200      	movs	r2, #0
 8002a80:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f007 fc26 	bl	800a2da <HAL_PCD_DataInStageCallback>
 8002a8e:	e053      	b.n	8002b38 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d146      	bne.n	8002b2a <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d907      	bls.n	8002ae4 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002adc:	1ad2      	subs	r2, r2, r3
 8002ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae0:	619a      	str	r2, [r3, #24]
 8002ae2:	e002      	b.n	8002aea <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f007 fbee 	bl	800a2da <HAL_PCD_DataInStageCallback>
 8002afe:	e01b      	b.n	8002b38 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b08:	441a      	add	r2, r3
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b16:	441a      	add	r2, r3
 8002b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 fd46 	bl	80065b4 <USB_EPStartXfer>
 8002b28:	e006      	b.n	8002b38 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b2e:	461a      	mov	r2, r3
 8002b30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f91b 	bl	8002d6e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b21b      	sxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f6ff ac37 	blt.w	80023b8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3758      	adds	r7, #88	; 0x58
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d07e      	beq.n	8002c6a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3302      	adds	r3, #2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	8b7b      	ldrh	r3, [r7, #26]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d306      	bcc.n	8002bae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	8b7b      	ldrh	r3, [r7, #26]
 8002ba6:	1ad2      	subs	r2, r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	619a      	str	r2, [r3, #24]
 8002bac:	e002      	b.n	8002bb4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d123      	bne.n	8002c04 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	833b      	strh	r3, [r7, #24]
 8002bd8:	8b3b      	ldrh	r3, [r7, #24]
 8002bda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bde:	833b      	strh	r3, [r7, #24]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	8b3b      	ldrh	r3, [r7, #24]
 8002bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01f      	beq.n	8002c4e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c28:	82fb      	strh	r3, [r7, #22]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	441a      	add	r2, r3
 8002c38:	8afb      	ldrh	r3, [r7, #22]
 8002c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c4e:	8b7b      	ldrh	r3, [r7, #26]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8087 	beq.w	8002d64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	6959      	ldr	r1, [r3, #20]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	891a      	ldrh	r2, [r3, #8]
 8002c62:	8b7b      	ldrh	r3, [r7, #26]
 8002c64:	f005 f9da 	bl	800801c <USB_ReadPMA>
 8002c68:	e07c      	b.n	8002d64 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3306      	adds	r3, #6
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	699a      	ldr	r2, [r3, #24]
 8002c98:	8b7b      	ldrh	r3, [r7, #26]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d306      	bcc.n	8002cac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	8b7b      	ldrh	r3, [r7, #26]
 8002ca4:	1ad2      	subs	r2, r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	619a      	str	r2, [r3, #24]
 8002caa:	e002      	b.n	8002cb2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d123      	bne.n	8002d02 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd4:	83fb      	strh	r3, [r7, #30]
 8002cd6:	8bfb      	ldrh	r3, [r7, #30]
 8002cd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cdc:	83fb      	strh	r3, [r7, #30]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	441a      	add	r2, r3
 8002cec:	8bfb      	ldrh	r3, [r7, #30]
 8002cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d11f      	bne.n	8002d4c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d26:	83bb      	strh	r3, [r7, #28]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	8bbb      	ldrh	r3, [r7, #28]
 8002d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d4c:	8b7b      	ldrh	r3, [r7, #26]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6959      	ldr	r1, [r3, #20]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	895a      	ldrh	r2, [r3, #10]
 8002d5e:	8b7b      	ldrh	r3, [r7, #26]
 8002d60:	f005 f95c 	bl	800801c <USB_ReadPMA>
    }
  }

  return count;
 8002d64:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b0a4      	sub	sp, #144	; 0x90
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 81dd 	beq.w	8003142 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d907      	bls.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002dc8:	1ad2      	subs	r2, r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	619a      	str	r2, [r3, #24]
 8002dce:	e002      	b.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 80b9 	bne.w	8002f52 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d126      	bne.n	8002e36 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	4413      	add	r3, r2
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	011a      	lsls	r2, r3, #4
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	4413      	add	r3, r2
 8002e0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	801a      	strh	r2, [r3, #0]
 8002e34:	e01a      	b.n	8002e6c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	785b      	ldrb	r3, [r3, #1]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d116      	bne.n	8002e6c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	637b      	str	r3, [r7, #52]	; 0x34
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e52:	4413      	add	r3, r2
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	011a      	lsls	r2, r3, #4
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5e:	4413      	add	r3, r2
 8002e60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	2200      	movs	r2, #0
 8002e6a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d126      	bne.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	011a      	lsls	r2, r3, #4
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	801a      	strh	r2, [r3, #0]
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	801a      	strh	r2, [r3, #0]
 8002ec6:	e017      	b.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d113      	bne.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	4413      	add	r3, r2
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	011a      	lsls	r2, r3, #4
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	4413      	add	r3, r2
 8002eec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ef0:	623b      	str	r3, [r7, #32]
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4619      	mov	r1, r3
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f007 f9eb 	bl	800a2da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 82fc 	beq.w	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	82fb      	strh	r3, [r7, #22]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	441a      	add	r2, r3
 8002f3a:	8afb      	ldrh	r3, [r7, #22]
 8002f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	8013      	strh	r3, [r2, #0]
 8002f50:	e2da      	b.n	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d021      	beq.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	441a      	add	r2, r3
 8002f88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	f040 82ae 	bne.w	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fb4:	441a      	add	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fc2:	441a      	add	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d30b      	bcc.n	8002fec <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6a1a      	ldr	r2, [r3, #32]
 8002fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fe4:	1ad2      	subs	r2, r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	621a      	str	r2, [r3, #32]
 8002fea:	e017      	b.n	800301c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d108      	bne.n	8003006 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002ff4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ff8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003004:	e00a      	b.n	800301c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2200      	movs	r2, #0
 800301a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d165      	bne.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x382>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003038:	4413      	add	r3, r2
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	011a      	lsls	r2, r3, #4
 8003042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003044:	4413      	add	r3, r2
 8003046:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800304a:	63bb      	str	r3, [r7, #56]	; 0x38
 800304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003056:	b29a      	uxth	r2, r3
 8003058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305a:	801a      	strh	r2, [r3, #0]
 800305c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003060:	2b3e      	cmp	r3, #62	; 0x3e
 8003062:	d91d      	bls.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x332>
 8003064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	64bb      	str	r3, [r7, #72]	; 0x48
 800306c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <HAL_PCD_EP_DB_Transmit+0x310>
 8003078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800307a:	3b01      	subs	r3, #1
 800307c:	64bb      	str	r3, [r7, #72]	; 0x48
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29a      	uxth	r2, r3
 8003084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003086:	b29b      	uxth	r3, r3
 8003088:	029b      	lsls	r3, r3, #10
 800308a:	b29b      	uxth	r3, r3
 800308c:	4313      	orrs	r3, r2
 800308e:	b29b      	uxth	r3, r3
 8003090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003098:	b29a      	uxth	r2, r3
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	e044      	b.n	800312a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <HAL_PCD_EP_DB_Transmit+0x350>
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e035      	b.n	800312a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80030c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80030d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d4:	3301      	adds	r3, #1
 80030d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	029b      	lsls	r3, r3, #10
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	801a      	strh	r2, [r3, #0]
 80030ee:	e01c      	b.n	800312a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	785b      	ldrb	r3, [r3, #1]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d118      	bne.n	800312a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	647b      	str	r3, [r7, #68]	; 0x44
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310c:	4413      	add	r3, r2
 800310e:	647b      	str	r3, [r7, #68]	; 0x44
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	011a      	lsls	r2, r3, #4
 8003116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003118:	4413      	add	r3, r2
 800311a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800311e:	643b      	str	r3, [r7, #64]	; 0x40
 8003120:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003124:	b29a      	uxth	r2, r3
 8003126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003128:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	6959      	ldr	r1, [r3, #20]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	891a      	ldrh	r2, [r3, #8]
 8003136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800313a:	b29b      	uxth	r3, r3
 800313c:	f004 ff29 	bl	8007f92 <USB_WritePMA>
 8003140:	e1e2      	b.n	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800314a:	b29b      	uxth	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	3306      	adds	r3, #6
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800316a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003176:	429a      	cmp	r2, r3
 8003178:	d307      	bcc.n	800318a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003182:	1ad2      	subs	r2, r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	619a      	str	r2, [r3, #24]
 8003188:	e002      	b.n	8003190 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f040 80c0 	bne.w	800331a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	785b      	ldrb	r3, [r3, #1]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d126      	bne.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x482>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031b6:	4413      	add	r3, r2
 80031b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	011a      	lsls	r2, r3, #4
 80031c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031c2:	4413      	add	r3, r2
 80031c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80031ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031d8:	801a      	strh	r2, [r3, #0]
 80031da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	e01a      	b.n	8003226 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	785b      	ldrb	r3, [r3, #1]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d116      	bne.n	8003226 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	667b      	str	r3, [r7, #100]	; 0x64
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003206:	b29b      	uxth	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320c:	4413      	add	r3, r2
 800320e:	667b      	str	r3, [r7, #100]	; 0x64
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	011a      	lsls	r2, r3, #4
 8003216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003218:	4413      	add	r3, r2
 800321a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800321e:	663b      	str	r3, [r7, #96]	; 0x60
 8003220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003222:	2200      	movs	r2, #0
 8003224:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	677b      	str	r3, [r7, #116]	; 0x74
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d12b      	bne.n	800328c <HAL_PCD_EP_DB_Transmit+0x51e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003242:	b29b      	uxth	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003248:	4413      	add	r3, r2
 800324a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	011a      	lsls	r2, r3, #4
 8003252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003254:	4413      	add	r3, r2
 8003256:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800325a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800325e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800326a:	b29a      	uxth	r2, r3
 800326c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800327e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003282:	b29a      	uxth	r2, r3
 8003284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	e017      	b.n	80032bc <HAL_PCD_EP_DB_Transmit+0x54e>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	785b      	ldrb	r3, [r3, #1]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d113      	bne.n	80032bc <HAL_PCD_EP_DB_Transmit+0x54e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800329c:	b29b      	uxth	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a2:	4413      	add	r3, r2
 80032a4:	677b      	str	r3, [r7, #116]	; 0x74
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	011a      	lsls	r2, r3, #4
 80032ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ae:	4413      	add	r3, r2
 80032b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032b4:	673b      	str	r3, [r7, #112]	; 0x70
 80032b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032b8:	2200      	movs	r2, #0
 80032ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	4619      	mov	r1, r3
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f007 f809 	bl	800a2da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f040 811a 	bne.w	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	441a      	add	r2, r3
 8003300:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800330c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003314:	b29b      	uxth	r3, r3
 8003316:	8013      	strh	r3, [r2, #0]
 8003318:	e0f6      	b.n	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d121      	bne.n	8003368 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	441a      	add	r2, r3
 8003350:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003364:	b29b      	uxth	r3, r3
 8003366:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800336e:	2b01      	cmp	r3, #1
 8003370:	f040 80ca 	bne.w	8003508 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800337c:	441a      	add	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800338a:	441a      	add	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	6a1a      	ldr	r2, [r3, #32]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	429a      	cmp	r2, r3
 800339a:	d30b      	bcc.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ac:	1ad2      	subs	r2, r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	621a      	str	r2, [r3, #32]
 80033b2:	e017      	b.n	80033e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d108      	bne.n	80033ce <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80033bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033cc:	e00a      	b.n	80033e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2200      	movs	r2, #0
 80033da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	657b      	str	r3, [r7, #84]	; 0x54
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	785b      	ldrb	r3, [r3, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d165      	bne.n	80034be <HAL_PCD_EP_DB_Transmit+0x750>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003400:	b29b      	uxth	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003406:	4413      	add	r3, r2
 8003408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	011a      	lsls	r2, r3, #4
 8003410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003412:	4413      	add	r3, r2
 8003414:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003418:	65bb      	str	r3, [r7, #88]	; 0x58
 800341a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003424:	b29a      	uxth	r2, r3
 8003426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003428:	801a      	strh	r2, [r3, #0]
 800342a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800342e:	2b3e      	cmp	r3, #62	; 0x3e
 8003430:	d91d      	bls.n	800346e <HAL_PCD_EP_DB_Transmit+0x700>
 8003432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	66bb      	str	r3, [r7, #104]	; 0x68
 800343a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_PCD_EP_DB_Transmit+0x6de>
 8003446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003448:	3b01      	subs	r3, #1
 800344a:	66bb      	str	r3, [r7, #104]	; 0x68
 800344c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29a      	uxth	r2, r3
 8003452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003454:	b29b      	uxth	r3, r3
 8003456:	029b      	lsls	r3, r3, #10
 8003458:	b29b      	uxth	r3, r3
 800345a:	4313      	orrs	r3, r2
 800345c:	b29b      	uxth	r3, r3
 800345e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003466:	b29a      	uxth	r2, r3
 8003468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800346a:	801a      	strh	r2, [r3, #0]
 800346c:	e041      	b.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800346e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <HAL_PCD_EP_DB_Transmit+0x71e>
 8003476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003484:	b29a      	uxth	r2, r3
 8003486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	e032      	b.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800348c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	66bb      	str	r3, [r7, #104]	; 0x68
 8003494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_PCD_EP_DB_Transmit+0x738>
 80034a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a2:	3301      	adds	r3, #1
 80034a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	029b      	lsls	r3, r3, #10
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ba:	801a      	strh	r2, [r3, #0]
 80034bc:	e019      	b.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	785b      	ldrb	r3, [r3, #1]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d115      	bne.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d4:	4413      	add	r3, r2
 80034d6:	657b      	str	r3, [r7, #84]	; 0x54
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	011a      	lsls	r2, r3, #4
 80034de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e0:	4413      	add	r3, r2
 80034e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034e6:	653b      	str	r3, [r7, #80]	; 0x50
 80034e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	6959      	ldr	r1, [r3, #20]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	895a      	ldrh	r2, [r3, #10]
 80034fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003502:	b29b      	uxth	r3, r3
 8003504:	f004 fd45 	bl	8007f92 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003522:	82bb      	strh	r3, [r7, #20]
 8003524:	8abb      	ldrh	r3, [r7, #20]
 8003526:	f083 0310 	eor.w	r3, r3, #16
 800352a:	82bb      	strh	r3, [r7, #20]
 800352c:	8abb      	ldrh	r3, [r7, #20]
 800352e:	f083 0320 	eor.w	r3, r3, #32
 8003532:	82bb      	strh	r3, [r7, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	441a      	add	r2, r3
 8003542:	8abb      	ldrh	r3, [r7, #20]
 8003544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800354c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003554:	b29b      	uxth	r3, r3
 8003556:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3790      	adds	r7, #144	; 0x90
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003562:	b480      	push	{r7}
 8003564:	b087      	sub	sp, #28
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	817b      	strh	r3, [r7, #10]
 8003570:	4613      	mov	r3, r2
 8003572:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003574:	897b      	ldrh	r3, [r7, #10]
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003580:	897b      	ldrh	r3, [r7, #10]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e009      	b.n	80035ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003598:	897a      	ldrh	r2, [r7, #10]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4413      	add	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035ac:	893b      	ldrh	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2200      	movs	r2, #0
 80035b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	80da      	strh	r2, [r3, #6]
 80035c0:	e00b      	b.n	80035da <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2201      	movs	r2, #1
 80035c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e272      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8087 	beq.w	8003716 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003608:	4b92      	ldr	r3, [pc, #584]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b04      	cmp	r3, #4
 8003612:	d00c      	beq.n	800362e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003614:	4b8f      	ldr	r3, [pc, #572]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b08      	cmp	r3, #8
 800361e:	d112      	bne.n	8003646 <HAL_RCC_OscConfig+0x5e>
 8003620:	4b8c      	ldr	r3, [pc, #560]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362c:	d10b      	bne.n	8003646 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362e:	4b89      	ldr	r3, [pc, #548]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d06c      	beq.n	8003714 <HAL_RCC_OscConfig+0x12c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d168      	bne.n	8003714 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e24c      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x76>
 8003650:	4b80      	ldr	r3, [pc, #512]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a7f      	ldr	r2, [pc, #508]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	e02e      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x98>
 8003666:	4b7b      	ldr	r3, [pc, #492]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a7a      	ldr	r2, [pc, #488]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800366c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b78      	ldr	r3, [pc, #480]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a77      	ldr	r2, [pc, #476]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e01d      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0xbc>
 800368a:	4b72      	ldr	r3, [pc, #456]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a71      	ldr	r2, [pc, #452]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b6f      	ldr	r3, [pc, #444]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a6e      	ldr	r2, [pc, #440]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 80036a4:	4b6b      	ldr	r3, [pc, #428]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a6a      	ldr	r2, [pc, #424]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b68      	ldr	r3, [pc, #416]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a67      	ldr	r2, [pc, #412]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fd fc98 	bl	8000ff8 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fd fc94 	bl	8000ff8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e200      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b5d      	ldr	r3, [pc, #372]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0xe4>
 80036ea:	e014      	b.n	8003716 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fd fc84 	bl	8000ff8 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fd fc80 	bl	8000ff8 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e1ec      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x10c>
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d063      	beq.n	80037ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003722:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800372e:	4b49      	ldr	r3, [pc, #292]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b08      	cmp	r3, #8
 8003738:	d11c      	bne.n	8003774 <HAL_RCC_OscConfig+0x18c>
 800373a:	4b46      	ldr	r3, [pc, #280]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	4b43      	ldr	r3, [pc, #268]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_RCC_OscConfig+0x176>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e1c0      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375e:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4939      	ldr	r1, [pc, #228]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	e03a      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d020      	beq.n	80037be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800377c:	4b36      	ldr	r3, [pc, #216]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fd fc39 	bl	8000ff8 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378a:	f7fd fc35 	bl	8000ff8 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e1a1      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379c:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a8:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4927      	ldr	r1, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
 80037bc:	e015      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037be:	4b26      	ldr	r3, [pc, #152]	; (8003858 <HAL_RCC_OscConfig+0x270>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fd fc18 	bl	8000ff8 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037cc:	f7fd fc14 	bl	8000ff8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e180      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03a      	beq.n	800386c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d019      	beq.n	8003832 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037fe:	4b17      	ldr	r3, [pc, #92]	; (800385c <HAL_RCC_OscConfig+0x274>)
 8003800:	2201      	movs	r2, #1
 8003802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003804:	f7fd fbf8 	bl	8000ff8 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380c:	f7fd fbf4 	bl	8000ff8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e160      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800382a:	2001      	movs	r0, #1
 800382c:	f000 fad0 	bl	8003dd0 <RCC_Delay>
 8003830:	e01c      	b.n	800386c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_RCC_OscConfig+0x274>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003838:	f7fd fbde 	bl	8000ff8 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800383e:	e00f      	b.n	8003860 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003840:	f7fd fbda 	bl	8000ff8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d908      	bls.n	8003860 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e146      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	42420000 	.word	0x42420000
 800385c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003860:	4b92      	ldr	r3, [pc, #584]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e9      	bne.n	8003840 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a6 	beq.w	80039c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387e:	4b8b      	ldr	r3, [pc, #556]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	4b88      	ldr	r3, [pc, #544]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4a87      	ldr	r2, [pc, #540]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003894:	61d3      	str	r3, [r2, #28]
 8003896:	4b85      	ldr	r3, [pc, #532]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a6:	4b82      	ldr	r3, [pc, #520]	; (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d118      	bne.n	80038e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b2:	4b7f      	ldr	r3, [pc, #508]	; (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7e      	ldr	r2, [pc, #504]	; (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038be:	f7fd fb9b 	bl	8000ff8 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c6:	f7fd fb97 	bl	8000ff8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b64      	cmp	r3, #100	; 0x64
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e103      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d8:	4b75      	ldr	r3, [pc, #468]	; (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x312>
 80038ec:	4b6f      	ldr	r3, [pc, #444]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	4a6e      	ldr	r2, [pc, #440]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6213      	str	r3, [r2, #32]
 80038f8:	e02d      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x334>
 8003902:	4b6a      	ldr	r3, [pc, #424]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4a69      	ldr	r2, [pc, #420]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6213      	str	r3, [r2, #32]
 800390e:	4b67      	ldr	r3, [pc, #412]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4a66      	ldr	r2, [pc, #408]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	6213      	str	r3, [r2, #32]
 800391a:	e01c      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b05      	cmp	r3, #5
 8003922:	d10c      	bne.n	800393e <HAL_RCC_OscConfig+0x356>
 8003924:	4b61      	ldr	r3, [pc, #388]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4a60      	ldr	r2, [pc, #384]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6213      	str	r3, [r2, #32]
 8003930:	4b5e      	ldr	r3, [pc, #376]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4a5d      	ldr	r2, [pc, #372]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6213      	str	r3, [r2, #32]
 800393c:	e00b      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 800393e:	4b5b      	ldr	r3, [pc, #364]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4a5a      	ldr	r2, [pc, #360]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6213      	str	r3, [r2, #32]
 800394a:	4b58      	ldr	r3, [pc, #352]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4a57      	ldr	r2, [pc, #348]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d015      	beq.n	800398a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395e:	f7fd fb4b 	bl	8000ff8 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fd fb47 	bl	8000ff8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e0b1      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ee      	beq.n	8003966 <HAL_RCC_OscConfig+0x37e>
 8003988:	e014      	b.n	80039b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fd fb35 	bl	8000ff8 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003992:	f7fd fb31 	bl	8000ff8 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e09b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	4b40      	ldr	r3, [pc, #256]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	4b3c      	ldr	r3, [pc, #240]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4a3b      	ldr	r2, [pc, #236]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8087 	beq.w	8003ade <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d0:	4b36      	ldr	r3, [pc, #216]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d061      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d146      	bne.n	8003a72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e4:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fd fb05 	bl	8000ff8 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fd fb01 	bl	8000ff8 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e06d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a04:	4b29      	ldr	r3, [pc, #164]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a18:	d108      	bne.n	8003a2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4921      	ldr	r1, [pc, #132]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a19      	ldr	r1, [r3, #32]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	491b      	ldr	r1, [pc, #108]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a44:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <HAL_RCC_OscConfig+0x4cc>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fd fad5 	bl	8000ff8 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fd fad1 	bl	8000ff8 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e03d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x46a>
 8003a70:	e035      	b.n	8003ade <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a72:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <HAL_RCC_OscConfig+0x4cc>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fd fabe 	bl	8000ff8 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fd faba 	bl	8000ff8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e026      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x498>
 8003a9e:	e01e      	b.n	8003ade <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d107      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e019      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40007000 	.word	0x40007000
 8003ab4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_OscConfig+0x500>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0d0      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b6a      	ldr	r3, [pc, #424]	; (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d910      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b67      	ldr	r3, [pc, #412]	; (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 0207 	bic.w	r2, r3, #7
 8003b16:	4965      	ldr	r1, [pc, #404]	; (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b63      	ldr	r3, [pc, #396]	; (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0b8      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a52      	ldr	r2, [pc, #328]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	494d      	ldr	r1, [pc, #308]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d040      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d115      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e073      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06b      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bca:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f023 0203 	bic.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4936      	ldr	r1, [pc, #216]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bdc:	f7fd fa0c 	bl	8000ff8 <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be4:	f7fd fa08 	bl	8000ff8 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e053      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 020c 	and.w	r2, r3, #12
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d1eb      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b27      	ldr	r3, [pc, #156]	; (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d210      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 0207 	bic.w	r2, r3, #7
 8003c22:	4922      	ldr	r1, [pc, #136]	; (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e032      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c7a:	f000 f821 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	490a      	ldr	r1, [pc, #40]	; (8003cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	5ccb      	ldrb	r3, [r1, r3]
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1cc>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_ClockConfig+0x1d0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd f96a 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40022000 	.word	0x40022000
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	0800b714 	.word	0x0800b714
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	20000004 	.word	0x20000004

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d002      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x30>
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x36>
 8003cee:	e027      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cf2:	613b      	str	r3, [r7, #16]
      break;
 8003cf4:	e027      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	0c9b      	lsrs	r3, r3, #18
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d00:	5cd3      	ldrb	r3, [r2, r3]
 8003d02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d010      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	0c5b      	lsrs	r3, r3, #17
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	4a11      	ldr	r2, [pc, #68]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a0d      	ldr	r2, [pc, #52]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d22:	fb03 f202 	mul.w	r2, r3, r2
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e004      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a0c      	ldr	r2, [pc, #48]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d34:	fb02 f303 	mul.w	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	613b      	str	r3, [r7, #16]
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003d42:	613b      	str	r3, [r7, #16]
      break;
 8003d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d46:	693b      	ldr	r3, [r7, #16]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	0800b72c 	.word	0x0800b72c
 8003d60:	0800b73c 	.word	0x0800b73c
 8003d64:	003d0900 	.word	0x003d0900
 8003d68:	007a1200 	.word	0x007a1200

08003d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d70:	4b02      	ldr	r3, [pc, #8]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	20000000 	.word	0x20000000

08003d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d84:	f7ff fff2 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4903      	ldr	r1, [pc, #12]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000
 8003da4:	0800b724 	.word	0x0800b724

08003da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dac:	f7ff ffde 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	0adb      	lsrs	r3, r3, #11
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4903      	ldr	r1, [pc, #12]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	0800b724 	.word	0x0800b724

08003dd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <RCC_Delay+0x34>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <RCC_Delay+0x38>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0a5b      	lsrs	r3, r3, #9
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003dec:	bf00      	nop
  }
  while (Delay --);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1e5a      	subs	r2, r3, #1
 8003df2:	60fa      	str	r2, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f9      	bne.n	8003dec <RCC_Delay+0x1c>
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr
 8003e04:	20000000 	.word	0x20000000
 8003e08:	10624dd3 	.word	0x10624dd3

08003e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d07d      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2c:	4b4f      	ldr	r3, [pc, #316]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10d      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e38:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	4a4b      	ldr	r2, [pc, #300]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e42:	61d3      	str	r3, [r2, #28]
 8003e44:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e50:	2301      	movs	r3, #1
 8003e52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d118      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e60:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a42      	ldr	r2, [pc, #264]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6c:	f7fd f8c4 	bl	8000ff8 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	e008      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e74:	f7fd f8c0 	bl	8000ff8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e06d      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	4b3a      	ldr	r3, [pc, #232]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e92:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d02e      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d027      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec0:	4b2c      	ldr	r3, [pc, #176]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ec6:	4a29      	ldr	r2, [pc, #164]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d014      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fd f88f 	bl	8000ff8 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fd f88b 	bl	8000ff8 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e036      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ee      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f00:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4917      	ldr	r1, [pc, #92]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d105      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f18:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f30:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	490b      	ldr	r1, [pc, #44]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f4e:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4904      	ldr	r1, [pc, #16]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40007000 	.word	0x40007000
 8003f74:	42420440 	.word	0x42420440

08003f78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e041      	b.n	800400e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fc fd40 	bl	8000a24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f000 fb84 	bl	80046c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_TIM_PWM_Start+0x24>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	bf14      	ite	ne
 8004034:	2301      	movne	r3, #1
 8004036:	2300      	moveq	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e022      	b.n	8004082 <HAL_TIM_PWM_Start+0x6a>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d109      	bne.n	8004056 <HAL_TIM_PWM_Start+0x3e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	e015      	b.n	8004082 <HAL_TIM_PWM_Start+0x6a>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d109      	bne.n	8004070 <HAL_TIM_PWM_Start+0x58>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e008      	b.n	8004082 <HAL_TIM_PWM_Start+0x6a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	bf14      	ite	ne
 800407c:	2301      	movne	r3, #1
 800407e:	2300      	moveq	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e05e      	b.n	8004148 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <HAL_TIM_PWM_Start+0x82>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004098:	e013      	b.n	80040c2 <HAL_TIM_PWM_Start+0xaa>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d104      	bne.n	80040aa <HAL_TIM_PWM_Start+0x92>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a8:	e00b      	b.n	80040c2 <HAL_TIM_PWM_Start+0xaa>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_PWM_Start+0xa2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b8:	e003      	b.n	80040c2 <HAL_TIM_PWM_Start+0xaa>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2201      	movs	r2, #1
 80040c8:	6839      	ldr	r1, [r7, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fce4 	bl	8004a98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <HAL_TIM_PWM_Start+0x138>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d107      	bne.n	80040ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a18      	ldr	r2, [pc, #96]	; (8004150 <HAL_TIM_PWM_Start+0x138>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00e      	beq.n	8004112 <HAL_TIM_PWM_Start+0xfa>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fc:	d009      	beq.n	8004112 <HAL_TIM_PWM_Start+0xfa>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a14      	ldr	r2, [pc, #80]	; (8004154 <HAL_TIM_PWM_Start+0x13c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d004      	beq.n	8004112 <HAL_TIM_PWM_Start+0xfa>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a12      	ldr	r2, [pc, #72]	; (8004158 <HAL_TIM_PWM_Start+0x140>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d111      	bne.n	8004136 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b06      	cmp	r3, #6
 8004122:	d010      	beq.n	8004146 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	e007      	b.n	8004146 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800

0800415c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b0c      	cmp	r3, #12
 800416e:	d855      	bhi.n	800421c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	080041ad 	.word	0x080041ad
 800417c:	0800421d 	.word	0x0800421d
 8004180:	0800421d 	.word	0x0800421d
 8004184:	0800421d 	.word	0x0800421d
 8004188:	080041c9 	.word	0x080041c9
 800418c:	0800421d 	.word	0x0800421d
 8004190:	0800421d 	.word	0x0800421d
 8004194:	0800421d 	.word	0x0800421d
 8004198:	080041e5 	.word	0x080041e5
 800419c:	0800421d 	.word	0x0800421d
 80041a0:	0800421d 	.word	0x0800421d
 80041a4:	0800421d 	.word	0x0800421d
 80041a8:	08004201 	.word	0x08004201
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fd f94b 	bl	800145c <HAL_DMA_Abort_IT>
      break;
 80041c6:	e02c      	b.n	8004222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fd f93d 	bl	800145c <HAL_DMA_Abort_IT>
      break;
 80041e2:	e01e      	b.n	8004222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fd f92f 	bl	800145c <HAL_DMA_Abort_IT>
      break;
 80041fe:	e010      	b.n	8004222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800420e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	4618      	mov	r0, r3
 8004216:	f7fd f921 	bl	800145c <HAL_DMA_Abort_IT>
      break;
 800421a:	e002      	b.n	8004222 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      break;
 8004220:	bf00      	nop
  }

  if (status == HAL_OK)
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d157      	bne.n	80042d8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2200      	movs	r2, #0
 800422e:	6839      	ldr	r1, [r7, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fc31 	bl	8004a98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2a      	ldr	r2, [pc, #168]	; (80042e4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d117      	bne.n	8004270 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6a1a      	ldr	r2, [r3, #32]
 8004246:	f241 1311 	movw	r3, #4369	; 0x1111
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10f      	bne.n	8004270 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	f240 4344 	movw	r3, #1092	; 0x444
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d107      	bne.n	8004270 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800426e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	f241 1311 	movw	r3, #4369	; 0x1111
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10f      	bne.n	80042a0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a1a      	ldr	r2, [r3, #32]
 8004286:	f240 4344 	movw	r3, #1092	; 0x444
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d104      	bne.n	80042b0 <HAL_TIM_PWM_Stop_DMA+0x154>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ae:	e013      	b.n	80042d8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d104      	bne.n	80042c0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042be:	e00b      	b.n	80042d8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d104      	bne.n	80042d0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ce:	e003      	b.n	80042d8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40012c00 	.word	0x40012c00

080042e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d122      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b02      	cmp	r3, #2
 800430a:	d11b      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0202 	mvn.w	r2, #2
 8004314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f9b8 	bl	80046a0 <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f9ab 	bl	800468e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fc fb07 	bl	800094c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0204 	mvn.w	r2, #4
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f98e 	bl	80046a0 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f981 	bl	800468e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fc fadd 	bl	800094c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0208 	mvn.w	r2, #8
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2204      	movs	r2, #4
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f964 	bl	80046a0 <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f957 	bl	800468e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7fc fab3 	bl	800094c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d122      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b10      	cmp	r3, #16
 8004406:	d11b      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0210 	mvn.w	r2, #16
 8004410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2208      	movs	r2, #8
 8004416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f93a 	bl	80046a0 <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f92d 	bl	800468e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7fc fa89 	bl	800094c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10e      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0201 	mvn.w	r2, #1
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f908 	bl	800467c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b80      	cmp	r3, #128	; 0x80
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fb8b 	bl	8004bae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d10e      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d107      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f8f7 	bl	80046b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d10e      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d107      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0220 	mvn.w	r2, #32
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fb56 	bl	8004b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004512:	2302      	movs	r3, #2
 8004514:	e0ae      	b.n	8004674 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	f200 809f 	bhi.w	8004664 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004561 	.word	0x08004561
 8004530:	08004665 	.word	0x08004665
 8004534:	08004665 	.word	0x08004665
 8004538:	08004665 	.word	0x08004665
 800453c:	080045a1 	.word	0x080045a1
 8004540:	08004665 	.word	0x08004665
 8004544:	08004665 	.word	0x08004665
 8004548:	08004665 	.word	0x08004665
 800454c:	080045e3 	.word	0x080045e3
 8004550:	08004665 	.word	0x08004665
 8004554:	08004665 	.word	0x08004665
 8004558:	08004665 	.word	0x08004665
 800455c:	08004623 	.word	0x08004623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f90e 	bl	8004788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0204 	bic.w	r2, r2, #4
 800458a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6999      	ldr	r1, [r3, #24]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	619a      	str	r2, [r3, #24]
      break;
 800459e:	e064      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f954 	bl	8004854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6999      	ldr	r1, [r3, #24]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	619a      	str	r2, [r3, #24]
      break;
 80045e0:	e043      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f99d 	bl	8004928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0208 	orr.w	r2, r2, #8
 80045fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0204 	bic.w	r2, r2, #4
 800460c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69d9      	ldr	r1, [r3, #28]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	61da      	str	r2, [r3, #28]
      break;
 8004620:	e023      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 f9e7 	bl	80049fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69d9      	ldr	r1, [r3, #28]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	021a      	lsls	r2, r3, #8
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	61da      	str	r2, [r3, #28]
      break;
 8004662:	e002      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	75fb      	strb	r3, [r7, #23]
      break;
 8004668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a29      	ldr	r2, [pc, #164]	; (800477c <TIM_Base_SetConfig+0xb8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00b      	beq.n	80046f4 <TIM_Base_SetConfig+0x30>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e2:	d007      	beq.n	80046f4 <TIM_Base_SetConfig+0x30>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a26      	ldr	r2, [pc, #152]	; (8004780 <TIM_Base_SetConfig+0xbc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_Base_SetConfig+0x30>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a25      	ldr	r2, [pc, #148]	; (8004784 <TIM_Base_SetConfig+0xc0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d108      	bne.n	8004706 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1c      	ldr	r2, [pc, #112]	; (800477c <TIM_Base_SetConfig+0xb8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a19      	ldr	r2, [pc, #100]	; (8004780 <TIM_Base_SetConfig+0xbc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a18      	ldr	r2, [pc, #96]	; (8004784 <TIM_Base_SetConfig+0xc0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a07      	ldr	r2, [pc, #28]	; (800477c <TIM_Base_SetConfig+0xb8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d103      	bne.n	800476c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	615a      	str	r2, [r3, #20]
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800

08004788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f023 0201 	bic.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 0302 	bic.w	r3, r3, #2
 80047d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <TIM_OC1_SetConfig+0xc8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d10c      	bne.n	80047fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0308 	bic.w	r3, r3, #8
 80047ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f023 0304 	bic.w	r3, r3, #4
 80047fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <TIM_OC1_SetConfig+0xc8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d111      	bne.n	800482a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40012c00 	.word	0x40012c00

08004854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f023 0210 	bic.w	r2, r3, #16
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0320 	bic.w	r3, r3, #32
 800489e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <TIM_OC2_SetConfig+0xd0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10d      	bne.n	80048d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a14      	ldr	r2, [pc, #80]	; (8004924 <TIM_OC2_SetConfig+0xd0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d113      	bne.n	8004900 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00

08004928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <TIM_OC3_SetConfig+0xd0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d10d      	bne.n	80049a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800498c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a14      	ldr	r2, [pc, #80]	; (80049f8 <TIM_OC3_SetConfig+0xd0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d113      	bne.n	80049d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00

080049fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	031b      	lsls	r3, r3, #12
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a0f      	ldr	r2, [pc, #60]	; (8004a94 <TIM_OC4_SetConfig+0x98>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d109      	bne.n	8004a70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	019b      	lsls	r3, r3, #6
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	621a      	str	r2, [r3, #32]
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	40012c00 	.word	0x40012c00

08004a98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	2201      	movs	r2, #1
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a1a      	ldr	r2, [r3, #32]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	401a      	ands	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e046      	b.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d009      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10c      	bne.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800

08004b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e042      	b.n	8004c58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fb fff0 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2224      	movs	r2, #36	; 0x24
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f001 f81b 	bl	8005c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	; 0x28
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d16d      	bne.n	8004d5c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_UART_Transmit+0x2c>
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e066      	b.n	8004d5e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2221      	movs	r2, #33	; 0x21
 8004c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9e:	f7fc f9ab 	bl	8000ff8 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	88fa      	ldrh	r2, [r7, #6]
 8004cae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb8:	d108      	bne.n	8004ccc <HAL_UART_Transmit+0x6c>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d104      	bne.n	8004ccc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	e003      	b.n	8004cd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cd4:	e02a      	b.n	8004d2c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2180      	movs	r1, #128	; 0x80
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 fce3 	bl	80056ac <UART_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e036      	b.n	8004d5e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10b      	bne.n	8004d0e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	3302      	adds	r3, #2
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	e007      	b.n	8004d1e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	781a      	ldrb	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1cf      	bne.n	8004cd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2140      	movs	r1, #64	; 0x40
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fcb3 	bl	80056ac <UART_WaitOnFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e006      	b.n	8004d5e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e000      	b.n	8004d5e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004d5c:	2302      	movs	r3, #2
  }
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b08a      	sub	sp, #40	; 0x28
 8004d6a:	af02      	add	r7, sp, #8
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d17c      	bne.n	8004e80 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_UART_Receive+0x2c>
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e075      	b.n	8004e82 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2222      	movs	r2, #34	; 0x22
 8004da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004daa:	f7fc f925 	bl	8000ff8 <HAL_GetTick>
 8004dae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	88fa      	ldrh	r2, [r7, #6]
 8004db4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc4:	d108      	bne.n	8004dd8 <HAL_UART_Receive+0x72>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	e003      	b.n	8004de0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004de0:	e043      	b.n	8004e6a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2200      	movs	r2, #0
 8004dea:	2120      	movs	r1, #32
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fc5d 	bl	80056ac <UART_WaitOnFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e042      	b.n	8004e82 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10c      	bne.n	8004e1c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	3302      	adds	r3, #2
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	e01f      	b.n	8004e5c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e24:	d007      	beq.n	8004e36 <HAL_UART_Receive+0xd0>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <HAL_UART_Receive+0xde>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	e008      	b.n	8004e56 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1b6      	bne.n	8004de2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e000      	b.n	8004e82 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e80:	2302      	movs	r3, #2
  }
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b08c      	sub	sp, #48	; 0x30
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	4613      	mov	r3, r2
 8004e96:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d14a      	bne.n	8004f3a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e043      	b.n	8004f3c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fc5e 	bl	8005788 <UART_Start_Receive_DMA>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d12c      	bne.n	8004f34 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d125      	bne.n	8004f2e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	617b      	str	r3, [r7, #20]
   return(result);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f043 0310 	orr.w	r3, r3, #16
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f18:	627a      	str	r2, [r7, #36]	; 0x24
 8004f1a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6a39      	ldr	r1, [r7, #32]
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e5      	bne.n	8004ef8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004f2c:	e002      	b.n	8004f34 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004f34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f38:	e000      	b.n	8004f3c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3730      	adds	r7, #48	; 0x30
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b0ba      	sub	sp, #232	; 0xe8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10f      	bne.n	8004faa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_UART_IRQHandler+0x66>
 8004f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fd8e 	bl	8005ac4 <UART_Receive_IT>
      return;
 8004fa8:	e25b      	b.n	8005462 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80de 	beq.w	8005170 <HAL_UART_IRQHandler+0x22c>
 8004fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80d1 	beq.w	8005170 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <HAL_UART_IRQHandler+0xae>
 8004fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	f043 0201 	orr.w	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <HAL_UART_IRQHandler+0xd2>
 8004ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	f043 0202 	orr.w	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <HAL_UART_IRQHandler+0xf6>
 8005022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	f043 0204 	orr.w	r2, r3, #4
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800503a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d011      	beq.n	800506a <HAL_UART_IRQHandler+0x126>
 8005046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b00      	cmp	r3, #0
 8005050:	d105      	bne.n	800505e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f043 0208 	orr.w	r2, r3, #8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 81f2 	beq.w	8005458 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <HAL_UART_IRQHandler+0x14e>
 8005080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fd19 	bl	8005ac4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <HAL_UART_IRQHandler+0x17a>
 80050b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d04f      	beq.n	800515e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fc23 	bl	800590a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d041      	beq.n	8005156 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3314      	adds	r3, #20
 80050d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3314      	adds	r3, #20
 80050fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800510a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1d9      	bne.n	80050d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d013      	beq.n	800514e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	4a7e      	ldr	r2, [pc, #504]	; (8005324 <HAL_UART_IRQHandler+0x3e0>)
 800512c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005132:	4618      	mov	r0, r3
 8005134:	f7fc f992 	bl	800145c <HAL_DMA_Abort_IT>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d016      	beq.n	800516c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005148:	4610      	mov	r0, r2
 800514a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	e00e      	b.n	800516c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f9a5 	bl	800549e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005154:	e00a      	b.n	800516c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f9a1 	bl	800549e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515c:	e006      	b.n	800516c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f99d 	bl	800549e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800516a:	e175      	b.n	8005458 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	bf00      	nop
    return;
 800516e:	e173      	b.n	8005458 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	2b01      	cmp	r3, #1
 8005176:	f040 814f 	bne.w	8005418 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800517a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8148 	beq.w	8005418 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8141 	beq.w	8005418 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80b6 	beq.w	8005328 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8145 	beq.w	800545c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051da:	429a      	cmp	r2, r3
 80051dc:	f080 813e 	bcs.w	800545c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	f000 8088 	beq.w	8005304 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	330c      	adds	r3, #12
 80051fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800520a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800520e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005212:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	330c      	adds	r3, #12
 800521c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005220:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005224:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800522c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005238:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1d9      	bne.n	80051f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3314      	adds	r3, #20
 8005246:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3314      	adds	r3, #20
 8005260:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005264:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005268:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800526c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e1      	bne.n	8005240 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3314      	adds	r3, #20
 8005282:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800528c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800528e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3314      	adds	r3, #20
 800529c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e3      	bne.n	800527c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d4:	f023 0310 	bic.w	r3, r3, #16
 80052d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	330c      	adds	r3, #12
 80052e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80052e8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e3      	bne.n	80052c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fc f870 	bl	80013e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005312:	b29b      	uxth	r3, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	b29b      	uxth	r3, r3
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fb fac8 	bl	80008b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005320:	e09c      	b.n	800545c <HAL_UART_IRQHandler+0x518>
 8005322:	bf00      	nop
 8005324:	080059cf 	.word	0x080059cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005330:	b29b      	uxth	r3, r3
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 808e 	beq.w	8005460 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8089 	beq.w	8005460 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	330c      	adds	r3, #12
 8005354:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005364:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	330c      	adds	r3, #12
 800536e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005372:	647a      	str	r2, [r7, #68]	; 0x44
 8005374:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e3      	bne.n	800534e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3314      	adds	r3, #20
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	623b      	str	r3, [r7, #32]
   return(result);
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3314      	adds	r3, #20
 80053a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053aa:	633a      	str	r2, [r7, #48]	; 0x30
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e3      	bne.n	8005386 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	60fb      	str	r3, [r7, #12]
   return(result);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0310 	bic.w	r3, r3, #16
 80053e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053f0:	61fa      	str	r2, [r7, #28]
 80053f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	69b9      	ldr	r1, [r7, #24]
 80053f6:	69fa      	ldr	r2, [r7, #28]
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	617b      	str	r3, [r7, #20]
   return(result);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e3      	bne.n	80053cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800540a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fb fa4d 	bl	80008b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005416:	e023      	b.n	8005460 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <HAL_UART_IRQHandler+0x4f4>
 8005424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fae0 	bl	80059f6 <UART_Transmit_IT>
    return;
 8005436:	e014      	b.n	8005462 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00e      	beq.n	8005462 <HAL_UART_IRQHandler+0x51e>
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fb1f 	bl	8005a94 <UART_EndTransmit_IT>
    return;
 8005456:	e004      	b.n	8005462 <HAL_UART_IRQHandler+0x51e>
    return;
 8005458:	bf00      	nop
 800545a:	e002      	b.n	8005462 <HAL_UART_IRQHandler+0x51e>
      return;
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <HAL_UART_IRQHandler+0x51e>
      return;
 8005460:	bf00      	nop
  }
}
 8005462:	37e8      	adds	r7, #232	; 0xe8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr

0800548c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr

080054b0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b09c      	sub	sp, #112	; 0x70
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d172      	bne.n	80055b2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80054cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ce:	2200      	movs	r2, #0
 80054d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80054ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80054f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e5      	bne.n	80054d2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3314      	adds	r3, #20
 800550c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	667b      	str	r3, [r7, #100]	; 0x64
 800551e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3314      	adds	r3, #20
 8005524:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005526:	647a      	str	r2, [r7, #68]	; 0x44
 8005528:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800552c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e5      	bne.n	8005506 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800553a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3314      	adds	r3, #20
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	623b      	str	r3, [r7, #32]
   return(result);
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005550:	663b      	str	r3, [r7, #96]	; 0x60
 8005552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3314      	adds	r3, #20
 8005558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800555a:	633a      	str	r2, [r7, #48]	; 0x30
 800555c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e5      	bne.n	800553a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005570:	2220      	movs	r2, #32
 8005572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	2b01      	cmp	r3, #1
 800557c:	d119      	bne.n	80055b2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	60fb      	str	r3, [r7, #12]
   return(result);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f023 0310 	bic.w	r3, r3, #16
 8005594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	330c      	adds	r3, #12
 800559c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800559e:	61fa      	str	r2, [r7, #28]
 80055a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	69b9      	ldr	r1, [r7, #24]
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	617b      	str	r3, [r7, #20]
   return(result);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e5      	bne.n	800557e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b4:	2200      	movs	r2, #0
 80055b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d106      	bne.n	80055ce <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055c4:	4619      	mov	r1, r3
 80055c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80055c8:	f7fb f972 	bl	80008b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055cc:	e002      	b.n	80055d4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80055ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80055d0:	f7ff ff53 	bl	800547a <HAL_UART_RxCpltCallback>
}
 80055d4:	bf00      	nop
 80055d6:	3770      	adds	r7, #112	; 0x70
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d108      	bne.n	800560a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055fc:	085b      	lsrs	r3, r3, #1
 80055fe:	b29b      	uxth	r3, r3
 8005600:	4619      	mov	r1, r3
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7fb f954 	bl	80008b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005608:	e002      	b.n	8005610 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff ff3e 	bl	800548c <HAL_UART_RxHalfCpltCallback>
}
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf14      	ite	ne
 8005638:	2301      	movne	r3, #1
 800563a:	2300      	moveq	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b21      	cmp	r3, #33	; 0x21
 800564a:	d108      	bne.n	800565e <UART_DMAError+0x46>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005658:	68b8      	ldr	r0, [r7, #8]
 800565a:	f000 f92f 	bl	80058bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf14      	ite	ne
 800566c:	2301      	movne	r3, #1
 800566e:	2300      	moveq	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b22      	cmp	r3, #34	; 0x22
 800567e:	d108      	bne.n	8005692 <UART_DMAError+0x7a>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2200      	movs	r2, #0
 800568a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800568c:	68b8      	ldr	r0, [r7, #8]
 800568e:	f000 f93c 	bl	800590a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	f043 0210 	orr.w	r2, r3, #16
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800569e:	68b8      	ldr	r0, [r7, #8]
 80056a0:	f7ff fefd 	bl	800549e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056a4:	bf00      	nop
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b090      	sub	sp, #64	; 0x40
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	4613      	mov	r3, r2
 80056ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056bc:	e050      	b.n	8005760 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d04c      	beq.n	8005760 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d007      	beq.n	80056dc <UART_WaitOnFlagUntilTimeout+0x30>
 80056cc:	f7fb fc94 	bl	8000ff8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d8:	429a      	cmp	r2, r3
 80056da:	d241      	bcs.n	8005760 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	330c      	adds	r3, #12
 80056fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056fc:	637a      	str	r2, [r7, #52]	; 0x34
 80056fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e5      	bne.n	80056dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3314      	adds	r3, #20
 8005716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	613b      	str	r3, [r7, #16]
   return(result);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	63bb      	str	r3, [r7, #56]	; 0x38
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3314      	adds	r3, #20
 800572e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005730:	623a      	str	r2, [r7, #32]
 8005732:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	69f9      	ldr	r1, [r7, #28]
 8005736:	6a3a      	ldr	r2, [r7, #32]
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	61bb      	str	r3, [r7, #24]
   return(result);
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e5      	bne.n	8005710 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e00f      	b.n	8005780 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4013      	ands	r3, r2
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	429a      	cmp	r2, r3
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	429a      	cmp	r2, r3
 800577c:	d09f      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3740      	adds	r7, #64	; 0x40
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b098      	sub	sp, #96	; 0x60
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2222      	movs	r2, #34	; 0x22
 80057ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	4a3e      	ldr	r2, [pc, #248]	; (80058b0 <UART_Start_Receive_DMA+0x128>)
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	4a3d      	ldr	r2, [pc, #244]	; (80058b4 <UART_Start_Receive_DMA+0x12c>)
 80057be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c4:	4a3c      	ldr	r2, [pc, #240]	; (80058b8 <UART_Start_Receive_DMA+0x130>)
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	2200      	movs	r2, #0
 80057ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80057d0:	f107 0308 	add.w	r3, r7, #8
 80057d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3304      	adds	r3, #4
 80057e0:	4619      	mov	r1, r3
 80057e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	f7fb fd9c 	bl	8001324 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80057ec:	2300      	movs	r3, #0
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d019      	beq.n	800583e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	330c      	adds	r3, #12
 8005810:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800581a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005820:	65bb      	str	r3, [r7, #88]	; 0x58
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	330c      	adds	r3, #12
 8005828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800582a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800582c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e5      	bne.n	800580a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3314      	adds	r3, #20
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	657b      	str	r3, [r7, #84]	; 0x54
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3314      	adds	r3, #20
 800585c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800585e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e5      	bne.n	800583e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3314      	adds	r3, #20
 8005878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	617b      	str	r3, [r7, #20]
   return(result);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005888:	653b      	str	r3, [r7, #80]	; 0x50
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005892:	627a      	str	r2, [r7, #36]	; 0x24
 8005894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6a39      	ldr	r1, [r7, #32]
 8005898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e5      	bne.n	8005872 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3760      	adds	r7, #96	; 0x60
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	080054b1 	.word	0x080054b1
 80058b4:	080055dd 	.word	0x080055dd
 80058b8:	08005619 	.word	0x08005619

080058bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b089      	sub	sp, #36	; 0x24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	330c      	adds	r3, #12
 80058ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	61ba      	str	r2, [r7, #24]
 80058e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6979      	ldr	r1, [r7, #20]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	613b      	str	r3, [r7, #16]
   return(result);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e5      	bne.n	80058c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005900:	bf00      	nop
 8005902:	3724      	adds	r7, #36	; 0x24
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr

0800590a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800590a:	b480      	push	{r7}
 800590c:	b095      	sub	sp, #84	; 0x54
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005932:	643a      	str	r2, [r7, #64]	; 0x40
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e5      	bne.n	8005912 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3314      	adds	r3, #20
 800594c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	61fb      	str	r3, [r7, #28]
   return(result);
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	64bb      	str	r3, [r7, #72]	; 0x48
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3314      	adds	r3, #20
 8005964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800596c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e5      	bne.n	8005946 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	2b01      	cmp	r3, #1
 8005980:	d119      	bne.n	80059b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	60bb      	str	r3, [r7, #8]
   return(result);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f023 0310 	bic.w	r3, r3, #16
 8005998:	647b      	str	r3, [r7, #68]	; 0x44
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059a2:	61ba      	str	r2, [r7, #24]
 80059a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	613b      	str	r3, [r7, #16]
   return(result);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e5      	bne.n	8005982 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059c4:	bf00      	nop
 80059c6:	3754      	adds	r7, #84	; 0x54
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff fd58 	bl	800549e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b21      	cmp	r3, #33	; 0x21
 8005a08:	d13e      	bne.n	8005a88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a12:	d114      	bne.n	8005a3e <UART_Transmit_IT+0x48>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d110      	bne.n	8005a3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	1c9a      	adds	r2, r3, #2
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	621a      	str	r2, [r3, #32]
 8005a3c:	e008      	b.n	8005a50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	1c59      	adds	r1, r3, #1
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6211      	str	r1, [r2, #32]
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10f      	bne.n	8005a84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e000      	b.n	8005a8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a88:	2302      	movs	r3, #2
  }
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aaa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff fcd7 	bl	8005468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08c      	sub	sp, #48	; 0x30
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b22      	cmp	r3, #34	; 0x22
 8005ad6:	f040 80ae 	bne.w	8005c36 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae2:	d117      	bne.n	8005b14 <UART_Receive_IT+0x50>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d113      	bne.n	8005b14 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	1c9a      	adds	r2, r3, #2
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	629a      	str	r2, [r3, #40]	; 0x28
 8005b12:	e026      	b.n	8005b62 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	d007      	beq.n	8005b38 <UART_Receive_IT+0x74>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <UART_Receive_IT+0x82>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d106      	bne.n	8005b46 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	e008      	b.n	8005b58 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d15d      	bne.n	8005c32 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0220 	bic.w	r2, r2, #32
 8005b84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0201 	bic.w	r2, r2, #1
 8005ba4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d135      	bne.n	8005c28 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f023 0310 	bic.w	r3, r3, #16
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be2:	623a      	str	r2, [r7, #32]
 8005be4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	69f9      	ldr	r1, [r7, #28]
 8005be8:	6a3a      	ldr	r2, [r7, #32]
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d10a      	bne.n	8005c1a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fa fe45 	bl	80008b0 <HAL_UARTEx_RxEventCallback>
 8005c26:	e002      	b.n	8005c2e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff fc26 	bl	800547a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e002      	b.n	8005c38 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e000      	b.n	8005c38 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c36:	2302      	movs	r3, #2
  }
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3730      	adds	r7, #48	; 0x30
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c7a:	f023 030c 	bic.w	r3, r3, #12
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	430b      	orrs	r3, r1
 8005c86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699a      	ldr	r2, [r3, #24]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2c      	ldr	r2, [pc, #176]	; (8005d54 <UART_SetConfig+0x114>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d103      	bne.n	8005cb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ca8:	f7fe f87e 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	e002      	b.n	8005cb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005cb0:	f7fe f866 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 8005cb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009a      	lsls	r2, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	4a22      	ldr	r2, [pc, #136]	; (8005d58 <UART_SetConfig+0x118>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	0119      	lsls	r1, r3, #4
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	009a      	lsls	r2, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cec:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <UART_SetConfig+0x118>)
 8005cee:	fba3 0302 	umull	r0, r3, r3, r2
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2064      	movs	r0, #100	; 0x64
 8005cf6:	fb00 f303 	mul.w	r3, r0, r3
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	3332      	adds	r3, #50	; 0x32
 8005d00:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <UART_SetConfig+0x118>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d0c:	4419      	add	r1, r3
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009a      	lsls	r2, r3, #2
 8005d18:	441a      	add	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d24:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <UART_SetConfig+0x118>)
 8005d26:	fba3 0302 	umull	r0, r3, r3, r2
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	2064      	movs	r0, #100	; 0x64
 8005d2e:	fb00 f303 	mul.w	r3, r0, r3
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	3332      	adds	r3, #50	; 0x32
 8005d38:	4a07      	ldr	r2, [pc, #28]	; (8005d58 <UART_SetConfig+0x118>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	f003 020f 	and.w	r2, r3, #15
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	440a      	add	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40013800 	.word	0x40013800
 8005d58:	51eb851f 	.word	0x51eb851f

08005d5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	f107 0014 	add.w	r0, r7, #20
 8005d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	b004      	add	sp, #16
 8005d7a:	4770      	bx	lr

08005d7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d8c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr

08005da8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005db0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005db4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr

08005ddc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005df4:	b084      	sub	sp, #16
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	f107 0014 	add.w	r0, r7, #20
 8005e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bc80      	pop	{r7}
 8005e30:	b004      	add	sp, #16
 8005e32:	4770      	bx	lr

08005e34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b09d      	sub	sp, #116	; 0x74
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	78db      	ldrb	r3, [r3, #3]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d81f      	bhi.n	8005ea6 <USB_ActivateEndpoint+0x72>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <USB_ActivateEndpoint+0x38>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005e7d 	.word	0x08005e7d
 8005e70:	08005e99 	.word	0x08005e99
 8005e74:	08005eaf 	.word	0x08005eaf
 8005e78:	08005e8b 	.word	0x08005e8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005e7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e88:	e012      	b.n	8005eb0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e8a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e8e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e96:	e00b      	b.n	8005eb0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ea0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005ea4:	e004      	b.n	8005eb0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005eac:	e000      	b.n	8005eb0 <USB_ActivateEndpoint+0x7c>
      break;
 8005eae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	441a      	add	r2, r3
 8005eba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	7b1b      	ldrb	r3, [r3, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f040 8178 	bne.w	8006212 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	785b      	ldrb	r3, [r3, #1]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 8084 	beq.w	8006034 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	61bb      	str	r3, [r7, #24]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	011a      	lsls	r2, r3, #4
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	88db      	ldrh	r3, [r3, #6]
 8005f54:	085b      	lsrs	r3, r3, #1
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	827b      	strh	r3, [r7, #18]
 8005f6e:	8a7b      	ldrh	r3, [r7, #18]
 8005f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01b      	beq.n	8005fb0 <USB_ActivateEndpoint+0x17c>
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8e:	823b      	strh	r3, [r7, #16]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	441a      	add	r2, r3
 8005f9a:	8a3b      	ldrh	r3, [r7, #16]
 8005f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	78db      	ldrb	r3, [r3, #3]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d020      	beq.n	8005ffa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fce:	81bb      	strh	r3, [r7, #12]
 8005fd0:	89bb      	ldrh	r3, [r7, #12]
 8005fd2:	f083 0320 	eor.w	r3, r3, #32
 8005fd6:	81bb      	strh	r3, [r7, #12]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	441a      	add	r2, r3
 8005fe2:	89bb      	ldrh	r3, [r7, #12]
 8005fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	8013      	strh	r3, [r2, #0]
 8005ff8:	e2d5      	b.n	80065a6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006010:	81fb      	strh	r3, [r7, #14]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	441a      	add	r2, r3
 800601c:	89fb      	ldrh	r3, [r7, #14]
 800601e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]
 8006032:	e2b8      	b.n	80065a6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	633b      	str	r3, [r7, #48]	; 0x30
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603e:	b29b      	uxth	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	4413      	add	r3, r2
 8006046:	633b      	str	r3, [r7, #48]	; 0x30
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	011a      	lsls	r2, r3, #4
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	4413      	add	r3, r2
 8006052:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	88db      	ldrh	r3, [r3, #6]
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	b29b      	uxth	r3, r3
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	62bb      	str	r3, [r7, #40]	; 0x28
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006072:	b29b      	uxth	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	4413      	add	r3, r2
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	011a      	lsls	r2, r3, #4
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	4413      	add	r3, r2
 8006086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006096:	b29a      	uxth	r2, r3
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b3e      	cmp	r3, #62	; 0x3e
 80060a2:	d91d      	bls.n	80060e0 <USB_ActivateEndpoint+0x2ac>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <USB_ActivateEndpoint+0x28a>
 80060b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060ba:	3b01      	subs	r3, #1
 80060bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	029b      	lsls	r3, r3, #10
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	4313      	orrs	r3, r2
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d8:	b29a      	uxth	r2, r3
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	e026      	b.n	800612e <USB_ActivateEndpoint+0x2fa>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <USB_ActivateEndpoint+0x2ca>
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e017      	b.n	800612e <USB_ActivateEndpoint+0x2fa>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	085b      	lsrs	r3, r3, #1
 8006104:	66bb      	str	r3, [r7, #104]	; 0x68
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <USB_ActivateEndpoint+0x2e4>
 8006112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006114:	3301      	adds	r3, #1
 8006116:	66bb      	str	r3, [r7, #104]	; 0x68
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29a      	uxth	r2, r3
 800611e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006120:	b29b      	uxth	r3, r3
 8006122:	029b      	lsls	r3, r3, #10
 8006124:	b29b      	uxth	r3, r3
 8006126:	4313      	orrs	r3, r2
 8006128:	b29a      	uxth	r2, r3
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	847b      	strh	r3, [r7, #34]	; 0x22
 800613c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800613e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01b      	beq.n	800617e <USB_ActivateEndpoint+0x34a>
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	843b      	strh	r3, [r7, #32]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	441a      	add	r2, r3
 8006168:	8c3b      	ldrh	r3, [r7, #32]
 800616a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617a:	b29b      	uxth	r3, r3
 800617c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d124      	bne.n	80061d0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619c:	83bb      	strh	r3, [r7, #28]
 800619e:	8bbb      	ldrh	r3, [r7, #28]
 80061a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061a4:	83bb      	strh	r3, [r7, #28]
 80061a6:	8bbb      	ldrh	r3, [r7, #28]
 80061a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061ac:	83bb      	strh	r3, [r7, #28]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	8bbb      	ldrh	r3, [r7, #28]
 80061ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	8013      	strh	r3, [r2, #0]
 80061ce:	e1ea      	b.n	80065a6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	83fb      	strh	r3, [r7, #30]
 80061e8:	8bfb      	ldrh	r3, [r7, #30]
 80061ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061ee:	83fb      	strh	r3, [r7, #30]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	441a      	add	r2, r3
 80061fa:	8bfb      	ldrh	r3, [r7, #30]
 80061fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800620c:	b29b      	uxth	r3, r3
 800620e:	8013      	strh	r3, [r2, #0]
 8006210:	e1c9      	b.n	80065a6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	78db      	ldrb	r3, [r3, #3]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d11e      	bne.n	8006258 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006230:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800624e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]
 8006256:	e01d      	b.n	8006294 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	441a      	add	r2, r3
 800627c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006290:	b29b      	uxth	r3, r3
 8006292:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a4:	4413      	add	r3, r2
 80062a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	011a      	lsls	r2, r3, #4
 80062ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	891b      	ldrh	r3, [r3, #8]
 80062bc:	085b      	lsrs	r3, r3, #1
 80062be:	b29b      	uxth	r3, r3
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	657b      	str	r3, [r7, #84]	; 0x54
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d8:	4413      	add	r3, r2
 80062da:	657b      	str	r3, [r7, #84]	; 0x54
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	011a      	lsls	r2, r3, #4
 80062e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80062ea:	653b      	str	r3, [r7, #80]	; 0x50
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	895b      	ldrh	r3, [r3, #10]
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f040 8093 	bne.w	800642c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006316:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800631a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01b      	beq.n	800635a <USB_ActivateEndpoint+0x526>
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006338:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800634e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006356:	b29b      	uxth	r3, r3
 8006358:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006368:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01b      	beq.n	80063aa <USB_ActivateEndpoint+0x576>
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006388:	877b      	strh	r3, [r7, #58]	; 0x3a
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	441a      	add	r2, r3
 8006394:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800639a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c0:	873b      	strh	r3, [r7, #56]	; 0x38
 80063c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80063ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006408:	86fb      	strh	r3, [r7, #54]	; 0x36
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	441a      	add	r2, r3
 8006414:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800641a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006426:	b29b      	uxth	r3, r3
 8006428:	8013      	strh	r3, [r2, #0]
 800642a:	e0bc      	b.n	80065a6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800643c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01d      	beq.n	8006484 <USB_ActivateEndpoint+0x650>
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800647c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006480:	b29b      	uxth	r3, r3
 8006482:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006494:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01d      	beq.n	80064dc <USB_ActivateEndpoint+0x6a8>
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	441a      	add	r2, r3
 80064c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064d8:	b29b      	uxth	r3, r3
 80064da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	78db      	ldrb	r3, [r3, #3]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d024      	beq.n	800652e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80064fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006502:	f083 0320 	eor.w	r3, r3, #32
 8006506:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]
 800652c:	e01d      	b.n	800656a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006544:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800655a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006566:	b29b      	uxth	r3, r3
 8006568:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800657c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006580:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	441a      	add	r2, r3
 800658e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80065a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3774      	adds	r7, #116	; 0x74
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr

080065b4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b0c2      	sub	sp, #264	; 0x108
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c2:	6018      	str	r0, [r3, #0]
 80065c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065cc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	f040 86b7 	bne.w	800734e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80065e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699a      	ldr	r2, [r3, #24]
 80065ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d908      	bls.n	800660e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80065fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800660c:	e007      	b.n	800661e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800660e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800661e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	7b1b      	ldrb	r3, [r3, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d13a      	bne.n	80066a4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800662e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6959      	ldr	r1, [r3, #20]
 800663a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	88da      	ldrh	r2, [r3, #6]
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664a:	b29b      	uxth	r3, r3
 800664c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006650:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006654:	6800      	ldr	r0, [r0, #0]
 8006656:	f001 fc9c 	bl	8007f92 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800665a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006674:	b29b      	uxth	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4413      	add	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	011a      	lsls	r2, r3, #4
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	4413      	add	r3, r2
 8006690:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	801a      	strh	r2, [r3, #0]
 80066a0:	f000 be1f 	b.w	80072e2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80066a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	78db      	ldrb	r3, [r3, #3]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	f040 8462 	bne.w	8006f7a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80066b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6a1a      	ldr	r2, [r3, #32]
 80066c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	f240 83df 	bls.w	8006e92 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80066d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80066fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	441a      	add	r2, r3
 8006718:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800671c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006724:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672c:	b29b      	uxth	r3, r3
 800672e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006740:	1ad2      	subs	r2, r2, r3
 8006742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800674e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 81c7 	beq.w	8006b04 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	633b      	str	r3, [r7, #48]	; 0x30
 8006782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d177      	bne.n	8006882 <USB_EPStartXfer+0x2ce>
 8006792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
 800679e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	4413      	add	r3, r2
 80067b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	011a      	lsls	r2, r3, #4
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	4413      	add	r3, r2
 80067c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e2:	2b3e      	cmp	r3, #62	; 0x3e
 80067e4:	d921      	bls.n	800682a <USB_EPStartXfer+0x276>
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f4:	f003 031f 	and.w	r3, r3, #31
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <USB_EPStartXfer+0x252>
 80067fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006800:	3b01      	subs	r3, #1
 8006802:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29a      	uxth	r2, r3
 800680c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006810:	b29b      	uxth	r3, r3
 8006812:	029b      	lsls	r3, r3, #10
 8006814:	b29b      	uxth	r3, r3
 8006816:	4313      	orrs	r3, r2
 8006818:	b29b      	uxth	r3, r3
 800681a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006822:	b29a      	uxth	r2, r3
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	e050      	b.n	80068cc <USB_EPStartXfer+0x318>
 800682a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <USB_EPStartXfer+0x294>
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800683c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006840:	b29a      	uxth	r2, r3
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	801a      	strh	r2, [r3, #0]
 8006846:	e041      	b.n	80068cc <USB_EPStartXfer+0x318>
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684c:	085b      	lsrs	r3, r3, #1
 800684e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <USB_EPStartXfer+0x2b4>
 800685e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006862:	3301      	adds	r3, #1
 8006864:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	b29a      	uxth	r2, r3
 800686e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006872:	b29b      	uxth	r3, r3
 8006874:	029b      	lsls	r3, r3, #10
 8006876:	b29b      	uxth	r3, r3
 8006878:	4313      	orrs	r3, r2
 800687a:	b29a      	uxth	r2, r3
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	e024      	b.n	80068cc <USB_EPStartXfer+0x318>
 8006882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	785b      	ldrb	r3, [r3, #1]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d11c      	bne.n	80068cc <USB_EPStartXfer+0x318>
 8006892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	4413      	add	r3, r2
 80068a8:	633b      	str	r3, [r7, #48]	; 0x30
 80068aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	011a      	lsls	r2, r3, #4
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	4413      	add	r3, r2
 80068bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	895b      	ldrh	r3, [r3, #10]
 80068d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6959      	ldr	r1, [r3, #20]
 80068e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068fa:	6800      	ldr	r0, [r0, #0]
 80068fc:	f001 fb49 	bl	8007f92 <USB_WritePMA>
            ep->xfer_buff += len;
 8006900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695a      	ldr	r2, [r3, #20]
 800690c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006910:	441a      	add	r2, r3
 8006912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800691e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6a1a      	ldr	r2, [r3, #32]
 800692a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	429a      	cmp	r2, r3
 8006938:	d90f      	bls.n	800695a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800693a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a1a      	ldr	r2, [r3, #32]
 8006946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800694a:	1ad2      	subs	r2, r2, r3
 800694c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	621a      	str	r2, [r3, #32]
 8006958:	e00e      	b.n	8006978 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800695a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800696a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2200      	movs	r2, #0
 8006976:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	785b      	ldrb	r3, [r3, #1]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d177      	bne.n	8006a78 <USB_EPStartXfer+0x4c4>
 8006988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	4413      	add	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	011a      	lsls	r2, r3, #4
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	4413      	add	r3, r2
 80069be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d8:	2b3e      	cmp	r3, #62	; 0x3e
 80069da:	d921      	bls.n	8006a20 <USB_EPStartXfer+0x46c>
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <USB_EPStartXfer+0x448>
 80069f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f6:	3b01      	subs	r3, #1
 80069f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	029b      	lsls	r3, r3, #10
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	e056      	b.n	8006ace <USB_EPStartXfer+0x51a>
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10a      	bne.n	8006a3e <USB_EPStartXfer+0x48a>
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	e047      	b.n	8006ace <USB_EPStartXfer+0x51a>
 8006a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a42:	085b      	lsrs	r3, r3, #1
 8006a44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d004      	beq.n	8006a5e <USB_EPStartXfer+0x4aa>
 8006a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a58:	3301      	adds	r3, #1
 8006a5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	029b      	lsls	r3, r3, #10
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	801a      	strh	r2, [r3, #0]
 8006a76:	e02a      	b.n	8006ace <USB_EPStartXfer+0x51a>
 8006a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d122      	bne.n	8006ace <USB_EPStartXfer+0x51a>
 8006a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	623b      	str	r3, [r7, #32]
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	623b      	str	r3, [r7, #32]
 8006aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	011a      	lsls	r2, r3, #4
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	4413      	add	r3, r2
 8006abe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	891b      	ldrh	r3, [r3, #8]
 8006ada:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6959      	ldr	r1, [r3, #20]
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006af4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006af8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006afc:	6800      	ldr	r0, [r0, #0]
 8006afe:	f001 fa48 	bl	8007f92 <USB_WritePMA>
 8006b02:	e3ee      	b.n	80072e2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d177      	bne.n	8006c04 <USB_EPStartXfer+0x650>
 8006b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b34:	4413      	add	r3, r2
 8006b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	011a      	lsls	r2, r3, #4
 8006b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b48:	4413      	add	r3, r2
 8006b4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b5e:	801a      	strh	r2, [r3, #0]
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b64:	2b3e      	cmp	r3, #62	; 0x3e
 8006b66:	d921      	bls.n	8006bac <USB_EPStartXfer+0x5f8>
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d104      	bne.n	8006b88 <USB_EPStartXfer+0x5d4>
 8006b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b82:	3b01      	subs	r3, #1
 8006b84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	029b      	lsls	r3, r3, #10
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ba8:	801a      	strh	r2, [r3, #0]
 8006baa:	e056      	b.n	8006c5a <USB_EPStartXfer+0x6a6>
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <USB_EPStartXfer+0x616>
 8006bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	e047      	b.n	8006c5a <USB_EPStartXfer+0x6a6>
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <USB_EPStartXfer+0x636>
 8006be0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006be4:	3301      	adds	r3, #1
 8006be6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	029b      	lsls	r3, r3, #10
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	e02a      	b.n	8006c5a <USB_EPStartXfer+0x6a6>
 8006c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	785b      	ldrb	r3, [r3, #1]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d122      	bne.n	8006c5a <USB_EPStartXfer+0x6a6>
 8006c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c34:	4413      	add	r3, r2
 8006c36:	653b      	str	r3, [r7, #80]	; 0x50
 8006c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	011a      	lsls	r2, r3, #4
 8006c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c48:	4413      	add	r3, r2
 8006c4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	891b      	ldrh	r3, [r3, #8]
 8006c66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6959      	ldr	r1, [r3, #20]
 8006c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c80:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c88:	6800      	ldr	r0, [r0, #0]
 8006c8a:	f001 f982 	bl	8007f92 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695a      	ldr	r2, [r3, #20]
 8006c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9e:	441a      	add	r2, r3
 8006ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6a1a      	ldr	r2, [r3, #32]
 8006cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d90f      	bls.n	8006ce8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a1a      	ldr	r2, [r3, #32]
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	621a      	str	r2, [r3, #32]
 8006ce6:	e00e      	b.n	8006d06 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2200      	movs	r2, #0
 8006d04:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	643b      	str	r3, [r7, #64]	; 0x40
 8006d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	785b      	ldrb	r3, [r3, #1]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d177      	bne.n	8006e12 <USB_EPStartXfer+0x85e>
 8006d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	461a      	mov	r2, r3
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	4413      	add	r3, r2
 8006d44:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	011a      	lsls	r2, r3, #4
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	4413      	add	r3, r2
 8006d58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6c:	801a      	strh	r2, [r3, #0]
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d72:	2b3e      	cmp	r3, #62	; 0x3e
 8006d74:	d921      	bls.n	8006dba <USB_EPStartXfer+0x806>
 8006d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <USB_EPStartXfer+0x7e2>
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d90:	3b01      	subs	r3, #1
 8006d92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	4313      	orrs	r3, r2
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db6:	801a      	strh	r2, [r3, #0]
 8006db8:	e050      	b.n	8006e5c <USB_EPStartXfer+0x8a8>
 8006dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10a      	bne.n	8006dd8 <USB_EPStartXfer+0x824>
 8006dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd4:	801a      	strh	r2, [r3, #0]
 8006dd6:	e041      	b.n	8006e5c <USB_EPStartXfer+0x8a8>
 8006dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ddc:	085b      	lsrs	r3, r3, #1
 8006dde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <USB_EPStartXfer+0x844>
 8006dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df2:	3301      	adds	r3, #1
 8006df4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	029b      	lsls	r3, r3, #10
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0e:	801a      	strh	r2, [r3, #0]
 8006e10:	e024      	b.n	8006e5c <USB_EPStartXfer+0x8a8>
 8006e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d11c      	bne.n	8006e5c <USB_EPStartXfer+0x8a8>
 8006e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e36:	4413      	add	r3, r2
 8006e38:	643b      	str	r3, [r7, #64]	; 0x40
 8006e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	011a      	lsls	r2, r3, #4
 8006e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	895b      	ldrh	r3, [r3, #10]
 8006e68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6959      	ldr	r1, [r3, #20]
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e82:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e86:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e8a:	6800      	ldr	r0, [r0, #0]
 8006e8c:	f001 f881 	bl	8007f92 <USB_WritePMA>
 8006e90:	e227      	b.n	80072e2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	441a      	add	r2, r3
 8006ee6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f1e:	4413      	add	r3, r2
 8006f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	011a      	lsls	r2, r3, #4
 8006f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f32:	4413      	add	r3, r2
 8006f34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f38:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	891b      	ldrh	r3, [r3, #8]
 8006f50:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6959      	ldr	r1, [r3, #20]
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f6a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f6e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f72:	6800      	ldr	r0, [r0, #0]
 8006f74:	f001 f80d 	bl	8007f92 <USB_WritePMA>
 8006f78:	e1b3      	b.n	80072e2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 80c6 	beq.w	800714c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	673b      	str	r3, [r7, #112]	; 0x70
 8006fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	785b      	ldrb	r3, [r3, #1]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d177      	bne.n	80070cc <USB_EPStartXfer+0xb18>
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ffc:	4413      	add	r3, r2
 8006ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	011a      	lsls	r2, r3, #4
 800700e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007010:	4413      	add	r3, r2
 8007012:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007016:	667b      	str	r3, [r7, #100]	; 0x64
 8007018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007022:	b29a      	uxth	r2, r3
 8007024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007026:	801a      	strh	r2, [r3, #0]
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702c:	2b3e      	cmp	r3, #62	; 0x3e
 800702e:	d921      	bls.n	8007074 <USB_EPStartXfer+0xac0>
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <USB_EPStartXfer+0xa9c>
 8007046:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800704a:	3b01      	subs	r3, #1
 800704c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29a      	uxth	r2, r3
 8007056:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800705a:	b29b      	uxth	r3, r3
 800705c:	029b      	lsls	r3, r3, #10
 800705e:	b29b      	uxth	r3, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	b29b      	uxth	r3, r3
 8007064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706c:	b29a      	uxth	r2, r3
 800706e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	e050      	b.n	8007116 <USB_EPStartXfer+0xb62>
 8007074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <USB_EPStartXfer+0xade>
 800707c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708a:	b29a      	uxth	r2, r3
 800708c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800708e:	801a      	strh	r2, [r3, #0]
 8007090:	e041      	b.n	8007116 <USB_EPStartXfer+0xb62>
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007096:	085b      	lsrs	r3, r3, #1
 8007098:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d004      	beq.n	80070b2 <USB_EPStartXfer+0xafe>
 80070a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070ac:	3301      	adds	r3, #1
 80070ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070bc:	b29b      	uxth	r3, r3
 80070be:	029b      	lsls	r3, r3, #10
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	4313      	orrs	r3, r2
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070c8:	801a      	strh	r2, [r3, #0]
 80070ca:	e024      	b.n	8007116 <USB_EPStartXfer+0xb62>
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	785b      	ldrb	r3, [r3, #1]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d11c      	bne.n	8007116 <USB_EPStartXfer+0xb62>
 80070dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070f0:	4413      	add	r3, r2
 80070f2:	673b      	str	r3, [r7, #112]	; 0x70
 80070f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	011a      	lsls	r2, r3, #4
 8007102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007104:	4413      	add	r3, r2
 8007106:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800710a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800710c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007110:	b29a      	uxth	r2, r3
 8007112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007114:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	895b      	ldrh	r3, [r3, #10]
 8007122:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6959      	ldr	r1, [r3, #20]
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007136:	b29b      	uxth	r3, r3
 8007138:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800713c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007140:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007144:	6800      	ldr	r0, [r0, #0]
 8007146:	f000 ff24 	bl	8007f92 <USB_WritePMA>
 800714a:	e0ca      	b.n	80072e2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800714c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d177      	bne.n	800724c <USB_EPStartXfer+0xc98>
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007176:	b29b      	uxth	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800717c:	4413      	add	r3, r2
 800717e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	011a      	lsls	r2, r3, #4
 800718e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007190:	4413      	add	r3, r2
 8007192:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007196:	67bb      	str	r3, [r7, #120]	; 0x78
 8007198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	b29b      	uxth	r3, r3
 800719e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ac:	2b3e      	cmp	r3, #62	; 0x3e
 80071ae:	d921      	bls.n	80071f4 <USB_EPStartXfer+0xc40>
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b4:	095b      	lsrs	r3, r3, #5
 80071b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071be:	f003 031f 	and.w	r3, r3, #31
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d104      	bne.n	80071d0 <USB_EPStartXfer+0xc1c>
 80071c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071ca:	3b01      	subs	r3, #1
 80071cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071da:	b29b      	uxth	r3, r3
 80071dc:	029b      	lsls	r3, r3, #10
 80071de:	b29b      	uxth	r3, r3
 80071e0:	4313      	orrs	r3, r2
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071f0:	801a      	strh	r2, [r3, #0]
 80071f2:	e05c      	b.n	80072ae <USB_EPStartXfer+0xcfa>
 80071f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <USB_EPStartXfer+0xc5e>
 80071fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720a:	b29a      	uxth	r2, r3
 800720c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	e04d      	b.n	80072ae <USB_EPStartXfer+0xcfa>
 8007212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007216:	085b      	lsrs	r3, r3, #1
 8007218:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <USB_EPStartXfer+0xc7e>
 8007228:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800722c:	3301      	adds	r3, #1
 800722e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29a      	uxth	r2, r3
 8007238:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800723c:	b29b      	uxth	r3, r3
 800723e:	029b      	lsls	r3, r3, #10
 8007240:	b29b      	uxth	r3, r3
 8007242:	4313      	orrs	r3, r2
 8007244:	b29a      	uxth	r2, r3
 8007246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	e030      	b.n	80072ae <USB_EPStartXfer+0xcfa>
 800724c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d128      	bne.n	80072ae <USB_EPStartXfer+0xcfa>
 800725c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800726a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007278:	b29b      	uxth	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007280:	4413      	add	r3, r2
 8007282:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	011a      	lsls	r2, r3, #4
 8007294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007298:	4413      	add	r3, r2
 800729a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800729e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	891b      	ldrh	r3, [r3, #8]
 80072ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6959      	ldr	r1, [r3, #20]
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80072d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80072dc:	6800      	ldr	r0, [r0, #0]
 80072de:	f000 fe58 	bl	8007f92 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80072e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007308:	817b      	strh	r3, [r7, #10]
 800730a:	897b      	ldrh	r3, [r7, #10]
 800730c:	f083 0310 	eor.w	r3, r3, #16
 8007310:	817b      	strh	r3, [r7, #10]
 8007312:	897b      	ldrh	r3, [r7, #10]
 8007314:	f083 0320 	eor.w	r3, r3, #32
 8007318:	817b      	strh	r3, [r7, #10]
 800731a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	441a      	add	r2, r3
 8007334:	897b      	ldrh	r3, [r7, #10]
 8007336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800733a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007346:	b29b      	uxth	r3, r3
 8007348:	8013      	strh	r3, [r2, #0]
 800734a:	f000 bcde 	b.w	8007d0a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800734e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	7b1b      	ldrb	r3, [r3, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	f040 80bb 	bne.w	80074d6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	429a      	cmp	r2, r3
 800737a:	d917      	bls.n	80073ac <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800737c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800738c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739c:	1ad2      	subs	r2, r2, r3
 800739e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	619a      	str	r2, [r3, #24]
 80073aa:	e00e      	b.n	80073ca <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80073ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80073bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2200      	movs	r2, #0
 80073c8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	461a      	mov	r2, r3
 80073ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073ee:	4413      	add	r3, r2
 80073f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	011a      	lsls	r2, r3, #4
 8007402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007406:	4413      	add	r3, r2
 8007408:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800740c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800741c:	b29a      	uxth	r2, r3
 800741e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007428:	2b3e      	cmp	r3, #62	; 0x3e
 800742a:	d924      	bls.n	8007476 <USB_EPStartXfer+0xec2>
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <USB_EPStartXfer+0xe98>
 8007442:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007446:	3b01      	subs	r3, #1
 8007448:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800744c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	b29a      	uxth	r2, r3
 8007454:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007458:	b29b      	uxth	r3, r3
 800745a:	029b      	lsls	r3, r3, #10
 800745c:	b29b      	uxth	r3, r3
 800745e:	4313      	orrs	r3, r2
 8007460:	b29b      	uxth	r3, r3
 8007462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800746a:	b29a      	uxth	r2, r3
 800746c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	f000 bc10 	b.w	8007c96 <USB_EPStartXfer+0x16e2>
 8007476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10c      	bne.n	8007498 <USB_EPStartXfer+0xee4>
 800747e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800748e:	b29a      	uxth	r2, r3
 8007490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	e3fe      	b.n	8007c96 <USB_EPStartXfer+0x16e2>
 8007498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749c:	085b      	lsrs	r3, r3, #1
 800749e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <USB_EPStartXfer+0xf04>
 80074ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074b2:	3301      	adds	r3, #1
 80074b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29a      	uxth	r2, r3
 80074c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	029b      	lsls	r3, r3, #10
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	4313      	orrs	r3, r2
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	e3df      	b.n	8007c96 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80074d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	78db      	ldrb	r3, [r3, #3]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	f040 8218 	bne.w	8007918 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80074e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	785b      	ldrb	r3, [r3, #1]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 809d 	bne.w	8007634 <USB_EPStartXfer+0x1080>
 80074fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007516:	b29b      	uxth	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800751e:	4413      	add	r3, r2
 8007520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	011a      	lsls	r2, r3, #4
 8007532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007536:	4413      	add	r3, r2
 8007538:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800753c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800754c:	b29a      	uxth	r2, r3
 800754e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b3e      	cmp	r3, #62	; 0x3e
 8007562:	d92b      	bls.n	80075bc <USB_EPStartXfer+0x1008>
 8007564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	2b00      	cmp	r3, #0
 8007588:	d104      	bne.n	8007594 <USB_EPStartXfer+0xfe0>
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758e:	3b01      	subs	r3, #1
 8007590:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29a      	uxth	r2, r3
 800759c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	029b      	lsls	r3, r3, #10
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	4313      	orrs	r3, r2
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075b8:	801a      	strh	r2, [r3, #0]
 80075ba:	e070      	b.n	800769e <USB_EPStartXfer+0x10ea>
 80075bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10c      	bne.n	80075e6 <USB_EPStartXfer+0x1032>
 80075cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075dc:	b29a      	uxth	r2, r3
 80075de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	e05b      	b.n	800769e <USB_EPStartXfer+0x10ea>
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	085b      	lsrs	r3, r3, #1
 80075f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <USB_EPStartXfer+0x1062>
 800760c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007610:	3301      	adds	r3, #1
 8007612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	b29a      	uxth	r2, r3
 800761e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007622:	b29b      	uxth	r3, r3
 8007624:	029b      	lsls	r3, r3, #10
 8007626:	b29b      	uxth	r3, r3
 8007628:	4313      	orrs	r3, r2
 800762a:	b29a      	uxth	r2, r3
 800762c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007630:	801a      	strh	r2, [r3, #0]
 8007632:	e034      	b.n	800769e <USB_EPStartXfer+0x10ea>
 8007634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d12c      	bne.n	800769e <USB_EPStartXfer+0x10ea>
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007668:	4413      	add	r3, r2
 800766a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800766e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	011a      	lsls	r2, r3, #4
 800767c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007680:	4413      	add	r3, r2
 8007682:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800768a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	b29a      	uxth	r2, r3
 8007698:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f040 809d 	bne.w	80077f8 <USB_EPStartXfer+0x1244>
 80076be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076da:	b29b      	uxth	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076e2:	4413      	add	r3, r2
 80076e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	011a      	lsls	r2, r3, #4
 80076f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076fa:	4413      	add	r3, r2
 80076fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007710:	b29a      	uxth	r2, r3
 8007712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007716:	801a      	strh	r2, [r3, #0]
 8007718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	2b3e      	cmp	r3, #62	; 0x3e
 8007726:	d92b      	bls.n	8007780 <USB_EPStartXfer+0x11cc>
 8007728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800773a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 031f 	and.w	r3, r3, #31
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <USB_EPStartXfer+0x11a4>
 800774e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007752:	3b01      	subs	r3, #1
 8007754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29a      	uxth	r2, r3
 8007760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007764:	b29b      	uxth	r3, r3
 8007766:	029b      	lsls	r3, r3, #10
 8007768:	b29b      	uxth	r3, r3
 800776a:	4313      	orrs	r3, r2
 800776c:	b29b      	uxth	r3, r3
 800776e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007776:	b29a      	uxth	r2, r3
 8007778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	e069      	b.n	8007854 <USB_EPStartXfer+0x12a0>
 8007780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10c      	bne.n	80077aa <USB_EPStartXfer+0x11f6>
 8007790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	b29b      	uxth	r3, r3
 8007798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	e054      	b.n	8007854 <USB_EPStartXfer+0x12a0>
 80077aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <USB_EPStartXfer+0x1226>
 80077d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d4:	3301      	adds	r3, #1
 80077d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	029b      	lsls	r3, r3, #10
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	4313      	orrs	r3, r2
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	e02d      	b.n	8007854 <USB_EPStartXfer+0x12a0>
 80077f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d125      	bne.n	8007854 <USB_EPStartXfer+0x12a0>
 8007808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007816:	b29b      	uxth	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800781e:	4413      	add	r3, r2
 8007820:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	011a      	lsls	r2, r3, #4
 8007832:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007836:	4413      	add	r3, r2
 8007838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800783c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	b29a      	uxth	r2, r3
 800784e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007852:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8218 	beq.w	8007c96 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007886:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800788a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <USB_EPStartXfer+0x12ea>
 8007892:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10d      	bne.n	80078ba <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800789e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80078a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f040 81f5 	bne.w	8007c96 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80078ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80078b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f040 81ee 	bne.w	8007c96 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80078ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80078e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	441a      	add	r2, r3
 80078fe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800790e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007912:	b29b      	uxth	r3, r3
 8007914:	8013      	strh	r3, [r2, #0]
 8007916:	e1be      	b.n	8007c96 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	78db      	ldrb	r3, [r3, #3]
 8007924:	2b01      	cmp	r3, #1
 8007926:	f040 81b4 	bne.w	8007c92 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800792a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699a      	ldr	r2, [r3, #24]
 8007936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	429a      	cmp	r2, r3
 8007944:	d917      	bls.n	8007976 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007966:	1ad2      	subs	r2, r2, r3
 8007968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800796c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	619a      	str	r2, [r3, #24]
 8007974:	e00e      	b.n	8007994 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2200      	movs	r2, #0
 8007992:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 8085 	bne.w	8007ab0 <USB_EPStartXfer+0x14fc>
 80079a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	461a      	mov	r2, r3
 80079c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079ca:	4413      	add	r3, r2
 80079cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	011a      	lsls	r2, r3, #4
 80079de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079e2:	4413      	add	r3, r2
 80079e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079fe:	801a      	strh	r2, [r3, #0]
 8007a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a04:	2b3e      	cmp	r3, #62	; 0x3e
 8007a06:	d923      	bls.n	8007a50 <USB_EPStartXfer+0x149c>
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a0c:	095b      	lsrs	r3, r3, #5
 8007a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a16:	f003 031f 	and.w	r3, r3, #31
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d104      	bne.n	8007a28 <USB_EPStartXfer+0x1474>
 8007a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a22:	3b01      	subs	r3, #1
 8007a24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	029b      	lsls	r3, r3, #10
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a4c:	801a      	strh	r2, [r3, #0]
 8007a4e:	e060      	b.n	8007b12 <USB_EPStartXfer+0x155e>
 8007a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10c      	bne.n	8007a72 <USB_EPStartXfer+0x14be>
 8007a58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a6e:	801a      	strh	r2, [r3, #0]
 8007a70:	e04f      	b.n	8007b12 <USB_EPStartXfer+0x155e>
 8007a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <USB_EPStartXfer+0x14de>
 8007a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	029b      	lsls	r3, r3, #10
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	e030      	b.n	8007b12 <USB_EPStartXfer+0x155e>
 8007ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d128      	bne.n	8007b12 <USB_EPStartXfer+0x155e>
 8007ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	011a      	lsls	r2, r3, #4
 8007af8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007afc:	4413      	add	r3, r2
 8007afe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007b10:	801a      	strh	r2, [r3, #0]
 8007b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f040 8085 	bne.w	8007c3c <USB_EPStartXfer+0x1688>
 8007b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b56:	4413      	add	r3, r2
 8007b58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	011a      	lsls	r2, r3, #4
 8007b6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b6e:	4413      	add	r3, r2
 8007b70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b90:	2b3e      	cmp	r3, #62	; 0x3e
 8007b92:	d923      	bls.n	8007bdc <USB_EPStartXfer+0x1628>
 8007b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba2:	f003 031f 	and.w	r3, r3, #31
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <USB_EPStartXfer+0x1600>
 8007baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	029b      	lsls	r3, r3, #10
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	e05c      	b.n	8007c96 <USB_EPStartXfer+0x16e2>
 8007bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10c      	bne.n	8007bfe <USB_EPStartXfer+0x164a>
 8007be4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bfa:	801a      	strh	r2, [r3, #0]
 8007bfc:	e04b      	b.n	8007c96 <USB_EPStartXfer+0x16e2>
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <USB_EPStartXfer+0x166a>
 8007c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c18:	3301      	adds	r3, #1
 8007c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	029b      	lsls	r3, r3, #10
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	4313      	orrs	r3, r2
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c38:	801a      	strh	r2, [r3, #0]
 8007c3a:	e02c      	b.n	8007c96 <USB_EPStartXfer+0x16e2>
 8007c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	785b      	ldrb	r3, [r3, #1]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d124      	bne.n	8007c96 <USB_EPStartXfer+0x16e2>
 8007c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c62:	4413      	add	r3, r2
 8007c64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	011a      	lsls	r2, r3, #4
 8007c76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c8e:	801a      	strh	r2, [r3, #0]
 8007c90:	e001      	b.n	8007c96 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e03a      	b.n	8007d0c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007cc0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007cc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cc8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ccc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007cd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007cd4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	441a      	add	r2, r3
 8007cf2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b085      	sub	sp, #20
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d020      	beq.n	8007d6a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3e:	81bb      	strh	r3, [r7, #12]
 8007d40:	89bb      	ldrh	r3, [r7, #12]
 8007d42:	f083 0310 	eor.w	r3, r3, #16
 8007d46:	81bb      	strh	r3, [r7, #12]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	441a      	add	r2, r3
 8007d52:	89bb      	ldrh	r3, [r7, #12]
 8007d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	8013      	strh	r3, [r2, #0]
 8007d68:	e01f      	b.n	8007daa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d80:	81fb      	strh	r3, [r7, #14]
 8007d82:	89fb      	ldrh	r3, [r7, #14]
 8007d84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d88:	81fb      	strh	r3, [r7, #14]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	441a      	add	r2, r3
 8007d94:	89fb      	ldrh	r3, [r7, #14]
 8007d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bc80      	pop	{r7}
 8007db4:	4770      	bx	lr

08007db6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b087      	sub	sp, #28
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	7b1b      	ldrb	r3, [r3, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f040 809d 	bne.w	8007f04 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d04c      	beq.n	8007e6c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	823b      	strh	r3, [r7, #16]
 8007de0:	8a3b      	ldrh	r3, [r7, #16]
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d01b      	beq.n	8007e22 <USB_EPClearStall+0x6c>
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e00:	81fb      	strh	r3, [r7, #14]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	441a      	add	r2, r3
 8007e0c:	89fb      	ldrh	r3, [r7, #14]
 8007e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	78db      	ldrb	r3, [r3, #3]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d06c      	beq.n	8007f04 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e40:	81bb      	strh	r3, [r7, #12]
 8007e42:	89bb      	ldrh	r3, [r7, #12]
 8007e44:	f083 0320 	eor.w	r3, r3, #32
 8007e48:	81bb      	strh	r3, [r7, #12]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	441a      	add	r2, r3
 8007e54:	89bb      	ldrh	r3, [r7, #12]
 8007e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	8013      	strh	r3, [r2, #0]
 8007e6a:	e04b      	b.n	8007f04 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	82fb      	strh	r3, [r7, #22]
 8007e7a:	8afb      	ldrh	r3, [r7, #22]
 8007e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01b      	beq.n	8007ebc <USB_EPClearStall+0x106>
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9a:	82bb      	strh	r3, [r7, #20]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	441a      	add	r2, r3
 8007ea6:	8abb      	ldrh	r3, [r7, #20]
 8007ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed2:	827b      	strh	r3, [r7, #18]
 8007ed4:	8a7b      	ldrh	r3, [r7, #18]
 8007ed6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007eda:	827b      	strh	r3, [r7, #18]
 8007edc:	8a7b      	ldrh	r3, [r7, #18]
 8007ede:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ee2:	827b      	strh	r3, [r7, #18]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	441a      	add	r2, r3
 8007eee:	8a7b      	ldrh	r3, [r7, #18]
 8007ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr

08007f10 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d103      	bne.n	8007f2a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2280      	movs	r2, #128	; 0x80
 8007f26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	4770      	bx	lr

08007f36 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b083      	sub	sp, #12
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr

08007f4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr

08007f5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b085      	sub	sp, #20
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007f70:	68fb      	ldr	r3, [r7, #12]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr

08007f7c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr

08007f92 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b08b      	sub	sp, #44	; 0x2c
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	60f8      	str	r0, [r7, #12]
 8007f9a:	60b9      	str	r1, [r7, #8]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	80fb      	strh	r3, [r7, #6]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007fa8:	88bb      	ldrh	r3, [r7, #4]
 8007faa:	3301      	adds	r3, #1
 8007fac:	085b      	lsrs	r3, r3, #1
 8007fae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fb8:	88fb      	ldrh	r3, [r7, #6]
 8007fba:	005a      	lsls	r2, r3, #1
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fc4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fca:	e01e      	b.n	800800a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	021b      	lsls	r3, r3, #8
 8007fda:	b21a      	sxth	r2, r3
 8007fdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	b21b      	sxth	r3, r3
 8007fe4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	8a7a      	ldrh	r2, [r7, #18]
 8007fea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	3302      	adds	r3, #2
 8007ff0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	3301      	adds	r3, #1
 8008002:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	3b01      	subs	r3, #1
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1dd      	bne.n	8007fcc <USB_WritePMA+0x3a>
  }
}
 8008010:	bf00      	nop
 8008012:	bf00      	nop
 8008014:	372c      	adds	r7, #44	; 0x2c
 8008016:	46bd      	mov	sp, r7
 8008018:	bc80      	pop	{r7}
 800801a:	4770      	bx	lr

0800801c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800801c:	b480      	push	{r7}
 800801e:	b08b      	sub	sp, #44	; 0x2c
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4611      	mov	r1, r2
 8008028:	461a      	mov	r2, r3
 800802a:	460b      	mov	r3, r1
 800802c:	80fb      	strh	r3, [r7, #6]
 800802e:	4613      	mov	r3, r2
 8008030:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008032:	88bb      	ldrh	r3, [r7, #4]
 8008034:	085b      	lsrs	r3, r3, #1
 8008036:	b29b      	uxth	r3, r3
 8008038:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	005a      	lsls	r2, r3, #1
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800804e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
 8008054:	e01b      	b.n	800808e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	3302      	adds	r3, #2
 8008062:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	b2da      	uxtb	r2, r3
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	3301      	adds	r3, #1
 8008070:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	0a1b      	lsrs	r3, r3, #8
 8008076:	b2da      	uxtb	r2, r3
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	3301      	adds	r3, #1
 8008080:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	3302      	adds	r3, #2
 8008086:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	3b01      	subs	r3, #1
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e0      	bne.n	8008056 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008094:	88bb      	ldrh	r3, [r7, #4]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	b29b      	uxth	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d007      	beq.n	80080b0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	701a      	strb	r2, [r3, #0]
  }
}
 80080b0:	bf00      	nop
 80080b2:	372c      	adds	r7, #44	; 0x2c
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr
	...

080080bc <__NVIC_SystemReset>:
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80080c0:	f3bf 8f4f 	dsb	sy
}
 80080c4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80080c6:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <__NVIC_SystemReset+0x24>)
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80080ce:	4904      	ldr	r1, [pc, #16]	; (80080e0 <__NVIC_SystemReset+0x24>)
 80080d0:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <__NVIC_SystemReset+0x28>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80080d6:	f3bf 8f4f 	dsb	sy
}
 80080da:	bf00      	nop
    __NOP();
 80080dc:	bf00      	nop
 80080de:	e7fd      	b.n	80080dc <__NVIC_SystemReset+0x20>
 80080e0:	e000ed00 	.word	0xe000ed00
 80080e4:	05fa0004 	.word	0x05fa0004

080080e8 <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80080f4:	f240 401c 	movw	r0, #1052	; 0x41c
 80080f8:	f002 faca 	bl	800a690 <USBD_static_malloc>
 80080fc:	4602      	mov	r2, r0
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 800810e:	2302      	movs	r3, #2
 8008110:	e03f      	b.n	8008192 <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008118:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008128:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	4798      	blx	r3
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 800818c:	2302      	movs	r3, #2
 800818e:	e000      	b.n	8008192 <USBD_DFU_Init+0xaa>
    }
  }
  return USBD_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ac:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2202      	movs	r2, #2
 80081c2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2202      	movs	r2, #2
 80081d2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00e      	beq.n	80081fe <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f0:	4618      	mov	r0, r3
 80081f2:	f002 fa59 	bl	800a6a8 <USBD_static_free>
    pdev->pClassData = NULL;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008228:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008232:	2b00      	cmp	r3, #0
 8008234:	d03f      	beq.n	80082b6 <USBD_DFU_Setup+0xae>
 8008236:	2b20      	cmp	r3, #32
 8008238:	f040 80c2 	bne.w	80083c0 <USBD_DFU_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	785b      	ldrb	r3, [r3, #1]
 8008240:	2b06      	cmp	r3, #6
 8008242:	d830      	bhi.n	80082a6 <USBD_DFU_Setup+0x9e>
 8008244:	a201      	add	r2, pc, #4	; (adr r2, 800824c <USBD_DFU_Setup+0x44>)
 8008246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824a:	bf00      	nop
 800824c:	0800829d 	.word	0x0800829d
 8008250:	08008269 	.word	0x08008269
 8008254:	08008273 	.word	0x08008273
 8008258:	0800827d 	.word	0x0800827d
 800825c:	08008285 	.word	0x08008285
 8008260:	0800828d 	.word	0x0800828d
 8008264:	08008295 	.word	0x08008295
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa8e 	bl	800878c <DFU_Download>
          break;
 8008270:	e020      	b.n	80082b4 <USBD_DFU_Setup+0xac>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 faf3 	bl	8008860 <DFU_Upload>
          break;
 800827a:	e01b      	b.n	80082b4 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fbc7 	bl	8008a10 <DFU_GetStatus>
          break;
 8008282:	e017      	b.n	80082b4 <USBD_DFU_Setup+0xac>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fc75 	bl	8008b74 <DFU_ClearStatus>
          break;
 800828a:	e013      	b.n	80082b4 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fcc0 	bl	8008c12 <DFU_GetState>
          break;
 8008292:	e00f      	b.n	80082b4 <USBD_DFU_Setup+0xac>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fcd0 	bl	8008c3a <DFU_Abort>
          break;
 800829a:	e00b      	b.n	80082b4 <USBD_DFU_Setup+0xac>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fa14 	bl	80086cc <DFU_Detach>
          break;
 80082a4:	e006      	b.n	80082b4 <USBD_DFU_Setup+0xac>

        default:
          USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 fd4e 	bl	8009d4a <USBD_CtlError>
          ret = USBD_FAIL;
 80082ae:	2302      	movs	r3, #2
 80082b0:	747b      	strb	r3, [r7, #17]
          break;
 80082b2:	bf00      	nop
      }
      break;
 80082b4:	e08b      	b.n	80083ce <USBD_DFU_Setup+0x1c6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2b0b      	cmp	r3, #11
 80082bc:	d878      	bhi.n	80083b0 <USBD_DFU_Setup+0x1a8>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <USBD_DFU_Setup+0xbc>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082f5 	.word	0x080082f5
 80082c8:	080083b1 	.word	0x080083b1
 80082cc:	080083b1 	.word	0x080083b1
 80082d0:	080083b1 	.word	0x080083b1
 80082d4:	080083b1 	.word	0x080083b1
 80082d8:	080083b1 	.word	0x080083b1
 80082dc:	0800831d 	.word	0x0800831d
 80082e0:	080083b1 	.word	0x080083b1
 80082e4:	080083b1 	.word	0x080083b1
 80082e8:	080083b1 	.word	0x080083b1
 80082ec:	08008347 	.word	0x08008347
 80082f0:	08008371 	.word	0x08008371
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d107      	bne.n	800830e <USBD_DFU_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80082fe:	f107 030a 	add.w	r3, r7, #10
 8008302:	2202      	movs	r2, #2
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 fd89 	bl	8009e1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800830c:	e057      	b.n	80083be <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f001 fd1a 	bl	8009d4a <USBD_CtlError>
            ret = USBD_FAIL;
 8008316:	2302      	movs	r3, #2
 8008318:	747b      	strb	r3, [r7, #17]
          break;
 800831a:	e050      	b.n	80083be <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	885b      	ldrh	r3, [r3, #2]
 8008320:	0a1b      	lsrs	r3, r3, #8
 8008322:	b29b      	uxth	r3, r3
 8008324:	2b21      	cmp	r3, #33	; 0x21
 8008326:	d107      	bne.n	8008338 <USBD_DFU_Setup+0x130>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8008328:	4b2b      	ldr	r3, [pc, #172]	; (80083d8 <USBD_DFU_Setup+0x1d0>)
 800832a:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	88db      	ldrh	r3, [r3, #6]
 8008330:	2b09      	cmp	r3, #9
 8008332:	bf28      	it	cs
 8008334:	2309      	movcs	r3, #9
 8008336:	827b      	strh	r3, [r7, #18]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008338:	8a7b      	ldrh	r3, [r7, #18]
 800833a:	461a      	mov	r2, r3
 800833c:	6979      	ldr	r1, [r7, #20]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f001 fd6d 	bl	8009e1e <USBD_CtlSendData>
          break;
 8008344:	e03b      	b.n	80083be <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834c:	2b03      	cmp	r3, #3
 800834e:	d108      	bne.n	8008362 <USBD_DFU_Setup+0x15a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008356:	2201      	movs	r2, #1
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 fd5f 	bl	8009e1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008360:	e02d      	b.n	80083be <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 fcf0 	bl	8009d4a <USBD_CtlError>
            ret = USBD_FAIL;
 800836a:	2302      	movs	r3, #2
 800836c:	747b      	strb	r3, [r7, #17]
          break;
 800836e:	e026      	b.n	80083be <USBD_DFU_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	885b      	ldrh	r3, [r3, #2]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d113      	bne.n	80083a2 <USBD_DFU_Setup+0x19a>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008380:	2b03      	cmp	r3, #3
 8008382:	d107      	bne.n	8008394 <USBD_DFU_Setup+0x18c>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	885b      	ldrh	r3, [r3, #2]
 8008388:	b2db      	uxtb	r3, r3
 800838a:	461a      	mov	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008392:	e014      	b.n	80083be <USBD_DFU_Setup+0x1b6>
              USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 fcd7 	bl	8009d4a <USBD_CtlError>
              ret = USBD_FAIL;
 800839c:	2302      	movs	r3, #2
 800839e:	747b      	strb	r3, [r7, #17]
          break;
 80083a0:	e00d      	b.n	80083be <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 fcd0 	bl	8009d4a <USBD_CtlError>
            ret = USBD_FAIL;
 80083aa:	2302      	movs	r3, #2
 80083ac:	747b      	strb	r3, [r7, #17]
          break;
 80083ae:	e006      	b.n	80083be <USBD_DFU_Setup+0x1b6>

        default:
          USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 fcc9 	bl	8009d4a <USBD_CtlError>
          ret = USBD_FAIL;
 80083b8:	2302      	movs	r3, #2
 80083ba:	747b      	strb	r3, [r7, #17]
          break;
 80083bc:	bf00      	nop
      }
      break;
 80083be:	e006      	b.n	80083ce <USBD_DFU_Setup+0x1c6>

    default:
      USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 fcc1 	bl	8009d4a <USBD_CtlError>
      ret = USBD_FAIL;
 80083c8:	2302      	movs	r3, #2
 80083ca:	747b      	strb	r3, [r7, #17]
      break;
 80083cc:	bf00      	nop
  }

  return ret;
 80083ce:	7c7b      	ldrb	r3, [r7, #17]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	2000005a 	.word	0x2000005a

080083dc <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	221b      	movs	r2, #27
 80083e8:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 80083ea:	4b03      	ldr	r3, [pc, #12]	; (80083f8 <USBD_DFU_GetCfgDesc+0x1c>)
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bc80      	pop	{r7}
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	20000048 	.word	0x20000048

080083fc <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr

08008414 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	bc80      	pop	{r7}
 8008426:	4770      	bx	lr

08008428 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008436:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800843e:	2b04      	cmp	r3, #4
 8008440:	f040 80ca 	bne.w	80085d8 <USBD_DFU_EP0_TxReady+0x1b0>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800844a:	2b00      	cmp	r3, #0
 800844c:	f040 8086 	bne.w	800855c <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d105      	bne.n	8008464 <USBD_DFU_EP0_TxReady+0x3c>
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800845e:	2b01      	cmp	r3, #1
 8008460:	f000 809a 	beq.w	8008598 <USBD_DFU_EP0_TxReady+0x170>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b21      	cmp	r3, #33	; 0x21
 800846a:	d129      	bne.n	80084c0 <USBD_DFU_EP0_TxReady+0x98>
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008472:	2b05      	cmp	r3, #5
 8008474:	d124      	bne.n	80084c0 <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	461a      	mov	r2, r3
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	789b      	ldrb	r3, [r3, #2]
 800848c:	021b      	lsls	r3, r3, #8
 800848e:	441a      	add	r2, r3
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	78db      	ldrb	r3, [r3, #3]
 80084a0:	041b      	lsls	r3, r3, #16
 80084a2:	441a      	add	r2, r3
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	791b      	ldrb	r3, [r3, #4]
 80084b4:	061b      	lsls	r3, r3, #24
 80084b6:	441a      	add	r2, r3
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80084be:	e06b      	b.n	8008598 <USBD_DFU_EP0_TxReady+0x170>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b41      	cmp	r3, #65	; 0x41
 80084c6:	d136      	bne.n	8008536 <USBD_DFU_EP0_TxReady+0x10e>
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084ce:	2b05      	cmp	r3, #5
 80084d0:	d131      	bne.n	8008536 <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	461a      	mov	r2, r3
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	789b      	ldrb	r3, [r3, #2]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	441a      	add	r2, r3
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	78db      	ldrb	r3, [r3, #3]
 80084fc:	041b      	lsls	r3, r3, #16
 80084fe:	441a      	add	r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	791b      	ldrb	r3, [r3, #4]
 8008510:	061b      	lsls	r3, r3, #24
 8008512:	441a      	add	r2, r3
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8008528:	4610      	mov	r0, r2
 800852a:	4798      	blx	r3
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d032      	beq.n	8008598 <USBD_DFU_EP0_TxReady+0x170>
        {
          return USBD_FAIL;
 8008532:	2302      	movs	r3, #2
 8008534:	e059      	b.n	80085ea <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2200      	movs	r2, #0
 800853a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2200      	movs	r2, #0
 8008542:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 800854a:	2301      	movs	r3, #1
 800854c:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 800854e:	f107 0308 	add.w	r3, r7, #8
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 fbf8 	bl	8009d4a <USBD_CtlError>
 800855a:	e01d      	b.n	8008598 <USBD_DFU_EP0_TxReady+0x170>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008562:	2b01      	cmp	r3, #1
 8008564:	d918      	bls.n	8008598 <USBD_DFU_EP0_TxReady+0x170>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800856c:	3b02      	subs	r3, #2
 800856e:	029a      	lsls	r2, r3, #10
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008576:	4413      	add	r3, r2
 8008578:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	6978      	ldr	r0, [r7, #20]
 8008584:	6939      	ldr	r1, [r7, #16]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800858c:	4798      	blx	r3
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <USBD_DFU_EP0_TxReady+0x170>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 8008594:	2302      	movs	r3, #2
 8008596:	e028      	b.n	80085ea <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2200      	movs	r2, #0
 800859c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2203      	movs	r2, #3
 80085ac:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	e008      	b.n	80085ea <USBD_DFU_EP0_TxReady+0x1c2>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80085de:	2b07      	cmp	r3, #7
 80085e0:	d102      	bne.n	80085e8 <USBD_DFU_EP0_TxReady+0x1c0>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fb76 	bl	8008cd4 <DFU_Leave>
    }
  }

  return USBD_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	bc80      	pop	{r7}
 8008604:	4770      	bx	lr

08008606 <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	460b      	mov	r3, r1
 8008610:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	bc80      	pop	{r7}
 800861c:	4770      	bx	lr

0800861e <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800861e:	b480      	push	{r7}
 8008620:	b083      	sub	sp, #12
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	460b      	mov	r3, r1
 8008628:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	bc80      	pop	{r7}
 8008634:	4770      	bx	lr

08008636 <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 8008636:	b480      	push	{r7}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr
	...

08008650 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	220a      	movs	r2, #10
 800865c:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 800865e:	4b03      	ldr	r3, [pc, #12]	; (800866c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	bc80      	pop	{r7}
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	20000064 	.word	0x20000064

08008670 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	460b      	mov	r3, r1
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800867e:	7afb      	ldrb	r3, [r7, #11]
 8008680:	2b06      	cmp	r3, #6
 8008682:	d80a      	bhi.n	800869a <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	4905      	ldr	r1, [pc, #20]	; (80086a4 <USBD_DFU_GetUsrStringDesc+0x34>)
 8008690:	4618      	mov	r0, r3
 8008692:	f001 fb6b 	bl	8009d6c <USBD_GetString>
    return USBD_StrDesc;
 8008696:	4b03      	ldr	r3, [pc, #12]	; (80086a4 <USBD_DFU_GetUsrStringDesc+0x34>)
 8008698:	e000      	b.n	800869c <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 800869a:	2300      	movs	r3, #0
  }
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20000540 	.word	0x20000540

080086a8 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d003      	beq.n	80086c0 <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData = fops;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  return 0U;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bc80      	pop	{r7}
 80086ca:	4770      	bx	lr

080086cc <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086dc:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d013      	beq.n	8008710 <DFU_Detach+0x44>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d00e      	beq.n	8008710 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80086f8:	2b05      	cmp	r3, #5
 80086fa:	d009      	beq.n	8008710 <DFU_Detach+0x44>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008702:	2b06      	cmp	r3, #6
 8008704:	d004      	beq.n	8008710 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800870c:	2b09      	cmp	r3, #9
 800870e:	d125      	bne.n	800875c <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 800875c:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <DFU_Detach+0xbc>)
 800875e:	7d5b      	ldrb	r3, [r3, #21]
 8008760:	f003 0310 	and.w	r3, r3, #16
 8008764:	2b00      	cmp	r3, #0
 8008766:	d006      	beq.n	8008776 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fb6b 	bl	8008e44 <USBD_Stop>
    USBD_Start(pdev);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fb5c 	bl	8008e2c <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 8008774:	e004      	b.n	8008780 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	885b      	ldrh	r3, [r3, #2]
 800877a:	4618      	mov	r0, r3
 800877c:	f7f8 fc46 	bl	800100c <HAL_Delay>
}
 8008780:	bf00      	nop
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20000048 	.word	0x20000048

0800878c <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800879c:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	88db      	ldrh	r3, [r3, #6]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d02e      	beq.n	8008804 <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d004      	beq.n	80087ba <DFU_Download+0x2e>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80087b6:	2b05      	cmp	r3, #5
 80087b8:	d11f      	bne.n	80087fa <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	885b      	ldrh	r3, [r3, #2]
 80087be:	461a      	mov	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	88db      	ldrh	r3, [r3, #6]
 80087ca:	461a      	mov	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2203      	movs	r2, #3
 80087d6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 80087e6:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	461a      	mov	r2, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f001 fb41 	bl	8009e7a <USBD_CtlPrepareRx>
 80087f8:	e02e      	b.n	8008858 <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f001 faa4 	bl	8009d4a <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 8008802:	e029      	b.n	8008858 <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800880a:	2b05      	cmp	r3, #5
 800880c:	d004      	beq.n	8008818 <DFU_Download+0x8c>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008814:	2b02      	cmp	r3, #2
 8008816:	d11a      	bne.n	800884e <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2206      	movs	r2, #6
 8008824:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800884c:	e004      	b.n	8008858 <DFU_Download+0xcc>
      USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 fa7a 	bl	8009d4a <USBD_CtlError>
}
 8008856:	e7ff      	b.n	8008858 <DFU_Download+0xcc>
 8008858:	bf00      	nop
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008870:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 8008872:	2300      	movs	r3, #0
 8008874:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	88db      	ldrh	r3, [r3, #6]
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 80ab 	beq.w	80089da <DFU_Upload+0x17a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800888a:	2b02      	cmp	r3, #2
 800888c:	d005      	beq.n	800889a <DFU_Upload+0x3a>
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008894:	2b09      	cmp	r3, #9
 8008896:	f040 8093 	bne.w	80089c0 <DFU_Upload+0x160>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	461a      	mov	r2, r3
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	88db      	ldrh	r3, [r3, #6]
 80088aa:	461a      	mov	r2, r3
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d12c      	bne.n	8008916 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d901      	bls.n	80088ca <DFU_Upload+0x6a>
 80088c6:	2202      	movs	r2, #2
 80088c8:	e000      	b.n	80088cc <DFU_Upload+0x6c>
 80088ca:	2209      	movs	r2, #9
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2200      	movs	r2, #0
 80088fa:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2221      	movs	r2, #33	; 0x21
 8008900:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2241      	movs	r2, #65	; 0x41
 8008906:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2203      	movs	r2, #3
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 fa85 	bl	8009e1e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008914:	e078      	b.n	8008a08 <DFU_Upload+0x1a8>
      }
      else if (hdfu->wblock_num > 1U)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800891c:	2b01      	cmp	r3, #1
 800891e:	d934      	bls.n	800898a <DFU_Upload+0x12a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2209      	movs	r2, #9
 8008924:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008952:	3b02      	subs	r3, #2
 8008954:	029a      	lsls	r2, r3, #10
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800895c:	4413      	add	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	6979      	ldr	r1, [r7, #20]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8008972:	4798      	blx	r3
 8008974:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800897c:	b29b      	uxth	r3, r3
 800897e:	461a      	mov	r2, r3
 8008980:	6939      	ldr	r1, [r7, #16]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f001 fa4b 	bl	8009e1e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008988:	e03e      	b.n	8008a08 <DFU_Upload+0x1a8>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	220f      	movs	r2, #15
 800898e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 f9c6 	bl	8009d4a <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80089be:	e023      	b.n	8008a08 <DFU_Upload+0x1a8>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 f9b9 	bl	8009d4a <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 80089d8:	e016      	b.n	8008a08 <DFU_Upload+0x1a8>
    hdfu->dev_state = DFU_STATE_IDLE;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8008a06:	e7ff      	b.n	8008a08 <DFU_Upload+0x1a8>
 8008a08:	bf00      	nop
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1e:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d002      	beq.n	8008a30 <DFU_GetStatus+0x20>
 8008a2a:	2b06      	cmp	r3, #6
 8008a2c:	d055      	beq.n	8008ada <DFU_GetStatus+0xca>
        }
      }
      break;

    default :
      break;
 8008a2e:	e092      	b.n	8008b56 <DFU_GetStatus+0x146>
      if (hdfu->wlength != 0U)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d038      	beq.n	8008aac <DFU_GetStatus+0x9c>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2204      	movs	r2, #4
 8008a3e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d110      	bne.n	8008a92 <DFU_GetStatus+0x82>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	2b41      	cmp	r3, #65	; 0x41
 8008a76:	d10c      	bne.n	8008a92 <DFU_GetStatus+0x82>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	4798      	blx	r3
      break;
 8008a90:	e061      	b.n	8008b56 <DFU_GetStatus+0x146>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	4798      	blx	r3
      break;
 8008aaa:	e054      	b.n	8008b56 <DFU_GetStatus+0x146>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2205      	movs	r2, #5
 8008ab0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8008ad8:	e03d      	b.n	8008b56 <DFU_GetStatus+0x146>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d116      	bne.n	8008b12 <DFU_GetStatus+0x102>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2207      	movs	r2, #7
 8008ae8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8008b10:	e020      	b.n	8008b54 <DFU_GetStatus+0x144>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d11b      	bne.n	8008b54 <DFU_GetStatus+0x144>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8008b1c:	4b14      	ldr	r3, [pc, #80]	; (8008b70 <DFU_GetStatus+0x160>)
 8008b1e:	7d1b      	ldrb	r3, [r3, #20]
 8008b20:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d015      	beq.n	8008b54 <DFU_GetStatus+0x144>
          hdfu->dev_state = DFU_STATE_IDLE;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8008b54:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008b5c:	2206      	movs	r2, #6
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 f95c 	bl	8009e1e <USBD_CtlSendData>
}
 8008b66:	bf00      	nop
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20000048 	.word	0x20000048

08008b74 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b82:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008b8a:	2b0a      	cmp	r3, #10
 8008b8c:	d11e      	bne.n	8008bcc <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2202      	movs	r2, #2
 8008b92:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 8008bca:	e01d      	b.n	8008c08 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	220a      	movs	r2, #10
 8008bd0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	220e      	movs	r2, #14
 8008bd8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8008c08:	bf00      	nop
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bc80      	pop	{r7}
 8008c10:	4770      	bx	lr

08008c12 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c20:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8008c28:	2201      	movs	r2, #1
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 f8f6 	bl	8009e1e <USBD_CtlSendData>
}
 8008c32:	bf00      	nop
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c48:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d013      	beq.n	8008c7c <DFU_Abort+0x42>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d00e      	beq.n	8008c7c <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008c64:	2b05      	cmp	r3, #5
 8008c66:	d009      	beq.n	8008c7c <DFU_Abort+0x42>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008c6e:	2b06      	cmp	r3, #6
 8008c70:	d004      	beq.n	8008c7c <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d125      	bne.n	8008cc8 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8008cc8:	bf00      	nop
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bc80      	pop	{r7}
 8008cd0:	4770      	bx	lr
	...

08008cd4 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce2:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8008cec:	4b1f      	ldr	r3, [pc, #124]	; (8008d6c <DFU_Leave+0x98>)
 8008cee:	7d1b      	ldrb	r3, [r3, #20]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d016      	beq.n	8008d26 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2206      	movs	r2, #6
 8008cfc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8008d24:	e01f      	b.n	8008d66 <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2208      	movs	r2, #8
 8008d2a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f876 	bl	8008e44 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8008d62:	f7ff f9ab 	bl	80080bc <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20000048 	.word	0x20000048

08008d70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10a      	bne.n	8008d9a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8008d84:	4814      	ldr	r0, [pc, #80]	; (8008dd8 <USBD_Init+0x68>)
 8008d86:	f001 fd7f 	bl	800a888 <iprintf>
 8008d8a:	4814      	ldr	r0, [pc, #80]	; (8008ddc <USBD_Init+0x6c>)
 8008d8c:	f001 fd7c 	bl	800a888 <iprintf>
 8008d90:	200a      	movs	r0, #10
 8008d92:	f001 fd8b 	bl	800a8ac <putchar>
#endif
    return USBD_FAIL;
 8008d96:	2302      	movs	r3, #2
 8008d98:	e01a      	b.n	8008dd0 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	79fa      	ldrb	r2, [r7, #7]
 8008dc6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f001 faf5 	bl	800a3b8 <USBD_LL_Init>

  return USBD_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	0800b62c 	.word	0x0800b62c
 8008ddc:	0800b634 	.word	0x0800b634

08008de0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d006      	beq.n	8008e02 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]
 8008e00:	e00a      	b.n	8008e18 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8008e02:	4808      	ldr	r0, [pc, #32]	; (8008e24 <USBD_RegisterClass+0x44>)
 8008e04:	f001 fd40 	bl	800a888 <iprintf>
 8008e08:	4807      	ldr	r0, [pc, #28]	; (8008e28 <USBD_RegisterClass+0x48>)
 8008e0a:	f001 fd3d 	bl	800a888 <iprintf>
 8008e0e:	200a      	movs	r0, #10
 8008e10:	f001 fd4c 	bl	800a8ac <putchar>
#endif
    status = USBD_FAIL;
 8008e14:	2302      	movs	r3, #2
 8008e16:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	0800b62c 	.word	0x0800b62c
 8008e28:	0800b64c 	.word	0x0800b64c

08008e2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 faff 	bl	800a438 <USBD_LL_Start>

  return USBD_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6852      	ldr	r2, [r2, #4]
 8008e58:	b2d2      	uxtb	r2, r2
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 fb04 	bl	800a46e <USBD_LL_Stop>

  return USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bc80      	pop	{r7}
 8008e82:	4770      	bx	lr

08008e84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e90:	2302      	movs	r3, #2
 8008e92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00c      	beq.n	8008eb8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	78fa      	ldrb	r2, [r7, #3]
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	4798      	blx	r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	4611      	mov	r1, r2
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	4798      	blx	r3

  return USBD_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 fee9 	bl	8009cd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f0e:	461a      	mov	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f1c:	f003 031f 	and.w	r3, r3, #31
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d016      	beq.n	8008f52 <USBD_LL_SetupStage+0x6a>
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d81c      	bhi.n	8008f62 <USBD_LL_SetupStage+0x7a>
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <USBD_LL_SetupStage+0x4a>
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d008      	beq.n	8008f42 <USBD_LL_SetupStage+0x5a>
 8008f30:	e017      	b.n	8008f62 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f9ca 	bl	80092d4 <USBD_StdDevReq>
      break;
 8008f40:	e01a      	b.n	8008f78 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa2c 	bl	80093a8 <USBD_StdItfReq>
      break;
 8008f50:	e012      	b.n	8008f78 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fa6c 	bl	8009438 <USBD_StdEPReq>
      break;
 8008f60:	e00a      	b.n	8008f78 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 fabd 	bl	800a4f0 <USBD_LL_StallEP>
      break;
 8008f76:	bf00      	nop
  }

  return USBD_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b086      	sub	sp, #24
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	607a      	str	r2, [r7, #4]
 8008f8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d14b      	bne.n	800902e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008f9c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d134      	bne.n	8009012 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d919      	bls.n	8008fe8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	68da      	ldr	r2, [r3, #12]
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	1ad2      	subs	r2, r2, r3
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d203      	bcs.n	8008fd6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	e002      	b.n	8008fdc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 ff68 	bl	8009eb6 <USBD_CtlContinueRx>
 8008fe6:	e038      	b.n	800905a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00a      	beq.n	800900a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d105      	bne.n	800900a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 ff65 	bl	8009eda <USBD_CtlSendStatus>
 8009010:	e023      	b.n	800905a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009018:	2b05      	cmp	r3, #5
 800901a:	d11e      	bne.n	800905a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009024:	2100      	movs	r1, #0
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f001 fa62 	bl	800a4f0 <USBD_LL_StallEP>
 800902c:	e015      	b.n	800905a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00d      	beq.n	8009056 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009040:	2b03      	cmp	r3, #3
 8009042:	d108      	bne.n	8009056 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	7afa      	ldrb	r2, [r7, #11]
 800904e:	4611      	mov	r1, r2
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	4798      	blx	r3
 8009054:	e001      	b.n	800905a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009056:	2302      	movs	r3, #2
 8009058:	e000      	b.n	800905c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	460b      	mov	r3, r1
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d17f      	bne.n	8009178 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3314      	adds	r3, #20
 800907c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009084:	2b02      	cmp	r3, #2
 8009086:	d15c      	bne.n	8009142 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	429a      	cmp	r2, r3
 8009092:	d915      	bls.n	80090c0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	1ad2      	subs	r2, r2, r3
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	461a      	mov	r2, r3
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fed2 	bl	8009e56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090b2:	2300      	movs	r3, #0
 80090b4:	2200      	movs	r2, #0
 80090b6:	2100      	movs	r1, #0
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f001 fac5 	bl	800a648 <USBD_LL_PrepareReceive>
 80090be:	e04e      	b.n	800915e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	6912      	ldr	r2, [r2, #16]
 80090c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80090cc:	fb01 f202 	mul.w	r2, r1, r2
 80090d0:	1a9b      	subs	r3, r3, r2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d11c      	bne.n	8009110 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	689a      	ldr	r2, [r3, #8]
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090de:	429a      	cmp	r2, r3
 80090e0:	d316      	bcc.n	8009110 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	689a      	ldr	r2, [r3, #8]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d20f      	bcs.n	8009110 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80090f0:	2200      	movs	r2, #0
 80090f2:	2100      	movs	r1, #0
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 feae 	bl	8009e56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009102:	2300      	movs	r3, #0
 8009104:	2200      	movs	r2, #0
 8009106:	2100      	movs	r1, #0
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f001 fa9d 	bl	800a648 <USBD_LL_PrepareReceive>
 800910e:	e026      	b.n	800915e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009122:	2b03      	cmp	r3, #3
 8009124:	d105      	bne.n	8009132 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009132:	2180      	movs	r1, #128	; 0x80
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f001 f9db 	bl	800a4f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 fee0 	bl	8009f00 <USBD_CtlReceiveStatus>
 8009140:	e00d      	b.n	800915e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009148:	2b04      	cmp	r3, #4
 800914a:	d004      	beq.n	8009156 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009152:	2b00      	cmp	r3, #0
 8009154:	d103      	bne.n	800915e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009156:	2180      	movs	r1, #128	; 0x80
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f001 f9c9 	bl	800a4f0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009164:	2b01      	cmp	r3, #1
 8009166:	d11d      	bne.n	80091a4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f7ff fe81 	bl	8008e70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009176:	e015      	b.n	80091a4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00d      	beq.n	80091a0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800918a:	2b03      	cmp	r3, #3
 800918c:	d108      	bne.n	80091a0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	7afa      	ldrb	r2, [r7, #11]
 8009198:	4611      	mov	r1, r2
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	4798      	blx	r3
 800919e:	e001      	b.n	80091a4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091a0:	2302      	movs	r3, #2
 80091a2:	e000      	b.n	80091a6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091b6:	2340      	movs	r3, #64	; 0x40
 80091b8:	2200      	movs	r2, #0
 80091ba:	2100      	movs	r1, #0
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f001 f971 	bl	800a4a4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2240      	movs	r2, #64	; 0x40
 80091ce:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091d2:	2340      	movs	r3, #64	; 0x40
 80091d4:	2200      	movs	r2, #0
 80091d6:	2180      	movs	r1, #128	; 0x80
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 f963 	bl	800a4a4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2240      	movs	r2, #64	; 0x40
 80091e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6852      	ldr	r2, [r2, #4]
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	4611      	mov	r1, r2
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	4798      	blx	r3
  }

  return USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	78fa      	ldrb	r2, [r7, #3]
 8009240:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	bc80      	pop	{r7}
 800924c:	4770      	bx	lr

0800924e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2204      	movs	r2, #4
 8009266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	bc80      	pop	{r7}
 8009274:	4770      	bx	lr

08009276 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009284:	2b04      	cmp	r3, #4
 8009286:	d105      	bne.n	8009294 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	bc80      	pop	{r7}
 800929e:	4770      	bx	lr

080092a0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d10b      	bne.n	80092ca <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d005      	beq.n	80092ca <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092ea:	2b40      	cmp	r3, #64	; 0x40
 80092ec:	d005      	beq.n	80092fa <USBD_StdDevReq+0x26>
 80092ee:	2b40      	cmp	r3, #64	; 0x40
 80092f0:	d84f      	bhi.n	8009392 <USBD_StdDevReq+0xbe>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d009      	beq.n	800930a <USBD_StdDevReq+0x36>
 80092f6:	2b20      	cmp	r3, #32
 80092f8:	d14b      	bne.n	8009392 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	4798      	blx	r3
      break;
 8009308:	e048      	b.n	800939c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	785b      	ldrb	r3, [r3, #1]
 800930e:	2b09      	cmp	r3, #9
 8009310:	d839      	bhi.n	8009386 <USBD_StdDevReq+0xb2>
 8009312:	a201      	add	r2, pc, #4	; (adr r2, 8009318 <USBD_StdDevReq+0x44>)
 8009314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009318:	08009369 	.word	0x08009369
 800931c:	0800937d 	.word	0x0800937d
 8009320:	08009387 	.word	0x08009387
 8009324:	08009373 	.word	0x08009373
 8009328:	08009387 	.word	0x08009387
 800932c:	0800934b 	.word	0x0800934b
 8009330:	08009341 	.word	0x08009341
 8009334:	08009387 	.word	0x08009387
 8009338:	0800935f 	.word	0x0800935f
 800933c:	08009355 	.word	0x08009355
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f9dc 	bl	8009700 <USBD_GetDescriptor>
          break;
 8009348:	e022      	b.n	8009390 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fb51 	bl	80099f4 <USBD_SetAddress>
          break;
 8009352:	e01d      	b.n	8009390 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fb90 	bl	8009a7c <USBD_SetConfig>
          break;
 800935c:	e018      	b.n	8009390 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fc19 	bl	8009b98 <USBD_GetConfig>
          break;
 8009366:	e013      	b.n	8009390 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fc49 	bl	8009c02 <USBD_GetStatus>
          break;
 8009370:	e00e      	b.n	8009390 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fc77 	bl	8009c68 <USBD_SetFeature>
          break;
 800937a:	e009      	b.n	8009390 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fc86 	bl	8009c90 <USBD_ClrFeature>
          break;
 8009384:	e004      	b.n	8009390 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fcde 	bl	8009d4a <USBD_CtlError>
          break;
 800938e:	bf00      	nop
      }
      break;
 8009390:	e004      	b.n	800939c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fcd8 	bl	8009d4a <USBD_CtlError>
      break;
 800939a:	bf00      	nop
  }

  return ret;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop

080093a8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093be:	2b40      	cmp	r3, #64	; 0x40
 80093c0:	d005      	beq.n	80093ce <USBD_StdItfReq+0x26>
 80093c2:	2b40      	cmp	r3, #64	; 0x40
 80093c4:	d82e      	bhi.n	8009424 <USBD_StdItfReq+0x7c>
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <USBD_StdItfReq+0x26>
 80093ca:	2b20      	cmp	r3, #32
 80093cc:	d12a      	bne.n	8009424 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d4:	3b01      	subs	r3, #1
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d81d      	bhi.n	8009416 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	889b      	ldrh	r3, [r3, #4]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d813      	bhi.n	800940c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	4798      	blx	r3
 80093f2:	4603      	mov	r3, r0
 80093f4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	88db      	ldrh	r3, [r3, #6]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d110      	bne.n	8009420 <USBD_StdItfReq+0x78>
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10d      	bne.n	8009420 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fd68 	bl	8009eda <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800940a:	e009      	b.n	8009420 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fc9b 	bl	8009d4a <USBD_CtlError>
          break;
 8009414:	e004      	b.n	8009420 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fc96 	bl	8009d4a <USBD_CtlError>
          break;
 800941e:	e000      	b.n	8009422 <USBD_StdItfReq+0x7a>
          break;
 8009420:	bf00      	nop
      }
      break;
 8009422:	e004      	b.n	800942e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fc8f 	bl	8009d4a <USBD_CtlError>
      break;
 800942c:	bf00      	nop
  }

  return USBD_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	889b      	ldrh	r3, [r3, #4]
 800944a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009454:	2b40      	cmp	r3, #64	; 0x40
 8009456:	d007      	beq.n	8009468 <USBD_StdEPReq+0x30>
 8009458:	2b40      	cmp	r3, #64	; 0x40
 800945a:	f200 8146 	bhi.w	80096ea <USBD_StdEPReq+0x2b2>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00a      	beq.n	8009478 <USBD_StdEPReq+0x40>
 8009462:	2b20      	cmp	r3, #32
 8009464:	f040 8141 	bne.w	80096ea <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
      break;
 8009476:	e13d      	b.n	80096f4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009480:	2b20      	cmp	r3, #32
 8009482:	d10a      	bne.n	800949a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	4798      	blx	r3
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	e12d      	b.n	80096f6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	785b      	ldrb	r3, [r3, #1]
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d007      	beq.n	80094b2 <USBD_StdEPReq+0x7a>
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	f300 811b 	bgt.w	80096de <USBD_StdEPReq+0x2a6>
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d072      	beq.n	8009592 <USBD_StdEPReq+0x15a>
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d03a      	beq.n	8009526 <USBD_StdEPReq+0xee>
 80094b0:	e115      	b.n	80096de <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d002      	beq.n	80094c2 <USBD_StdEPReq+0x8a>
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d015      	beq.n	80094ec <USBD_StdEPReq+0xb4>
 80094c0:	e02b      	b.n	800951a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00c      	beq.n	80094e2 <USBD_StdEPReq+0xaa>
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
 80094ca:	2b80      	cmp	r3, #128	; 0x80
 80094cc:	d009      	beq.n	80094e2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f001 f80c 	bl	800a4f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094d8:	2180      	movs	r1, #128	; 0x80
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 f808 	bl	800a4f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094e0:	e020      	b.n	8009524 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fc30 	bl	8009d4a <USBD_CtlError>
              break;
 80094ea:	e01b      	b.n	8009524 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	885b      	ldrh	r3, [r3, #2]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10e      	bne.n	8009512 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00b      	beq.n	8009512 <USBD_StdEPReq+0xda>
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	2b80      	cmp	r3, #128	; 0x80
 80094fe:	d008      	beq.n	8009512 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	88db      	ldrh	r3, [r3, #6]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d104      	bne.n	8009512 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 ffef 	bl	800a4f0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fce1 	bl	8009eda <USBD_CtlSendStatus>

              break;
 8009518:	e004      	b.n	8009524 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fc14 	bl	8009d4a <USBD_CtlError>
              break;
 8009522:	bf00      	nop
          }
          break;
 8009524:	e0e0      	b.n	80096e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800952c:	2b02      	cmp	r3, #2
 800952e:	d002      	beq.n	8009536 <USBD_StdEPReq+0xfe>
 8009530:	2b03      	cmp	r3, #3
 8009532:	d015      	beq.n	8009560 <USBD_StdEPReq+0x128>
 8009534:	e026      	b.n	8009584 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00c      	beq.n	8009556 <USBD_StdEPReq+0x11e>
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	2b80      	cmp	r3, #128	; 0x80
 8009540:	d009      	beq.n	8009556 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 ffd2 	bl	800a4f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800954c:	2180      	movs	r1, #128	; 0x80
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 ffce 	bl	800a4f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009554:	e01c      	b.n	8009590 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fbf6 	bl	8009d4a <USBD_CtlError>
              break;
 800955e:	e017      	b.n	8009590 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	885b      	ldrh	r3, [r3, #2]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d112      	bne.n	800958e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009568:	7bbb      	ldrb	r3, [r7, #14]
 800956a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 ffd9 	bl	800a52e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fcac 	bl	8009eda <USBD_CtlSendStatus>
              }
              break;
 8009582:	e004      	b.n	800958e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fbdf 	bl	8009d4a <USBD_CtlError>
              break;
 800958c:	e000      	b.n	8009590 <USBD_StdEPReq+0x158>
              break;
 800958e:	bf00      	nop
          }
          break;
 8009590:	e0aa      	b.n	80096e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009598:	2b02      	cmp	r3, #2
 800959a:	d002      	beq.n	80095a2 <USBD_StdEPReq+0x16a>
 800959c:	2b03      	cmp	r3, #3
 800959e:	d032      	beq.n	8009606 <USBD_StdEPReq+0x1ce>
 80095a0:	e097      	b.n	80096d2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d007      	beq.n	80095b8 <USBD_StdEPReq+0x180>
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	2b80      	cmp	r3, #128	; 0x80
 80095ac:	d004      	beq.n	80095b8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fbca 	bl	8009d4a <USBD_CtlError>
                break;
 80095b6:	e091      	b.n	80096dc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	da0b      	bge.n	80095d8 <USBD_StdEPReq+0x1a0>
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	3310      	adds	r3, #16
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	4413      	add	r3, r2
 80095d4:	3304      	adds	r3, #4
 80095d6:	e00b      	b.n	80095f0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	4413      	add	r3, r2
 80095ee:	3304      	adds	r3, #4
 80095f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	2200      	movs	r2, #0
 80095f6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2202      	movs	r2, #2
 80095fc:	4619      	mov	r1, r3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fc0d 	bl	8009e1e <USBD_CtlSendData>
              break;
 8009604:	e06a      	b.n	80096dc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800960a:	2b00      	cmp	r3, #0
 800960c:	da11      	bge.n	8009632 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800960e:	7bbb      	ldrb	r3, [r7, #14]
 8009610:	f003 020f 	and.w	r2, r3, #15
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	440b      	add	r3, r1
 8009620:	3318      	adds	r3, #24
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d117      	bne.n	8009658 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fb8d 	bl	8009d4a <USBD_CtlError>
                  break;
 8009630:	e054      	b.n	80096dc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	f003 020f 	and.w	r2, r3, #15
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	440b      	add	r3, r1
 8009644:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d104      	bne.n	8009658 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fb7a 	bl	8009d4a <USBD_CtlError>
                  break;
 8009656:	e041      	b.n	80096dc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800965c:	2b00      	cmp	r3, #0
 800965e:	da0b      	bge.n	8009678 <USBD_StdEPReq+0x240>
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009666:	4613      	mov	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	3310      	adds	r3, #16
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	4413      	add	r3, r2
 8009674:	3304      	adds	r3, #4
 8009676:	e00b      	b.n	8009690 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	4413      	add	r3, r2
 800968e:	3304      	adds	r3, #4
 8009690:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009692:	7bbb      	ldrb	r3, [r7, #14]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <USBD_StdEPReq+0x266>
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	2b80      	cmp	r3, #128	; 0x80
 800969c:	d103      	bne.n	80096a6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2200      	movs	r2, #0
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	e00e      	b.n	80096c4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 ff5e 	bl	800a56c <USBD_LL_IsStallEP>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2201      	movs	r2, #1
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	e002      	b.n	80096c4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2202      	movs	r2, #2
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fba7 	bl	8009e1e <USBD_CtlSendData>
              break;
 80096d0:	e004      	b.n	80096dc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fb38 	bl	8009d4a <USBD_CtlError>
              break;
 80096da:	bf00      	nop
          }
          break;
 80096dc:	e004      	b.n	80096e8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fb32 	bl	8009d4a <USBD_CtlError>
          break;
 80096e6:	bf00      	nop
      }
      break;
 80096e8:	e004      	b.n	80096f4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fb2c 	bl	8009d4a <USBD_CtlError>
      break;
 80096f2:	bf00      	nop
  }

  return ret;
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800970a:	2300      	movs	r3, #0
 800970c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800970e:	2300      	movs	r3, #0
 8009710:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009712:	2300      	movs	r3, #0
 8009714:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	885b      	ldrh	r3, [r3, #2]
 800971a:	0a1b      	lsrs	r3, r3, #8
 800971c:	b29b      	uxth	r3, r3
 800971e:	3b01      	subs	r3, #1
 8009720:	2b06      	cmp	r3, #6
 8009722:	f200 813b 	bhi.w	800999c <USBD_GetDescriptor+0x29c>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <USBD_GetDescriptor+0x2c>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	08009749 	.word	0x08009749
 8009730:	08009761 	.word	0x08009761
 8009734:	080097a1 	.word	0x080097a1
 8009738:	0800999d 	.word	0x0800999d
 800973c:	0800999d 	.word	0x0800999d
 8009740:	0800993d 	.word	0x0800993d
 8009744:	08009969 	.word	0x08009969
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	7c12      	ldrb	r2, [r2, #16]
 8009754:	f107 0108 	add.w	r1, r7, #8
 8009758:	4610      	mov	r0, r2
 800975a:	4798      	blx	r3
 800975c:	60f8      	str	r0, [r7, #12]
      break;
 800975e:	e125      	b.n	80099ac <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	7c1b      	ldrb	r3, [r3, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10d      	bne.n	8009784 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800976e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009770:	f107 0208 	add.w	r2, r7, #8
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
 8009778:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3301      	adds	r3, #1
 800977e:	2202      	movs	r2, #2
 8009780:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009782:	e113      	b.n	80099ac <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	f107 0208 	add.w	r2, r7, #8
 8009790:	4610      	mov	r0, r2
 8009792:	4798      	blx	r3
 8009794:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3301      	adds	r3, #1
 800979a:	2202      	movs	r2, #2
 800979c:	701a      	strb	r2, [r3, #0]
      break;
 800979e:	e105      	b.n	80099ac <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	885b      	ldrh	r3, [r3, #2]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	f200 80ac 	bhi.w	8009904 <USBD_GetDescriptor+0x204>
 80097ac:	a201      	add	r2, pc, #4	; (adr r2, 80097b4 <USBD_GetDescriptor+0xb4>)
 80097ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b2:	bf00      	nop
 80097b4:	080097cd 	.word	0x080097cd
 80097b8:	08009801 	.word	0x08009801
 80097bc:	08009835 	.word	0x08009835
 80097c0:	08009869 	.word	0x08009869
 80097c4:	0800989d 	.word	0x0800989d
 80097c8:	080098d1 	.word	0x080098d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00b      	beq.n	80097f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	7c12      	ldrb	r2, [r2, #16]
 80097e4:	f107 0108 	add.w	r1, r7, #8
 80097e8:	4610      	mov	r0, r2
 80097ea:	4798      	blx	r3
 80097ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ee:	e0a4      	b.n	800993a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 faa9 	bl	8009d4a <USBD_CtlError>
            err++;
 80097f8:	7afb      	ldrb	r3, [r7, #11]
 80097fa:	3301      	adds	r3, #1
 80097fc:	72fb      	strb	r3, [r7, #11]
          break;
 80097fe:	e09c      	b.n	800993a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00b      	beq.n	8009824 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	7c12      	ldrb	r2, [r2, #16]
 8009818:	f107 0108 	add.w	r1, r7, #8
 800981c:	4610      	mov	r0, r2
 800981e:	4798      	blx	r3
 8009820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009822:	e08a      	b.n	800993a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fa8f 	bl	8009d4a <USBD_CtlError>
            err++;
 800982c:	7afb      	ldrb	r3, [r7, #11]
 800982e:	3301      	adds	r3, #1
 8009830:	72fb      	strb	r3, [r7, #11]
          break;
 8009832:	e082      	b.n	800993a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00b      	beq.n	8009858 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	7c12      	ldrb	r2, [r2, #16]
 800984c:	f107 0108 	add.w	r1, r7, #8
 8009850:	4610      	mov	r0, r2
 8009852:	4798      	blx	r3
 8009854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009856:	e070      	b.n	800993a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fa75 	bl	8009d4a <USBD_CtlError>
            err++;
 8009860:	7afb      	ldrb	r3, [r7, #11]
 8009862:	3301      	adds	r3, #1
 8009864:	72fb      	strb	r3, [r7, #11]
          break;
 8009866:	e068      	b.n	800993a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00b      	beq.n	800988c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	7c12      	ldrb	r2, [r2, #16]
 8009880:	f107 0108 	add.w	r1, r7, #8
 8009884:	4610      	mov	r0, r2
 8009886:	4798      	blx	r3
 8009888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800988a:	e056      	b.n	800993a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fa5b 	bl	8009d4a <USBD_CtlError>
            err++;
 8009894:	7afb      	ldrb	r3, [r7, #11]
 8009896:	3301      	adds	r3, #1
 8009898:	72fb      	strb	r3, [r7, #11]
          break;
 800989a:	e04e      	b.n	800993a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00b      	beq.n	80098c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	7c12      	ldrb	r2, [r2, #16]
 80098b4:	f107 0108 	add.w	r1, r7, #8
 80098b8:	4610      	mov	r0, r2
 80098ba:	4798      	blx	r3
 80098bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098be:	e03c      	b.n	800993a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80098c0:	6839      	ldr	r1, [r7, #0]
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fa41 	bl	8009d4a <USBD_CtlError>
            err++;
 80098c8:	7afb      	ldrb	r3, [r7, #11]
 80098ca:	3301      	adds	r3, #1
 80098cc:	72fb      	strb	r3, [r7, #11]
          break;
 80098ce:	e034      	b.n	800993a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00b      	beq.n	80098f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	7c12      	ldrb	r2, [r2, #16]
 80098e8:	f107 0108 	add.w	r1, r7, #8
 80098ec:	4610      	mov	r0, r2
 80098ee:	4798      	blx	r3
 80098f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098f2:	e022      	b.n	800993a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fa27 	bl	8009d4a <USBD_CtlError>
            err++;
 80098fc:	7afb      	ldrb	r3, [r7, #11]
 80098fe:	3301      	adds	r3, #1
 8009900:	72fb      	strb	r3, [r7, #11]
          break;
 8009902:	e01a      	b.n	800993a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00c      	beq.n	800992a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	8852      	ldrh	r2, [r2, #2]
 800991c:	b2d1      	uxtb	r1, r2
 800991e:	f107 0208 	add.w	r2, r7, #8
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	4798      	blx	r3
 8009926:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009928:	e006      	b.n	8009938 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fa0c 	bl	8009d4a <USBD_CtlError>
            err++;
 8009932:	7afb      	ldrb	r3, [r7, #11]
 8009934:	3301      	adds	r3, #1
 8009936:	72fb      	strb	r3, [r7, #11]
          break;
 8009938:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 800993a:	e037      	b.n	80099ac <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	7c1b      	ldrb	r3, [r3, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d109      	bne.n	8009958 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994c:	f107 0208 	add.w	r2, r7, #8
 8009950:	4610      	mov	r0, r2
 8009952:	4798      	blx	r3
 8009954:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009956:	e029      	b.n	80099ac <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f9f5 	bl	8009d4a <USBD_CtlError>
        err++;
 8009960:	7afb      	ldrb	r3, [r7, #11]
 8009962:	3301      	adds	r3, #1
 8009964:	72fb      	strb	r3, [r7, #11]
      break;
 8009966:	e021      	b.n	80099ac <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	7c1b      	ldrb	r3, [r3, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10d      	bne.n	800998c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009978:	f107 0208 	add.w	r2, r7, #8
 800997c:	4610      	mov	r0, r2
 800997e:	4798      	blx	r3
 8009980:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3301      	adds	r3, #1
 8009986:	2207      	movs	r2, #7
 8009988:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800998a:	e00f      	b.n	80099ac <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f9db 	bl	8009d4a <USBD_CtlError>
        err++;
 8009994:	7afb      	ldrb	r3, [r7, #11]
 8009996:	3301      	adds	r3, #1
 8009998:	72fb      	strb	r3, [r7, #11]
      break;
 800999a:	e007      	b.n	80099ac <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f9d3 	bl	8009d4a <USBD_CtlError>
      err++;
 80099a4:	7afb      	ldrb	r3, [r7, #11]
 80099a6:	3301      	adds	r3, #1
 80099a8:	72fb      	strb	r3, [r7, #11]
      break;
 80099aa:	bf00      	nop
  }

  if (err != 0U)
 80099ac:	7afb      	ldrb	r3, [r7, #11]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d11c      	bne.n	80099ec <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80099b2:	893b      	ldrh	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d011      	beq.n	80099dc <USBD_GetDescriptor+0x2dc>
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	88db      	ldrh	r3, [r3, #6]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00d      	beq.n	80099dc <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	88da      	ldrh	r2, [r3, #6]
 80099c4:	893b      	ldrh	r3, [r7, #8]
 80099c6:	4293      	cmp	r3, r2
 80099c8:	bf28      	it	cs
 80099ca:	4613      	movcs	r3, r2
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099d0:	893b      	ldrh	r3, [r7, #8]
 80099d2:	461a      	mov	r2, r3
 80099d4:	68f9      	ldr	r1, [r7, #12]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fa21 	bl	8009e1e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	88db      	ldrh	r3, [r3, #6]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d104      	bne.n	80099ee <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fa78 	bl	8009eda <USBD_CtlSendStatus>
 80099ea:	e000      	b.n	80099ee <USBD_GetDescriptor+0x2ee>
    return;
 80099ec:	bf00      	nop
    }
  }
}
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	889b      	ldrh	r3, [r3, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d130      	bne.n	8009a68 <USBD_SetAddress+0x74>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	88db      	ldrh	r3, [r3, #6]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d12c      	bne.n	8009a68 <USBD_SetAddress+0x74>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	885b      	ldrh	r3, [r3, #2]
 8009a12:	2b7f      	cmp	r3, #127	; 0x7f
 8009a14:	d828      	bhi.n	8009a68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	885b      	ldrh	r3, [r3, #2]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d104      	bne.n	8009a36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f98b 	bl	8009d4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a34:	e01d      	b.n	8009a72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	7bfa      	ldrb	r2, [r7, #15]
 8009a3a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fdbe 	bl	800a5c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fa46 	bl	8009eda <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d004      	beq.n	8009a5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a5c:	e009      	b.n	8009a72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a66:	e004      	b.n	8009a72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f96d 	bl	8009d4a <USBD_CtlError>
  }
}
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	885b      	ldrh	r3, [r3, #2]
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	4b41      	ldr	r3, [pc, #260]	; (8009b94 <USBD_SetConfig+0x118>)
 8009a8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a90:	4b40      	ldr	r3, [pc, #256]	; (8009b94 <USBD_SetConfig+0x118>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d904      	bls.n	8009aa2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f955 	bl	8009d4a <USBD_CtlError>
 8009aa0:	e075      	b.n	8009b8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d002      	beq.n	8009ab2 <USBD_SetConfig+0x36>
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d023      	beq.n	8009af8 <USBD_SetConfig+0x7c>
 8009ab0:	e062      	b.n	8009b78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009ab2:	4b38      	ldr	r3, [pc, #224]	; (8009b94 <USBD_SetConfig+0x118>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d01a      	beq.n	8009af0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009aba:	4b36      	ldr	r3, [pc, #216]	; (8009b94 <USBD_SetConfig+0x118>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2203      	movs	r2, #3
 8009ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009acc:	4b31      	ldr	r3, [pc, #196]	; (8009b94 <USBD_SetConfig+0x118>)
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7ff f9d6 	bl	8008e84 <USBD_SetClassConfig>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d104      	bne.n	8009ae8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f932 	bl	8009d4a <USBD_CtlError>
            return;
 8009ae6:	e052      	b.n	8009b8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f9f6 	bl	8009eda <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009aee:	e04e      	b.n	8009b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f9f2 	bl	8009eda <USBD_CtlSendStatus>
        break;
 8009af6:	e04a      	b.n	8009b8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009af8:	4b26      	ldr	r3, [pc, #152]	; (8009b94 <USBD_SetConfig+0x118>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d112      	bne.n	8009b26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009b08:	4b22      	ldr	r3, [pc, #136]	; (8009b94 <USBD_SetConfig+0x118>)
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b12:	4b20      	ldr	r3, [pc, #128]	; (8009b94 <USBD_SetConfig+0x118>)
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff f9d2 	bl	8008ec2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f9db 	bl	8009eda <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b24:	e033      	b.n	8009b8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b26:	4b1b      	ldr	r3, [pc, #108]	; (8009b94 <USBD_SetConfig+0x118>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d01d      	beq.n	8009b70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff f9c0 	bl	8008ec2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b42:	4b14      	ldr	r3, [pc, #80]	; (8009b94 <USBD_SetConfig+0x118>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	461a      	mov	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b4c:	4b11      	ldr	r3, [pc, #68]	; (8009b94 <USBD_SetConfig+0x118>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff f996 	bl	8008e84 <USBD_SetClassConfig>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d104      	bne.n	8009b68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f8f2 	bl	8009d4a <USBD_CtlError>
            return;
 8009b66:	e012      	b.n	8009b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f9b6 	bl	8009eda <USBD_CtlSendStatus>
        break;
 8009b6e:	e00e      	b.n	8009b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f9b2 	bl	8009eda <USBD_CtlSendStatus>
        break;
 8009b76:	e00a      	b.n	8009b8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f8e5 	bl	8009d4a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b80:	4b04      	ldr	r3, [pc, #16]	; (8009b94 <USBD_SetConfig+0x118>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff f99b 	bl	8008ec2 <USBD_ClrClassConfig>
        break;
 8009b8c:	bf00      	nop
    }
  }
}
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	2000063f 	.word	0x2000063f

08009b98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88db      	ldrh	r3, [r3, #6]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d004      	beq.n	8009bb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f8cc 	bl	8009d4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bb2:	e022      	b.n	8009bfa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	dc02      	bgt.n	8009bc4 <USBD_GetConfig+0x2c>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	dc03      	bgt.n	8009bca <USBD_GetConfig+0x32>
 8009bc2:	e015      	b.n	8009bf0 <USBD_GetConfig+0x58>
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d00b      	beq.n	8009be0 <USBD_GetConfig+0x48>
 8009bc8:	e012      	b.n	8009bf0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f920 	bl	8009e1e <USBD_CtlSendData>
        break;
 8009bde:	e00c      	b.n	8009bfa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	2201      	movs	r2, #1
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f918 	bl	8009e1e <USBD_CtlSendData>
        break;
 8009bee:	e004      	b.n	8009bfa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f8a9 	bl	8009d4a <USBD_CtlError>
        break;
 8009bf8:	bf00      	nop
}
 8009bfa:	bf00      	nop
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c12:	3b01      	subs	r3, #1
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d81e      	bhi.n	8009c56 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	88db      	ldrh	r3, [r3, #6]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d004      	beq.n	8009c2a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f891 	bl	8009d4a <USBD_CtlError>
        break;
 8009c28:	e01a      	b.n	8009c60 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d005      	beq.n	8009c46 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	f043 0202 	orr.w	r2, r3, #2
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	330c      	adds	r3, #12
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f8e5 	bl	8009e1e <USBD_CtlSendData>
      break;
 8009c54:	e004      	b.n	8009c60 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c56:	6839      	ldr	r1, [r7, #0]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f876 	bl	8009d4a <USBD_CtlError>
      break;
 8009c5e:	bf00      	nop
  }
}
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	885b      	ldrh	r3, [r3, #2]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d106      	bne.n	8009c88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f929 	bl	8009eda <USBD_CtlSendStatus>
  }
}
 8009c88:	bf00      	nop
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d80b      	bhi.n	8009cbe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	885b      	ldrh	r3, [r3, #2]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d10c      	bne.n	8009cc8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f90f 	bl	8009eda <USBD_CtlSendStatus>
      }
      break;
 8009cbc:	e004      	b.n	8009cc8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f842 	bl	8009d4a <USBD_CtlError>
      break;
 8009cc6:	e000      	b.n	8009cca <USBD_ClrFeature+0x3a>
      break;
 8009cc8:	bf00      	nop
  }
}
 8009cca:	bf00      	nop
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781a      	ldrb	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	785a      	ldrb	r2, [r3, #1]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	3302      	adds	r3, #2
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	3303      	adds	r3, #3
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	021b      	lsls	r3, r3, #8
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	4413      	add	r3, r2
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	3305      	adds	r3, #5
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	021b      	lsls	r3, r3, #8
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	4413      	add	r3, r2
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	3306      	adds	r3, #6
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	3307      	adds	r3, #7
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	021b      	lsls	r3, r3, #8
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	4413      	add	r3, r2
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	80da      	strh	r2, [r3, #6]

}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bc80      	pop	{r7}
 8009d48:	4770      	bx	lr

08009d4a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b082      	sub	sp, #8
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d54:	2180      	movs	r1, #128	; 0x80
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fbca 	bl	800a4f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fbc6 	bl	800a4f0 <USBD_LL_StallEP>
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d032      	beq.n	8009de8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f000 f834 	bl	8009df0 <USBD_GetLen>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	75fa      	strb	r2, [r7, #23]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	4413      	add	r3, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	7812      	ldrb	r2, [r2, #0]
 8009da6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	75fa      	strb	r2, [r7, #23]
 8009dae:	461a      	mov	r2, r3
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	4413      	add	r3, r2
 8009db4:	2203      	movs	r2, #3
 8009db6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009db8:	e012      	b.n	8009de0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	60fa      	str	r2, [r7, #12]
 8009dc0:	7dfa      	ldrb	r2, [r7, #23]
 8009dc2:	1c51      	adds	r1, r2, #1
 8009dc4:	75f9      	strb	r1, [r7, #23]
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	440a      	add	r2, r1
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	75fa      	strb	r2, [r7, #23]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	4413      	add	r3, r2
 8009ddc:	2200      	movs	r2, #0
 8009dde:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e8      	bne.n	8009dba <USBD_GetString+0x4e>
    }
  }
}
 8009de8:	bf00      	nop
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009dfc:	e005      	b.n	8009e0a <USBD_GetLen+0x1a>
  {
    len++;
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	3301      	adds	r3, #1
 8009e02:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3301      	adds	r3, #1
 8009e08:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1f5      	bne.n	8009dfe <USBD_GetLen+0xe>
  }

  return len;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bc80      	pop	{r7}
 8009e1c:	4770      	bx	lr

08009e1e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e34:	88fa      	ldrh	r2, [r7, #6]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e3a:	88fa      	ldrh	r2, [r7, #6]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e40:	88fb      	ldrh	r3, [r7, #6]
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	2100      	movs	r1, #0
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f000 fbdb 	bl	800a602 <USBD_LL_Transmit>

  return USBD_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b084      	sub	sp, #16
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	60f8      	str	r0, [r7, #12]
 8009e5e:	60b9      	str	r1, [r7, #8]
 8009e60:	4613      	mov	r3, r2
 8009e62:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e64:	88fb      	ldrh	r3, [r7, #6]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	2100      	movs	r1, #0
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 fbc9 	bl	800a602 <USBD_LL_Transmit>

  return USBD_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	4613      	mov	r3, r2
 8009e86:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2203      	movs	r2, #3
 8009e8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009e90:	88fa      	ldrh	r2, [r7, #6]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e98:	88fa      	ldrh	r2, [r7, #6]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ea0:	88fb      	ldrh	r3, [r7, #6]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f000 fbce 	bl	800a648 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	60b9      	str	r1, [r7, #8]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ec4:	88fb      	ldrh	r3, [r7, #6]
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	2100      	movs	r1, #0
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 fbbc 	bl	800a648 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b082      	sub	sp, #8
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2204      	movs	r2, #4
 8009ee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009eea:	2300      	movs	r3, #0
 8009eec:	2200      	movs	r2, #0
 8009eee:	2100      	movs	r1, #0
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fb86 	bl	800a602 <USBD_LL_Transmit>

  return USBD_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2205      	movs	r2, #5
 8009f0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f10:	2300      	movs	r3, #0
 8009f12:	2200      	movs	r2, #0
 8009f14:	2100      	movs	r1, #0
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fb96 	bl	800a648 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
	...

08009f28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4912      	ldr	r1, [pc, #72]	; (8009f78 <MX_USB_DEVICE_Init+0x50>)
 8009f30:	4812      	ldr	r0, [pc, #72]	; (8009f7c <MX_USB_DEVICE_Init+0x54>)
 8009f32:	f7fe ff1d 	bl	8008d70 <USBD_Init>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f3c:	f7f6 fd3a 	bl	80009b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8009f40:	490f      	ldr	r1, [pc, #60]	; (8009f80 <MX_USB_DEVICE_Init+0x58>)
 8009f42:	480e      	ldr	r0, [pc, #56]	; (8009f7c <MX_USB_DEVICE_Init+0x54>)
 8009f44:	f7fe ff4c 	bl	8008de0 <USBD_RegisterClass>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f4e:	f7f6 fd31 	bl	80009b4 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8009f52:	490c      	ldr	r1, [pc, #48]	; (8009f84 <MX_USB_DEVICE_Init+0x5c>)
 8009f54:	4809      	ldr	r0, [pc, #36]	; (8009f7c <MX_USB_DEVICE_Init+0x54>)
 8009f56:	f7fe fba7 	bl	80086a8 <USBD_DFU_RegisterMedia>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f60:	f7f6 fd28 	bl	80009b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f64:	4805      	ldr	r0, [pc, #20]	; (8009f7c <MX_USB_DEVICE_Init+0x54>)
 8009f66:	f7fe ff61 	bl	8008e2c <USBD_Start>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f70:	f7f6 fd20 	bl	80009b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f74:	bf00      	nop
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	20000070 	.word	0x20000070
 8009f7c:	20000640 	.word	0x20000640
 8009f80:	2000000c 	.word	0x2000000c
 8009f84:	200000c0 	.word	0x200000c0

08009f88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	4603      	mov	r3, r0
 8009f90:	6039      	str	r1, [r7, #0]
 8009f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2212      	movs	r2, #18
 8009f98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f9a:	4b03      	ldr	r3, [pc, #12]	; (8009fa8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bc80      	pop	{r7}
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	2000008c 	.word	0x2000008c

08009fac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	6039      	str	r1, [r7, #0]
 8009fb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2204      	movs	r2, #4
 8009fbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009fbe:	4b03      	ldr	r3, [pc, #12]	; (8009fcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bc80      	pop	{r7}
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	200000a0 	.word	0x200000a0

08009fd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	6039      	str	r1, [r7, #0]
 8009fda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d105      	bne.n	8009fee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	4907      	ldr	r1, [pc, #28]	; (800a004 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fe6:	4808      	ldr	r0, [pc, #32]	; (800a008 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fe8:	f7ff fec0 	bl	8009d6c <USBD_GetString>
 8009fec:	e004      	b.n	8009ff8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	4904      	ldr	r1, [pc, #16]	; (800a004 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ff2:	4805      	ldr	r0, [pc, #20]	; (800a008 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ff4:	f7ff feba 	bl	8009d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ff8:	4b02      	ldr	r3, [pc, #8]	; (800a004 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	20000904 	.word	0x20000904
 800a008:	0800b664 	.word	0x0800b664

0800a00c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	6039      	str	r1, [r7, #0]
 800a016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	4904      	ldr	r1, [pc, #16]	; (800a02c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a01c:	4804      	ldr	r0, [pc, #16]	; (800a030 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a01e:	f7ff fea5 	bl	8009d6c <USBD_GetString>
  return USBD_StrDesc;
 800a022:	4b02      	ldr	r3, [pc, #8]	; (800a02c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	20000904 	.word	0x20000904
 800a030:	0800b684 	.word	0x0800b684

0800a034 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	6039      	str	r1, [r7, #0]
 800a03e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	221a      	movs	r2, #26
 800a044:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a046:	f000 f843 	bl	800a0d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a04a:	4b02      	ldr	r3, [pc, #8]	; (800a054 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	200000a4 	.word	0x200000a4

0800a058 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	6039      	str	r1, [r7, #0]
 800a062:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d105      	bne.n	800a076 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	4907      	ldr	r1, [pc, #28]	; (800a08c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a06e:	4808      	ldr	r0, [pc, #32]	; (800a090 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a070:	f7ff fe7c 	bl	8009d6c <USBD_GetString>
 800a074:	e004      	b.n	800a080 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	4904      	ldr	r1, [pc, #16]	; (800a08c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a07a:	4805      	ldr	r0, [pc, #20]	; (800a090 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a07c:	f7ff fe76 	bl	8009d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a080:	4b02      	ldr	r3, [pc, #8]	; (800a08c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20000904 	.word	0x20000904
 800a090:	0800b698 	.word	0x0800b698

0800a094 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	6039      	str	r1, [r7, #0]
 800a09e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d105      	bne.n	800a0b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	4907      	ldr	r1, [pc, #28]	; (800a0c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0aa:	4808      	ldr	r0, [pc, #32]	; (800a0cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0ac:	f7ff fe5e 	bl	8009d6c <USBD_GetString>
 800a0b0:	e004      	b.n	800a0bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	4904      	ldr	r1, [pc, #16]	; (800a0c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0b6:	4805      	ldr	r0, [pc, #20]	; (800a0cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0b8:	f7ff fe58 	bl	8009d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0bc:	4b02      	ldr	r3, [pc, #8]	; (800a0c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20000904 	.word	0x20000904
 800a0cc:	0800b6a4 	.word	0x0800b6a4

0800a0d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0d6:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <Get_SerialNum+0x44>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0dc:	4b0e      	ldr	r3, [pc, #56]	; (800a118 <Get_SerialNum+0x48>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0e2:	4b0e      	ldr	r3, [pc, #56]	; (800a11c <Get_SerialNum+0x4c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d009      	beq.n	800a10a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0f6:	2208      	movs	r2, #8
 800a0f8:	4909      	ldr	r1, [pc, #36]	; (800a120 <Get_SerialNum+0x50>)
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 f814 	bl	800a128 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a100:	2204      	movs	r2, #4
 800a102:	4908      	ldr	r1, [pc, #32]	; (800a124 <Get_SerialNum+0x54>)
 800a104:	68b8      	ldr	r0, [r7, #8]
 800a106:	f000 f80f 	bl	800a128 <IntToUnicode>
  }
}
 800a10a:	bf00      	nop
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	1ffff7e8 	.word	0x1ffff7e8
 800a118:	1ffff7ec 	.word	0x1ffff7ec
 800a11c:	1ffff7f0 	.word	0x1ffff7f0
 800a120:	200000a6 	.word	0x200000a6
 800a124:	200000b6 	.word	0x200000b6

0800a128 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a128:	b480      	push	{r7}
 800a12a:	b087      	sub	sp, #28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	4613      	mov	r3, r2
 800a134:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a13a:	2300      	movs	r3, #0
 800a13c:	75fb      	strb	r3, [r7, #23]
 800a13e:	e027      	b.n	800a190 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	0f1b      	lsrs	r3, r3, #28
 800a144:	2b09      	cmp	r3, #9
 800a146:	d80b      	bhi.n	800a160 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	0f1b      	lsrs	r3, r3, #28
 800a14c:	b2da      	uxtb	r2, r3
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	4619      	mov	r1, r3
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	440b      	add	r3, r1
 800a158:	3230      	adds	r2, #48	; 0x30
 800a15a:	b2d2      	uxtb	r2, r2
 800a15c:	701a      	strb	r2, [r3, #0]
 800a15e:	e00a      	b.n	800a176 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	0f1b      	lsrs	r3, r3, #28
 800a164:	b2da      	uxtb	r2, r3
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	4619      	mov	r1, r3
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	440b      	add	r3, r1
 800a170:	3237      	adds	r2, #55	; 0x37
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	011b      	lsls	r3, r3, #4
 800a17a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	005b      	lsls	r3, r3, #1
 800a180:	3301      	adds	r3, #1
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	4413      	add	r3, r2
 800a186:	2200      	movs	r2, #0
 800a188:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	3301      	adds	r3, #1
 800a18e:	75fb      	strb	r3, [r7, #23]
 800a190:	7dfa      	ldrb	r2, [r7, #23]
 800a192:	79fb      	ldrb	r3, [r7, #7]
 800a194:	429a      	cmp	r2, r3
 800a196:	d3d3      	bcc.n	800a140 <IntToUnicode+0x18>
  }
}
 800a198:	bf00      	nop
 800a19a:	bf00      	nop
 800a19c:	371c      	adds	r7, #28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr

0800a1a4 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800a1a8:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bc80      	pop	{r7}
 800a1b0:	4770      	bx	lr

0800a1b2 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800a1b6:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bc80      	pop	{r7}
 800a1be:	4770      	bx	lr

0800a1c0 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800a1c8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	370c      	adds	r7, #12
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bc80      	pop	{r7}
 800a1d2:	4770      	bx	lr

0800a1d4 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800a1e0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bc80      	pop	{r7}
 800a1ea:	4770      	bx	lr

0800a1ec <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800a1f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bc80      	pop	{r7}
 800a202:	4770      	bx	lr

0800a204 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	460b      	mov	r3, r1
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800a212:	7afb      	ldrb	r3, [r7, #11]
 800a214:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800a216:	bf00      	nop
  }
  return (USBD_OK);
 800a218:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	bc80      	pop	{r7}
 800a222:	4770      	bx	lr

0800a224 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a11      	ldr	r2, [pc, #68]	; (800a278 <HAL_PCD_MspInit+0x54>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d11b      	bne.n	800a26e <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a236:	4b11      	ldr	r3, [pc, #68]	; (800a27c <HAL_PCD_MspInit+0x58>)
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	4a10      	ldr	r2, [pc, #64]	; (800a27c <HAL_PCD_MspInit+0x58>)
 800a23c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a240:	61d3      	str	r3, [r2, #28]
 800a242:	4b0e      	ldr	r3, [pc, #56]	; (800a27c <HAL_PCD_MspInit+0x58>)
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800a24e:	2200      	movs	r2, #0
 800a250:	2100      	movs	r1, #0
 800a252:	2013      	movs	r0, #19
 800a254:	f7f6 ffd5 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800a258:	2013      	movs	r0, #19
 800a25a:	f7f6 ffee 	bl	800123a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a25e:	2200      	movs	r2, #0
 800a260:	2100      	movs	r1, #0
 800a262:	2014      	movs	r0, #20
 800a264:	f7f6 ffcd 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a268:	2014      	movs	r0, #20
 800a26a:	f7f6 ffe6 	bl	800123a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a26e:	bf00      	nop
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	40005c00 	.word	0x40005c00
 800a27c:	40021000 	.word	0x40021000

0800a280 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a294:	4619      	mov	r1, r3
 800a296:	4610      	mov	r0, r2
 800a298:	f7fe fe26 	bl	8008ee8 <USBD_LL_SetupStage>
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a2b6:	78fa      	ldrb	r2, [r7, #3]
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	00db      	lsls	r3, r3, #3
 800a2c2:	440b      	add	r3, r1
 800a2c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	f7fe fe58 	bl	8008f82 <USBD_LL_DataOutStage>
}
 800a2d2:	bf00      	nop
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b082      	sub	sp, #8
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a2ec:	78fa      	ldrb	r2, [r7, #3]
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	440b      	add	r3, r1
 800a2fa:	333c      	adds	r3, #60	; 0x3c
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	78fb      	ldrb	r3, [r7, #3]
 800a300:	4619      	mov	r1, r3
 800a302:	f7fe feaf 	bl	8009064 <USBD_LL_DataInStage>
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe ffbf 	bl	80092a0 <USBD_LL_SOF>
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a332:	2301      	movs	r3, #1
 800a334:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d001      	beq.n	800a342 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a33e:	f7f6 fb39 	bl	80009b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a348:	7bfa      	ldrb	r2, [r7, #15]
 800a34a:	4611      	mov	r1, r2
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fe ff6f 	bl	8009230 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fe ff28 	bl	80091ae <USBD_LL_Reset>
}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe ff69 	bl	800924e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d005      	beq.n	800a390 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a384:	4b04      	ldr	r3, [pc, #16]	; (800a398 <HAL_PCD_SuspendCallback+0x30>)
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	4a03      	ldr	r2, [pc, #12]	; (800a398 <HAL_PCD_SuspendCallback+0x30>)
 800a38a:	f043 0306 	orr.w	r3, r3, #6
 800a38e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	e000ed00 	.word	0xe000ed00

0800a39c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe ff63 	bl	8009276 <USBD_LL_Resume>
}
 800a3b0:	bf00      	nop
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a3c0:	4a1b      	ldr	r2, [pc, #108]	; (800a430 <USBD_LL_Init+0x78>)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a19      	ldr	r2, [pc, #100]	; (800a430 <USBD_LL_Init+0x78>)
 800a3cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a3d0:	4b17      	ldr	r3, [pc, #92]	; (800a430 <USBD_LL_Init+0x78>)
 800a3d2:	4a18      	ldr	r2, [pc, #96]	; (800a434 <USBD_LL_Init+0x7c>)
 800a3d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a3d6:	4b16      	ldr	r3, [pc, #88]	; (800a430 <USBD_LL_Init+0x78>)
 800a3d8:	2208      	movs	r2, #8
 800a3da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a3dc:	4b14      	ldr	r3, [pc, #80]	; (800a430 <USBD_LL_Init+0x78>)
 800a3de:	2202      	movs	r2, #2
 800a3e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a3e2:	4b13      	ldr	r3, [pc, #76]	; (800a430 <USBD_LL_Init+0x78>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a3e8:	4b11      	ldr	r3, [pc, #68]	; (800a430 <USBD_LL_Init+0x78>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a3ee:	4b10      	ldr	r3, [pc, #64]	; (800a430 <USBD_LL_Init+0x78>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a3f4:	480e      	ldr	r0, [pc, #56]	; (800a430 <USBD_LL_Init+0x78>)
 800a3f6:	f7f7 fbc1 	bl	8001b7c <HAL_PCD_Init>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a400:	f7f6 fad8 	bl	80009b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a40a:	2318      	movs	r3, #24
 800a40c:	2200      	movs	r2, #0
 800a40e:	2100      	movs	r1, #0
 800a410:	f7f9 f8a7 	bl	8003562 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a41a:	2358      	movs	r3, #88	; 0x58
 800a41c:	2200      	movs	r2, #0
 800a41e:	2180      	movs	r1, #128	; 0x80
 800a420:	f7f9 f89f 	bl	8003562 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20000b04 	.word	0x20000b04
 800a434:	40005c00 	.word	0x40005c00

0800a438 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a44e:	4618      	mov	r0, r3
 800a450:	f7f7 fc93 	bl	8001d7a <HAL_PCD_Start>
 800a454:	4603      	mov	r3, r0
 800a456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 f938 	bl	800a6d0 <USBD_Get_USB_Status>
 800a460:	4603      	mov	r3, r0
 800a462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a464:	7bbb      	ldrb	r3, [r7, #14]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a484:	4618      	mov	r0, r3
 800a486:	f7f7 fc9e 	bl	8001dc6 <HAL_PCD_Stop>
 800a48a:	4603      	mov	r3, r0
 800a48c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	4618      	mov	r0, r3
 800a492:	f000 f91d 	bl	800a6d0 <USBD_Get_USB_Status>
 800a496:	4603      	mov	r3, r0
 800a498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	70fb      	strb	r3, [r7, #3]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70bb      	strb	r3, [r7, #2]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4cc:	78bb      	ldrb	r3, [r7, #2]
 800a4ce:	883a      	ldrh	r2, [r7, #0]
 800a4d0:	78f9      	ldrb	r1, [r7, #3]
 800a4d2:	f7f7 fdf3 	bl	80020bc <HAL_PCD_EP_Open>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 f8f7 	bl	800a6d0 <USBD_Get_USB_Status>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a50a:	78fa      	ldrb	r2, [r7, #3]
 800a50c:	4611      	mov	r1, r2
 800a50e:	4618      	mov	r0, r3
 800a510:	f7f7 fe99 	bl	8002246 <HAL_PCD_EP_SetStall>
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a518:	7bfb      	ldrb	r3, [r7, #15]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 f8d8 	bl	800a6d0 <USBD_Get_USB_Status>
 800a520:	4603      	mov	r3, r0
 800a522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a524:	7bbb      	ldrb	r3, [r7, #14]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a548:	78fa      	ldrb	r2, [r7, #3]
 800a54a:	4611      	mov	r1, r2
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7f7 feda 	bl	8002306 <HAL_PCD_EP_ClrStall>
 800a552:	4603      	mov	r3, r0
 800a554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a556:	7bfb      	ldrb	r3, [r7, #15]
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 f8b9 	bl	800a6d0 <USBD_Get_USB_Status>
 800a55e:	4603      	mov	r3, r0
 800a560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a562:	7bbb      	ldrb	r3, [r7, #14]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	460b      	mov	r3, r1
 800a576:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a57e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a584:	2b00      	cmp	r3, #0
 800a586:	da0c      	bge.n	800a5a2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a588:	78fb      	ldrb	r3, [r7, #3]
 800a58a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a58e:	68f9      	ldr	r1, [r7, #12]
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	4613      	mov	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4413      	add	r3, r2
 800a598:	00db      	lsls	r3, r3, #3
 800a59a:	440b      	add	r3, r1
 800a59c:	3302      	adds	r3, #2
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	e00b      	b.n	800a5ba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a5a2:	78fb      	ldrb	r3, [r7, #3]
 800a5a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5a8:	68f9      	ldr	r1, [r7, #12]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	00db      	lsls	r3, r3, #3
 800a5b2:	440b      	add	r3, r1
 800a5b4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a5b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3714      	adds	r7, #20
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bc80      	pop	{r7}
 800a5c2:	4770      	bx	lr

0800a5c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5de:	78fa      	ldrb	r2, [r7, #3]
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7f7 fd45 	bl	8002072 <HAL_PCD_SetAddress>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 f86e 	bl	800a6d0 <USBD_Get_USB_Status>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b086      	sub	sp, #24
 800a606:	af00      	add	r7, sp, #0
 800a608:	60f8      	str	r0, [r7, #12]
 800a60a:	607a      	str	r2, [r7, #4]
 800a60c:	461a      	mov	r2, r3
 800a60e:	460b      	mov	r3, r1
 800a610:	72fb      	strb	r3, [r7, #11]
 800a612:	4613      	mov	r3, r2
 800a614:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a624:	893b      	ldrh	r3, [r7, #8]
 800a626:	7af9      	ldrb	r1, [r7, #11]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	f7f7 fdd5 	bl	80021d8 <HAL_PCD_EP_Transmit>
 800a62e:	4603      	mov	r3, r0
 800a630:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a632:	7dfb      	ldrb	r3, [r7, #23]
 800a634:	4618      	mov	r0, r3
 800a636:	f000 f84b 	bl	800a6d0 <USBD_Get_USB_Status>
 800a63a:	4603      	mov	r3, r0
 800a63c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a63e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	607a      	str	r2, [r7, #4]
 800a652:	461a      	mov	r2, r3
 800a654:	460b      	mov	r3, r1
 800a656:	72fb      	strb	r3, [r7, #11]
 800a658:	4613      	mov	r3, r2
 800a65a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a66a:	893b      	ldrh	r3, [r7, #8]
 800a66c:	7af9      	ldrb	r1, [r7, #11]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	f7f7 fd81 	bl	8002176 <HAL_PCD_EP_Receive>
 800a674:	4603      	mov	r3, r0
 800a676:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a678:	7dfb      	ldrb	r3, [r7, #23]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 f828 	bl	800a6d0 <USBD_Get_USB_Status>
 800a680:	4603      	mov	r3, r0
 800a682:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a684:	7dbb      	ldrb	r3, [r7, #22]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3718      	adds	r7, #24
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
	...

0800a690 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a698:	4b02      	ldr	r3, [pc, #8]	; (800a6a4 <USBD_static_malloc+0x14>)
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bc80      	pop	{r7}
 800a6a2:	4770      	bx	lr
 800a6a4:	20000df4 	.word	0x20000df4

0800a6a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]

}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bc80      	pop	{r7}
 800a6b8:	4770      	bx	lr

0800a6ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	b083      	sub	sp, #12
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a6c6:	bf00      	nop
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bc80      	pop	{r7}
 800a6ce:	4770      	bx	lr

0800a6d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a6de:	79fb      	ldrb	r3, [r7, #7]
 800a6e0:	2b03      	cmp	r3, #3
 800a6e2:	d817      	bhi.n	800a714 <USBD_Get_USB_Status+0x44>
 800a6e4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ec <USBD_Get_USB_Status+0x1c>)
 800a6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ea:	bf00      	nop
 800a6ec:	0800a6fd 	.word	0x0800a6fd
 800a6f0:	0800a703 	.word	0x0800a703
 800a6f4:	0800a709 	.word	0x0800a709
 800a6f8:	0800a70f 	.word	0x0800a70f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a700:	e00b      	b.n	800a71a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a702:	2302      	movs	r3, #2
 800a704:	73fb      	strb	r3, [r7, #15]
    break;
 800a706:	e008      	b.n	800a71a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a708:	2301      	movs	r3, #1
 800a70a:	73fb      	strb	r3, [r7, #15]
    break;
 800a70c:	e005      	b.n	800a71a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a70e:	2302      	movs	r3, #2
 800a710:	73fb      	strb	r3, [r7, #15]
    break;
 800a712:	e002      	b.n	800a71a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a714:	2302      	movs	r3, #2
 800a716:	73fb      	strb	r3, [r7, #15]
    break;
 800a718:	bf00      	nop
  }
  return usb_status;
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	bc80      	pop	{r7}
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop

0800a728 <std>:
 800a728:	2300      	movs	r3, #0
 800a72a:	b510      	push	{r4, lr}
 800a72c:	4604      	mov	r4, r0
 800a72e:	e9c0 3300 	strd	r3, r3, [r0]
 800a732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a736:	6083      	str	r3, [r0, #8]
 800a738:	8181      	strh	r1, [r0, #12]
 800a73a:	6643      	str	r3, [r0, #100]	; 0x64
 800a73c:	81c2      	strh	r2, [r0, #14]
 800a73e:	6183      	str	r3, [r0, #24]
 800a740:	4619      	mov	r1, r3
 800a742:	2208      	movs	r2, #8
 800a744:	305c      	adds	r0, #92	; 0x5c
 800a746:	f000 f8fc 	bl	800a942 <memset>
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <std+0x38>)
 800a74c:	6224      	str	r4, [r4, #32]
 800a74e:	6263      	str	r3, [r4, #36]	; 0x24
 800a750:	4b04      	ldr	r3, [pc, #16]	; (800a764 <std+0x3c>)
 800a752:	62a3      	str	r3, [r4, #40]	; 0x28
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <std+0x40>)
 800a756:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a758:	4b04      	ldr	r3, [pc, #16]	; (800a76c <std+0x44>)
 800a75a:	6323      	str	r3, [r4, #48]	; 0x30
 800a75c:	bd10      	pop	{r4, pc}
 800a75e:	bf00      	nop
 800a760:	0800a8bd 	.word	0x0800a8bd
 800a764:	0800a8df 	.word	0x0800a8df
 800a768:	0800a917 	.word	0x0800a917
 800a76c:	0800a93b 	.word	0x0800a93b

0800a770 <stdio_exit_handler>:
 800a770:	4a02      	ldr	r2, [pc, #8]	; (800a77c <stdio_exit_handler+0xc>)
 800a772:	4903      	ldr	r1, [pc, #12]	; (800a780 <stdio_exit_handler+0x10>)
 800a774:	4803      	ldr	r0, [pc, #12]	; (800a784 <stdio_exit_handler+0x14>)
 800a776:	f000 b869 	b.w	800a84c <_fwalk_sglue>
 800a77a:	bf00      	nop
 800a77c:	200000dc 	.word	0x200000dc
 800a780:	0800b2ed 	.word	0x0800b2ed
 800a784:	200000e8 	.word	0x200000e8

0800a788 <cleanup_stdio>:
 800a788:	6841      	ldr	r1, [r0, #4]
 800a78a:	4b0c      	ldr	r3, [pc, #48]	; (800a7bc <cleanup_stdio+0x34>)
 800a78c:	b510      	push	{r4, lr}
 800a78e:	4299      	cmp	r1, r3
 800a790:	4604      	mov	r4, r0
 800a792:	d001      	beq.n	800a798 <cleanup_stdio+0x10>
 800a794:	f000 fdaa 	bl	800b2ec <_fflush_r>
 800a798:	68a1      	ldr	r1, [r4, #8]
 800a79a:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <cleanup_stdio+0x38>)
 800a79c:	4299      	cmp	r1, r3
 800a79e:	d002      	beq.n	800a7a6 <cleanup_stdio+0x1e>
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f000 fda3 	bl	800b2ec <_fflush_r>
 800a7a6:	68e1      	ldr	r1, [r4, #12]
 800a7a8:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <cleanup_stdio+0x3c>)
 800a7aa:	4299      	cmp	r1, r3
 800a7ac:	d004      	beq.n	800a7b8 <cleanup_stdio+0x30>
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7b4:	f000 bd9a 	b.w	800b2ec <_fflush_r>
 800a7b8:	bd10      	pop	{r4, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20001214 	.word	0x20001214
 800a7c0:	2000127c 	.word	0x2000127c
 800a7c4:	200012e4 	.word	0x200012e4

0800a7c8 <global_stdio_init.part.0>:
 800a7c8:	b510      	push	{r4, lr}
 800a7ca:	4b0b      	ldr	r3, [pc, #44]	; (800a7f8 <global_stdio_init.part.0+0x30>)
 800a7cc:	4c0b      	ldr	r4, [pc, #44]	; (800a7fc <global_stdio_init.part.0+0x34>)
 800a7ce:	4a0c      	ldr	r2, [pc, #48]	; (800a800 <global_stdio_init.part.0+0x38>)
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	2104      	movs	r1, #4
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f7ff ffa6 	bl	800a728 <std>
 800a7dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	2109      	movs	r1, #9
 800a7e4:	f7ff ffa0 	bl	800a728 <std>
 800a7e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7f2:	2112      	movs	r1, #18
 800a7f4:	f7ff bf98 	b.w	800a728 <std>
 800a7f8:	2000134c 	.word	0x2000134c
 800a7fc:	20001214 	.word	0x20001214
 800a800:	0800a771 	.word	0x0800a771

0800a804 <__sfp_lock_acquire>:
 800a804:	4801      	ldr	r0, [pc, #4]	; (800a80c <__sfp_lock_acquire+0x8>)
 800a806:	f000 b915 	b.w	800aa34 <__retarget_lock_acquire_recursive>
 800a80a:	bf00      	nop
 800a80c:	20001355 	.word	0x20001355

0800a810 <__sfp_lock_release>:
 800a810:	4801      	ldr	r0, [pc, #4]	; (800a818 <__sfp_lock_release+0x8>)
 800a812:	f000 b910 	b.w	800aa36 <__retarget_lock_release_recursive>
 800a816:	bf00      	nop
 800a818:	20001355 	.word	0x20001355

0800a81c <__sinit>:
 800a81c:	b510      	push	{r4, lr}
 800a81e:	4604      	mov	r4, r0
 800a820:	f7ff fff0 	bl	800a804 <__sfp_lock_acquire>
 800a824:	6a23      	ldr	r3, [r4, #32]
 800a826:	b11b      	cbz	r3, 800a830 <__sinit+0x14>
 800a828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a82c:	f7ff bff0 	b.w	800a810 <__sfp_lock_release>
 800a830:	4b04      	ldr	r3, [pc, #16]	; (800a844 <__sinit+0x28>)
 800a832:	6223      	str	r3, [r4, #32]
 800a834:	4b04      	ldr	r3, [pc, #16]	; (800a848 <__sinit+0x2c>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1f5      	bne.n	800a828 <__sinit+0xc>
 800a83c:	f7ff ffc4 	bl	800a7c8 <global_stdio_init.part.0>
 800a840:	e7f2      	b.n	800a828 <__sinit+0xc>
 800a842:	bf00      	nop
 800a844:	0800a789 	.word	0x0800a789
 800a848:	2000134c 	.word	0x2000134c

0800a84c <_fwalk_sglue>:
 800a84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a850:	4607      	mov	r7, r0
 800a852:	4688      	mov	r8, r1
 800a854:	4614      	mov	r4, r2
 800a856:	2600      	movs	r6, #0
 800a858:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a85c:	f1b9 0901 	subs.w	r9, r9, #1
 800a860:	d505      	bpl.n	800a86e <_fwalk_sglue+0x22>
 800a862:	6824      	ldr	r4, [r4, #0]
 800a864:	2c00      	cmp	r4, #0
 800a866:	d1f7      	bne.n	800a858 <_fwalk_sglue+0xc>
 800a868:	4630      	mov	r0, r6
 800a86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a86e:	89ab      	ldrh	r3, [r5, #12]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d907      	bls.n	800a884 <_fwalk_sglue+0x38>
 800a874:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a878:	3301      	adds	r3, #1
 800a87a:	d003      	beq.n	800a884 <_fwalk_sglue+0x38>
 800a87c:	4629      	mov	r1, r5
 800a87e:	4638      	mov	r0, r7
 800a880:	47c0      	blx	r8
 800a882:	4306      	orrs	r6, r0
 800a884:	3568      	adds	r5, #104	; 0x68
 800a886:	e7e9      	b.n	800a85c <_fwalk_sglue+0x10>

0800a888 <iprintf>:
 800a888:	b40f      	push	{r0, r1, r2, r3}
 800a88a:	b507      	push	{r0, r1, r2, lr}
 800a88c:	4906      	ldr	r1, [pc, #24]	; (800a8a8 <iprintf+0x20>)
 800a88e:	ab04      	add	r3, sp, #16
 800a890:	6808      	ldr	r0, [r1, #0]
 800a892:	f853 2b04 	ldr.w	r2, [r3], #4
 800a896:	6881      	ldr	r1, [r0, #8]
 800a898:	9301      	str	r3, [sp, #4]
 800a89a:	f000 f9f7 	bl	800ac8c <_vfiprintf_r>
 800a89e:	b003      	add	sp, #12
 800a8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8a4:	b004      	add	sp, #16
 800a8a6:	4770      	bx	lr
 800a8a8:	20000134 	.word	0x20000134

0800a8ac <putchar>:
 800a8ac:	4b02      	ldr	r3, [pc, #8]	; (800a8b8 <putchar+0xc>)
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	6882      	ldr	r2, [r0, #8]
 800a8b4:	f000 bd42 	b.w	800b33c <_putc_r>
 800a8b8:	20000134 	.word	0x20000134

0800a8bc <__sread>:
 800a8bc:	b510      	push	{r4, lr}
 800a8be:	460c      	mov	r4, r1
 800a8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c4:	f000 f868 	bl	800a998 <_read_r>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	bfab      	itete	ge
 800a8cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a8d0:	181b      	addge	r3, r3, r0
 800a8d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8d6:	bfac      	ite	ge
 800a8d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8da:	81a3      	strhlt	r3, [r4, #12]
 800a8dc:	bd10      	pop	{r4, pc}

0800a8de <__swrite>:
 800a8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e2:	461f      	mov	r7, r3
 800a8e4:	898b      	ldrh	r3, [r1, #12]
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	05db      	lsls	r3, r3, #23
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	d505      	bpl.n	800a8fc <__swrite+0x1e>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f8:	f000 f83c 	bl	800a974 <_lseek_r>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	4632      	mov	r2, r6
 800a900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a904:	81a3      	strh	r3, [r4, #12]
 800a906:	4628      	mov	r0, r5
 800a908:	463b      	mov	r3, r7
 800a90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a912:	f000 b853 	b.w	800a9bc <_write_r>

0800a916 <__sseek>:
 800a916:	b510      	push	{r4, lr}
 800a918:	460c      	mov	r4, r1
 800a91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91e:	f000 f829 	bl	800a974 <_lseek_r>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	bf15      	itete	ne
 800a928:	6560      	strne	r0, [r4, #84]	; 0x54
 800a92a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a92e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a932:	81a3      	strheq	r3, [r4, #12]
 800a934:	bf18      	it	ne
 800a936:	81a3      	strhne	r3, [r4, #12]
 800a938:	bd10      	pop	{r4, pc}

0800a93a <__sclose>:
 800a93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93e:	f000 b809 	b.w	800a954 <_close_r>

0800a942 <memset>:
 800a942:	4603      	mov	r3, r0
 800a944:	4402      	add	r2, r0
 800a946:	4293      	cmp	r3, r2
 800a948:	d100      	bne.n	800a94c <memset+0xa>
 800a94a:	4770      	bx	lr
 800a94c:	f803 1b01 	strb.w	r1, [r3], #1
 800a950:	e7f9      	b.n	800a946 <memset+0x4>
	...

0800a954 <_close_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	2300      	movs	r3, #0
 800a958:	4d05      	ldr	r5, [pc, #20]	; (800a970 <_close_r+0x1c>)
 800a95a:	4604      	mov	r4, r0
 800a95c:	4608      	mov	r0, r1
 800a95e:	602b      	str	r3, [r5, #0]
 800a960:	f7f6 fa5f 	bl	8000e22 <_close>
 800a964:	1c43      	adds	r3, r0, #1
 800a966:	d102      	bne.n	800a96e <_close_r+0x1a>
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	b103      	cbz	r3, 800a96e <_close_r+0x1a>
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
 800a970:	20001350 	.word	0x20001350

0800a974 <_lseek_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	4604      	mov	r4, r0
 800a978:	4608      	mov	r0, r1
 800a97a:	4611      	mov	r1, r2
 800a97c:	2200      	movs	r2, #0
 800a97e:	4d05      	ldr	r5, [pc, #20]	; (800a994 <_lseek_r+0x20>)
 800a980:	602a      	str	r2, [r5, #0]
 800a982:	461a      	mov	r2, r3
 800a984:	f7f6 fa71 	bl	8000e6a <_lseek>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_lseek_r+0x1e>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_lseek_r+0x1e>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	20001350 	.word	0x20001350

0800a998 <_read_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4604      	mov	r4, r0
 800a99c:	4608      	mov	r0, r1
 800a99e:	4611      	mov	r1, r2
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4d05      	ldr	r5, [pc, #20]	; (800a9b8 <_read_r+0x20>)
 800a9a4:	602a      	str	r2, [r5, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f7f6 fa02 	bl	8000db0 <_read>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d102      	bne.n	800a9b6 <_read_r+0x1e>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	b103      	cbz	r3, 800a9b6 <_read_r+0x1e>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	20001350 	.word	0x20001350

0800a9bc <_write_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4604      	mov	r4, r0
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	4d05      	ldr	r5, [pc, #20]	; (800a9dc <_write_r+0x20>)
 800a9c8:	602a      	str	r2, [r5, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f7f6 fa0d 	bl	8000dea <_write>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_write_r+0x1e>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_write_r+0x1e>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	20001350 	.word	0x20001350

0800a9e0 <__errno>:
 800a9e0:	4b01      	ldr	r3, [pc, #4]	; (800a9e8 <__errno+0x8>)
 800a9e2:	6818      	ldr	r0, [r3, #0]
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	20000134 	.word	0x20000134

0800a9ec <__libc_init_array>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	2600      	movs	r6, #0
 800a9f0:	4d0c      	ldr	r5, [pc, #48]	; (800aa24 <__libc_init_array+0x38>)
 800a9f2:	4c0d      	ldr	r4, [pc, #52]	; (800aa28 <__libc_init_array+0x3c>)
 800a9f4:	1b64      	subs	r4, r4, r5
 800a9f6:	10a4      	asrs	r4, r4, #2
 800a9f8:	42a6      	cmp	r6, r4
 800a9fa:	d109      	bne.n	800aa10 <__libc_init_array+0x24>
 800a9fc:	f000 fe0a 	bl	800b614 <_init>
 800aa00:	2600      	movs	r6, #0
 800aa02:	4d0a      	ldr	r5, [pc, #40]	; (800aa2c <__libc_init_array+0x40>)
 800aa04:	4c0a      	ldr	r4, [pc, #40]	; (800aa30 <__libc_init_array+0x44>)
 800aa06:	1b64      	subs	r4, r4, r5
 800aa08:	10a4      	asrs	r4, r4, #2
 800aa0a:	42a6      	cmp	r6, r4
 800aa0c:	d105      	bne.n	800aa1a <__libc_init_array+0x2e>
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
 800aa10:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa14:	4798      	blx	r3
 800aa16:	3601      	adds	r6, #1
 800aa18:	e7ee      	b.n	800a9f8 <__libc_init_array+0xc>
 800aa1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa1e:	4798      	blx	r3
 800aa20:	3601      	adds	r6, #1
 800aa22:	e7f2      	b.n	800aa0a <__libc_init_array+0x1e>
 800aa24:	0800b774 	.word	0x0800b774
 800aa28:	0800b774 	.word	0x0800b774
 800aa2c:	0800b774 	.word	0x0800b774
 800aa30:	0800b778 	.word	0x0800b778

0800aa34 <__retarget_lock_acquire_recursive>:
 800aa34:	4770      	bx	lr

0800aa36 <__retarget_lock_release_recursive>:
 800aa36:	4770      	bx	lr

0800aa38 <memcpy>:
 800aa38:	440a      	add	r2, r1
 800aa3a:	4291      	cmp	r1, r2
 800aa3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa40:	d100      	bne.n	800aa44 <memcpy+0xc>
 800aa42:	4770      	bx	lr
 800aa44:	b510      	push	{r4, lr}
 800aa46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa4a:	4291      	cmp	r1, r2
 800aa4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa50:	d1f9      	bne.n	800aa46 <memcpy+0xe>
 800aa52:	bd10      	pop	{r4, pc}

0800aa54 <_free_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	4605      	mov	r5, r0
 800aa58:	2900      	cmp	r1, #0
 800aa5a:	d040      	beq.n	800aade <_free_r+0x8a>
 800aa5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa60:	1f0c      	subs	r4, r1, #4
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	bfb8      	it	lt
 800aa66:	18e4      	addlt	r4, r4, r3
 800aa68:	f000 f8dc 	bl	800ac24 <__malloc_lock>
 800aa6c:	4a1c      	ldr	r2, [pc, #112]	; (800aae0 <_free_r+0x8c>)
 800aa6e:	6813      	ldr	r3, [r2, #0]
 800aa70:	b933      	cbnz	r3, 800aa80 <_free_r+0x2c>
 800aa72:	6063      	str	r3, [r4, #4]
 800aa74:	6014      	str	r4, [r2, #0]
 800aa76:	4628      	mov	r0, r5
 800aa78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa7c:	f000 b8d8 	b.w	800ac30 <__malloc_unlock>
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	d908      	bls.n	800aa96 <_free_r+0x42>
 800aa84:	6820      	ldr	r0, [r4, #0]
 800aa86:	1821      	adds	r1, r4, r0
 800aa88:	428b      	cmp	r3, r1
 800aa8a:	bf01      	itttt	eq
 800aa8c:	6819      	ldreq	r1, [r3, #0]
 800aa8e:	685b      	ldreq	r3, [r3, #4]
 800aa90:	1809      	addeq	r1, r1, r0
 800aa92:	6021      	streq	r1, [r4, #0]
 800aa94:	e7ed      	b.n	800aa72 <_free_r+0x1e>
 800aa96:	461a      	mov	r2, r3
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	b10b      	cbz	r3, 800aaa0 <_free_r+0x4c>
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	d9fa      	bls.n	800aa96 <_free_r+0x42>
 800aaa0:	6811      	ldr	r1, [r2, #0]
 800aaa2:	1850      	adds	r0, r2, r1
 800aaa4:	42a0      	cmp	r0, r4
 800aaa6:	d10b      	bne.n	800aac0 <_free_r+0x6c>
 800aaa8:	6820      	ldr	r0, [r4, #0]
 800aaaa:	4401      	add	r1, r0
 800aaac:	1850      	adds	r0, r2, r1
 800aaae:	4283      	cmp	r3, r0
 800aab0:	6011      	str	r1, [r2, #0]
 800aab2:	d1e0      	bne.n	800aa76 <_free_r+0x22>
 800aab4:	6818      	ldr	r0, [r3, #0]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	4408      	add	r0, r1
 800aaba:	6010      	str	r0, [r2, #0]
 800aabc:	6053      	str	r3, [r2, #4]
 800aabe:	e7da      	b.n	800aa76 <_free_r+0x22>
 800aac0:	d902      	bls.n	800aac8 <_free_r+0x74>
 800aac2:	230c      	movs	r3, #12
 800aac4:	602b      	str	r3, [r5, #0]
 800aac6:	e7d6      	b.n	800aa76 <_free_r+0x22>
 800aac8:	6820      	ldr	r0, [r4, #0]
 800aaca:	1821      	adds	r1, r4, r0
 800aacc:	428b      	cmp	r3, r1
 800aace:	bf01      	itttt	eq
 800aad0:	6819      	ldreq	r1, [r3, #0]
 800aad2:	685b      	ldreq	r3, [r3, #4]
 800aad4:	1809      	addeq	r1, r1, r0
 800aad6:	6021      	streq	r1, [r4, #0]
 800aad8:	6063      	str	r3, [r4, #4]
 800aada:	6054      	str	r4, [r2, #4]
 800aadc:	e7cb      	b.n	800aa76 <_free_r+0x22>
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	20001358 	.word	0x20001358

0800aae4 <sbrk_aligned>:
 800aae4:	b570      	push	{r4, r5, r6, lr}
 800aae6:	4e0e      	ldr	r6, [pc, #56]	; (800ab20 <sbrk_aligned+0x3c>)
 800aae8:	460c      	mov	r4, r1
 800aaea:	6831      	ldr	r1, [r6, #0]
 800aaec:	4605      	mov	r5, r0
 800aaee:	b911      	cbnz	r1, 800aaf6 <sbrk_aligned+0x12>
 800aaf0:	f000 fcee 	bl	800b4d0 <_sbrk_r>
 800aaf4:	6030      	str	r0, [r6, #0]
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f000 fce9 	bl	800b4d0 <_sbrk_r>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	d00a      	beq.n	800ab18 <sbrk_aligned+0x34>
 800ab02:	1cc4      	adds	r4, r0, #3
 800ab04:	f024 0403 	bic.w	r4, r4, #3
 800ab08:	42a0      	cmp	r0, r4
 800ab0a:	d007      	beq.n	800ab1c <sbrk_aligned+0x38>
 800ab0c:	1a21      	subs	r1, r4, r0
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f000 fcde 	bl	800b4d0 <_sbrk_r>
 800ab14:	3001      	adds	r0, #1
 800ab16:	d101      	bne.n	800ab1c <sbrk_aligned+0x38>
 800ab18:	f04f 34ff 	mov.w	r4, #4294967295
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	bd70      	pop	{r4, r5, r6, pc}
 800ab20:	2000135c 	.word	0x2000135c

0800ab24 <_malloc_r>:
 800ab24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab28:	1ccd      	adds	r5, r1, #3
 800ab2a:	f025 0503 	bic.w	r5, r5, #3
 800ab2e:	3508      	adds	r5, #8
 800ab30:	2d0c      	cmp	r5, #12
 800ab32:	bf38      	it	cc
 800ab34:	250c      	movcc	r5, #12
 800ab36:	2d00      	cmp	r5, #0
 800ab38:	4607      	mov	r7, r0
 800ab3a:	db01      	blt.n	800ab40 <_malloc_r+0x1c>
 800ab3c:	42a9      	cmp	r1, r5
 800ab3e:	d905      	bls.n	800ab4c <_malloc_r+0x28>
 800ab40:	230c      	movs	r3, #12
 800ab42:	2600      	movs	r6, #0
 800ab44:	603b      	str	r3, [r7, #0]
 800ab46:	4630      	mov	r0, r6
 800ab48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac20 <_malloc_r+0xfc>
 800ab50:	f000 f868 	bl	800ac24 <__malloc_lock>
 800ab54:	f8d8 3000 	ldr.w	r3, [r8]
 800ab58:	461c      	mov	r4, r3
 800ab5a:	bb5c      	cbnz	r4, 800abb4 <_malloc_r+0x90>
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f7ff ffc0 	bl	800aae4 <sbrk_aligned>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	4604      	mov	r4, r0
 800ab68:	d155      	bne.n	800ac16 <_malloc_r+0xf2>
 800ab6a:	f8d8 4000 	ldr.w	r4, [r8]
 800ab6e:	4626      	mov	r6, r4
 800ab70:	2e00      	cmp	r6, #0
 800ab72:	d145      	bne.n	800ac00 <_malloc_r+0xdc>
 800ab74:	2c00      	cmp	r4, #0
 800ab76:	d048      	beq.n	800ac0a <_malloc_r+0xe6>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	eb04 0903 	add.w	r9, r4, r3
 800ab82:	f000 fca5 	bl	800b4d0 <_sbrk_r>
 800ab86:	4581      	cmp	r9, r0
 800ab88:	d13f      	bne.n	800ac0a <_malloc_r+0xe6>
 800ab8a:	6821      	ldr	r1, [r4, #0]
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	1a6d      	subs	r5, r5, r1
 800ab90:	4629      	mov	r1, r5
 800ab92:	f7ff ffa7 	bl	800aae4 <sbrk_aligned>
 800ab96:	3001      	adds	r0, #1
 800ab98:	d037      	beq.n	800ac0a <_malloc_r+0xe6>
 800ab9a:	6823      	ldr	r3, [r4, #0]
 800ab9c:	442b      	add	r3, r5
 800ab9e:	6023      	str	r3, [r4, #0]
 800aba0:	f8d8 3000 	ldr.w	r3, [r8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d038      	beq.n	800ac1a <_malloc_r+0xf6>
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	42a2      	cmp	r2, r4
 800abac:	d12b      	bne.n	800ac06 <_malloc_r+0xe2>
 800abae:	2200      	movs	r2, #0
 800abb0:	605a      	str	r2, [r3, #4]
 800abb2:	e00f      	b.n	800abd4 <_malloc_r+0xb0>
 800abb4:	6822      	ldr	r2, [r4, #0]
 800abb6:	1b52      	subs	r2, r2, r5
 800abb8:	d41f      	bmi.n	800abfa <_malloc_r+0xd6>
 800abba:	2a0b      	cmp	r2, #11
 800abbc:	d917      	bls.n	800abee <_malloc_r+0xca>
 800abbe:	1961      	adds	r1, r4, r5
 800abc0:	42a3      	cmp	r3, r4
 800abc2:	6025      	str	r5, [r4, #0]
 800abc4:	bf18      	it	ne
 800abc6:	6059      	strne	r1, [r3, #4]
 800abc8:	6863      	ldr	r3, [r4, #4]
 800abca:	bf08      	it	eq
 800abcc:	f8c8 1000 	streq.w	r1, [r8]
 800abd0:	5162      	str	r2, [r4, r5]
 800abd2:	604b      	str	r3, [r1, #4]
 800abd4:	4638      	mov	r0, r7
 800abd6:	f104 060b 	add.w	r6, r4, #11
 800abda:	f000 f829 	bl	800ac30 <__malloc_unlock>
 800abde:	f026 0607 	bic.w	r6, r6, #7
 800abe2:	1d23      	adds	r3, r4, #4
 800abe4:	1af2      	subs	r2, r6, r3
 800abe6:	d0ae      	beq.n	800ab46 <_malloc_r+0x22>
 800abe8:	1b9b      	subs	r3, r3, r6
 800abea:	50a3      	str	r3, [r4, r2]
 800abec:	e7ab      	b.n	800ab46 <_malloc_r+0x22>
 800abee:	42a3      	cmp	r3, r4
 800abf0:	6862      	ldr	r2, [r4, #4]
 800abf2:	d1dd      	bne.n	800abb0 <_malloc_r+0x8c>
 800abf4:	f8c8 2000 	str.w	r2, [r8]
 800abf8:	e7ec      	b.n	800abd4 <_malloc_r+0xb0>
 800abfa:	4623      	mov	r3, r4
 800abfc:	6864      	ldr	r4, [r4, #4]
 800abfe:	e7ac      	b.n	800ab5a <_malloc_r+0x36>
 800ac00:	4634      	mov	r4, r6
 800ac02:	6876      	ldr	r6, [r6, #4]
 800ac04:	e7b4      	b.n	800ab70 <_malloc_r+0x4c>
 800ac06:	4613      	mov	r3, r2
 800ac08:	e7cc      	b.n	800aba4 <_malloc_r+0x80>
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	603b      	str	r3, [r7, #0]
 800ac10:	f000 f80e 	bl	800ac30 <__malloc_unlock>
 800ac14:	e797      	b.n	800ab46 <_malloc_r+0x22>
 800ac16:	6025      	str	r5, [r4, #0]
 800ac18:	e7dc      	b.n	800abd4 <_malloc_r+0xb0>
 800ac1a:	605b      	str	r3, [r3, #4]
 800ac1c:	deff      	udf	#255	; 0xff
 800ac1e:	bf00      	nop
 800ac20:	20001358 	.word	0x20001358

0800ac24 <__malloc_lock>:
 800ac24:	4801      	ldr	r0, [pc, #4]	; (800ac2c <__malloc_lock+0x8>)
 800ac26:	f7ff bf05 	b.w	800aa34 <__retarget_lock_acquire_recursive>
 800ac2a:	bf00      	nop
 800ac2c:	20001354 	.word	0x20001354

0800ac30 <__malloc_unlock>:
 800ac30:	4801      	ldr	r0, [pc, #4]	; (800ac38 <__malloc_unlock+0x8>)
 800ac32:	f7ff bf00 	b.w	800aa36 <__retarget_lock_release_recursive>
 800ac36:	bf00      	nop
 800ac38:	20001354 	.word	0x20001354

0800ac3c <__sfputc_r>:
 800ac3c:	6893      	ldr	r3, [r2, #8]
 800ac3e:	b410      	push	{r4}
 800ac40:	3b01      	subs	r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	6093      	str	r3, [r2, #8]
 800ac46:	da07      	bge.n	800ac58 <__sfputc_r+0x1c>
 800ac48:	6994      	ldr	r4, [r2, #24]
 800ac4a:	42a3      	cmp	r3, r4
 800ac4c:	db01      	blt.n	800ac52 <__sfputc_r+0x16>
 800ac4e:	290a      	cmp	r1, #10
 800ac50:	d102      	bne.n	800ac58 <__sfputc_r+0x1c>
 800ac52:	bc10      	pop	{r4}
 800ac54:	f000 bba6 	b.w	800b3a4 <__swbuf_r>
 800ac58:	6813      	ldr	r3, [r2, #0]
 800ac5a:	1c58      	adds	r0, r3, #1
 800ac5c:	6010      	str	r0, [r2, #0]
 800ac5e:	7019      	strb	r1, [r3, #0]
 800ac60:	4608      	mov	r0, r1
 800ac62:	bc10      	pop	{r4}
 800ac64:	4770      	bx	lr

0800ac66 <__sfputs_r>:
 800ac66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac68:	4606      	mov	r6, r0
 800ac6a:	460f      	mov	r7, r1
 800ac6c:	4614      	mov	r4, r2
 800ac6e:	18d5      	adds	r5, r2, r3
 800ac70:	42ac      	cmp	r4, r5
 800ac72:	d101      	bne.n	800ac78 <__sfputs_r+0x12>
 800ac74:	2000      	movs	r0, #0
 800ac76:	e007      	b.n	800ac88 <__sfputs_r+0x22>
 800ac78:	463a      	mov	r2, r7
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac80:	f7ff ffdc 	bl	800ac3c <__sfputc_r>
 800ac84:	1c43      	adds	r3, r0, #1
 800ac86:	d1f3      	bne.n	800ac70 <__sfputs_r+0xa>
 800ac88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac8c <_vfiprintf_r>:
 800ac8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac90:	460d      	mov	r5, r1
 800ac92:	4614      	mov	r4, r2
 800ac94:	4698      	mov	r8, r3
 800ac96:	4606      	mov	r6, r0
 800ac98:	b09d      	sub	sp, #116	; 0x74
 800ac9a:	b118      	cbz	r0, 800aca4 <_vfiprintf_r+0x18>
 800ac9c:	6a03      	ldr	r3, [r0, #32]
 800ac9e:	b90b      	cbnz	r3, 800aca4 <_vfiprintf_r+0x18>
 800aca0:	f7ff fdbc 	bl	800a81c <__sinit>
 800aca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aca6:	07d9      	lsls	r1, r3, #31
 800aca8:	d405      	bmi.n	800acb6 <_vfiprintf_r+0x2a>
 800acaa:	89ab      	ldrh	r3, [r5, #12]
 800acac:	059a      	lsls	r2, r3, #22
 800acae:	d402      	bmi.n	800acb6 <_vfiprintf_r+0x2a>
 800acb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acb2:	f7ff febf 	bl	800aa34 <__retarget_lock_acquire_recursive>
 800acb6:	89ab      	ldrh	r3, [r5, #12]
 800acb8:	071b      	lsls	r3, r3, #28
 800acba:	d501      	bpl.n	800acc0 <_vfiprintf_r+0x34>
 800acbc:	692b      	ldr	r3, [r5, #16]
 800acbe:	b99b      	cbnz	r3, 800ace8 <_vfiprintf_r+0x5c>
 800acc0:	4629      	mov	r1, r5
 800acc2:	4630      	mov	r0, r6
 800acc4:	f000 fbac 	bl	800b420 <__swsetup_r>
 800acc8:	b170      	cbz	r0, 800ace8 <_vfiprintf_r+0x5c>
 800acca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800accc:	07dc      	lsls	r4, r3, #31
 800acce:	d504      	bpl.n	800acda <_vfiprintf_r+0x4e>
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	b01d      	add	sp, #116	; 0x74
 800acd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acda:	89ab      	ldrh	r3, [r5, #12]
 800acdc:	0598      	lsls	r0, r3, #22
 800acde:	d4f7      	bmi.n	800acd0 <_vfiprintf_r+0x44>
 800ace0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ace2:	f7ff fea8 	bl	800aa36 <__retarget_lock_release_recursive>
 800ace6:	e7f3      	b.n	800acd0 <_vfiprintf_r+0x44>
 800ace8:	2300      	movs	r3, #0
 800acea:	9309      	str	r3, [sp, #36]	; 0x24
 800acec:	2320      	movs	r3, #32
 800acee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acf2:	2330      	movs	r3, #48	; 0x30
 800acf4:	f04f 0901 	mov.w	r9, #1
 800acf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800acfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800aeac <_vfiprintf_r+0x220>
 800ad00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad04:	4623      	mov	r3, r4
 800ad06:	469a      	mov	sl, r3
 800ad08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad0c:	b10a      	cbz	r2, 800ad12 <_vfiprintf_r+0x86>
 800ad0e:	2a25      	cmp	r2, #37	; 0x25
 800ad10:	d1f9      	bne.n	800ad06 <_vfiprintf_r+0x7a>
 800ad12:	ebba 0b04 	subs.w	fp, sl, r4
 800ad16:	d00b      	beq.n	800ad30 <_vfiprintf_r+0xa4>
 800ad18:	465b      	mov	r3, fp
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f7ff ffa1 	bl	800ac66 <__sfputs_r>
 800ad24:	3001      	adds	r0, #1
 800ad26:	f000 80a9 	beq.w	800ae7c <_vfiprintf_r+0x1f0>
 800ad2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad2c:	445a      	add	r2, fp
 800ad2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad30:	f89a 3000 	ldrb.w	r3, [sl]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 80a1 	beq.w	800ae7c <_vfiprintf_r+0x1f0>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad44:	f10a 0a01 	add.w	sl, sl, #1
 800ad48:	9304      	str	r3, [sp, #16]
 800ad4a:	9307      	str	r3, [sp, #28]
 800ad4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad50:	931a      	str	r3, [sp, #104]	; 0x68
 800ad52:	4654      	mov	r4, sl
 800ad54:	2205      	movs	r2, #5
 800ad56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5a:	4854      	ldr	r0, [pc, #336]	; (800aeac <_vfiprintf_r+0x220>)
 800ad5c:	f000 fbc8 	bl	800b4f0 <memchr>
 800ad60:	9a04      	ldr	r2, [sp, #16]
 800ad62:	b9d8      	cbnz	r0, 800ad9c <_vfiprintf_r+0x110>
 800ad64:	06d1      	lsls	r1, r2, #27
 800ad66:	bf44      	itt	mi
 800ad68:	2320      	movmi	r3, #32
 800ad6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad6e:	0713      	lsls	r3, r2, #28
 800ad70:	bf44      	itt	mi
 800ad72:	232b      	movmi	r3, #43	; 0x2b
 800ad74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad78:	f89a 3000 	ldrb.w	r3, [sl]
 800ad7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad7e:	d015      	beq.n	800adac <_vfiprintf_r+0x120>
 800ad80:	4654      	mov	r4, sl
 800ad82:	2000      	movs	r0, #0
 800ad84:	f04f 0c0a 	mov.w	ip, #10
 800ad88:	9a07      	ldr	r2, [sp, #28]
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad90:	3b30      	subs	r3, #48	; 0x30
 800ad92:	2b09      	cmp	r3, #9
 800ad94:	d94d      	bls.n	800ae32 <_vfiprintf_r+0x1a6>
 800ad96:	b1b0      	cbz	r0, 800adc6 <_vfiprintf_r+0x13a>
 800ad98:	9207      	str	r2, [sp, #28]
 800ad9a:	e014      	b.n	800adc6 <_vfiprintf_r+0x13a>
 800ad9c:	eba0 0308 	sub.w	r3, r0, r8
 800ada0:	fa09 f303 	lsl.w	r3, r9, r3
 800ada4:	4313      	orrs	r3, r2
 800ada6:	46a2      	mov	sl, r4
 800ada8:	9304      	str	r3, [sp, #16]
 800adaa:	e7d2      	b.n	800ad52 <_vfiprintf_r+0xc6>
 800adac:	9b03      	ldr	r3, [sp, #12]
 800adae:	1d19      	adds	r1, r3, #4
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	9103      	str	r1, [sp, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	bfbb      	ittet	lt
 800adb8:	425b      	neglt	r3, r3
 800adba:	f042 0202 	orrlt.w	r2, r2, #2
 800adbe:	9307      	strge	r3, [sp, #28]
 800adc0:	9307      	strlt	r3, [sp, #28]
 800adc2:	bfb8      	it	lt
 800adc4:	9204      	strlt	r2, [sp, #16]
 800adc6:	7823      	ldrb	r3, [r4, #0]
 800adc8:	2b2e      	cmp	r3, #46	; 0x2e
 800adca:	d10c      	bne.n	800ade6 <_vfiprintf_r+0x15a>
 800adcc:	7863      	ldrb	r3, [r4, #1]
 800adce:	2b2a      	cmp	r3, #42	; 0x2a
 800add0:	d134      	bne.n	800ae3c <_vfiprintf_r+0x1b0>
 800add2:	9b03      	ldr	r3, [sp, #12]
 800add4:	3402      	adds	r4, #2
 800add6:	1d1a      	adds	r2, r3, #4
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	9203      	str	r2, [sp, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	bfb8      	it	lt
 800ade0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ade4:	9305      	str	r3, [sp, #20]
 800ade6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aeb0 <_vfiprintf_r+0x224>
 800adea:	2203      	movs	r2, #3
 800adec:	4650      	mov	r0, sl
 800adee:	7821      	ldrb	r1, [r4, #0]
 800adf0:	f000 fb7e 	bl	800b4f0 <memchr>
 800adf4:	b138      	cbz	r0, 800ae06 <_vfiprintf_r+0x17a>
 800adf6:	2240      	movs	r2, #64	; 0x40
 800adf8:	9b04      	ldr	r3, [sp, #16]
 800adfa:	eba0 000a 	sub.w	r0, r0, sl
 800adfe:	4082      	lsls	r2, r0
 800ae00:	4313      	orrs	r3, r2
 800ae02:	3401      	adds	r4, #1
 800ae04:	9304      	str	r3, [sp, #16]
 800ae06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae0a:	2206      	movs	r2, #6
 800ae0c:	4829      	ldr	r0, [pc, #164]	; (800aeb4 <_vfiprintf_r+0x228>)
 800ae0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae12:	f000 fb6d 	bl	800b4f0 <memchr>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d03f      	beq.n	800ae9a <_vfiprintf_r+0x20e>
 800ae1a:	4b27      	ldr	r3, [pc, #156]	; (800aeb8 <_vfiprintf_r+0x22c>)
 800ae1c:	bb1b      	cbnz	r3, 800ae66 <_vfiprintf_r+0x1da>
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	3307      	adds	r3, #7
 800ae22:	f023 0307 	bic.w	r3, r3, #7
 800ae26:	3308      	adds	r3, #8
 800ae28:	9303      	str	r3, [sp, #12]
 800ae2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae2c:	443b      	add	r3, r7
 800ae2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae30:	e768      	b.n	800ad04 <_vfiprintf_r+0x78>
 800ae32:	460c      	mov	r4, r1
 800ae34:	2001      	movs	r0, #1
 800ae36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae3a:	e7a6      	b.n	800ad8a <_vfiprintf_r+0xfe>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f04f 0c0a 	mov.w	ip, #10
 800ae42:	4619      	mov	r1, r3
 800ae44:	3401      	adds	r4, #1
 800ae46:	9305      	str	r3, [sp, #20]
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae4e:	3a30      	subs	r2, #48	; 0x30
 800ae50:	2a09      	cmp	r2, #9
 800ae52:	d903      	bls.n	800ae5c <_vfiprintf_r+0x1d0>
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d0c6      	beq.n	800ade6 <_vfiprintf_r+0x15a>
 800ae58:	9105      	str	r1, [sp, #20]
 800ae5a:	e7c4      	b.n	800ade6 <_vfiprintf_r+0x15a>
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	2301      	movs	r3, #1
 800ae60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae64:	e7f0      	b.n	800ae48 <_vfiprintf_r+0x1bc>
 800ae66:	ab03      	add	r3, sp, #12
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	462a      	mov	r2, r5
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	4b13      	ldr	r3, [pc, #76]	; (800aebc <_vfiprintf_r+0x230>)
 800ae70:	a904      	add	r1, sp, #16
 800ae72:	f3af 8000 	nop.w
 800ae76:	4607      	mov	r7, r0
 800ae78:	1c78      	adds	r0, r7, #1
 800ae7a:	d1d6      	bne.n	800ae2a <_vfiprintf_r+0x19e>
 800ae7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae7e:	07d9      	lsls	r1, r3, #31
 800ae80:	d405      	bmi.n	800ae8e <_vfiprintf_r+0x202>
 800ae82:	89ab      	ldrh	r3, [r5, #12]
 800ae84:	059a      	lsls	r2, r3, #22
 800ae86:	d402      	bmi.n	800ae8e <_vfiprintf_r+0x202>
 800ae88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae8a:	f7ff fdd4 	bl	800aa36 <__retarget_lock_release_recursive>
 800ae8e:	89ab      	ldrh	r3, [r5, #12]
 800ae90:	065b      	lsls	r3, r3, #25
 800ae92:	f53f af1d 	bmi.w	800acd0 <_vfiprintf_r+0x44>
 800ae96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae98:	e71c      	b.n	800acd4 <_vfiprintf_r+0x48>
 800ae9a:	ab03      	add	r3, sp, #12
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	462a      	mov	r2, r5
 800aea0:	4630      	mov	r0, r6
 800aea2:	4b06      	ldr	r3, [pc, #24]	; (800aebc <_vfiprintf_r+0x230>)
 800aea4:	a904      	add	r1, sp, #16
 800aea6:	f000 f87d 	bl	800afa4 <_printf_i>
 800aeaa:	e7e4      	b.n	800ae76 <_vfiprintf_r+0x1ea>
 800aeac:	0800b73e 	.word	0x0800b73e
 800aeb0:	0800b744 	.word	0x0800b744
 800aeb4:	0800b748 	.word	0x0800b748
 800aeb8:	00000000 	.word	0x00000000
 800aebc:	0800ac67 	.word	0x0800ac67

0800aec0 <_printf_common>:
 800aec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec4:	4616      	mov	r6, r2
 800aec6:	4699      	mov	r9, r3
 800aec8:	688a      	ldr	r2, [r1, #8]
 800aeca:	690b      	ldr	r3, [r1, #16]
 800aecc:	4607      	mov	r7, r0
 800aece:	4293      	cmp	r3, r2
 800aed0:	bfb8      	it	lt
 800aed2:	4613      	movlt	r3, r2
 800aed4:	6033      	str	r3, [r6, #0]
 800aed6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aeda:	460c      	mov	r4, r1
 800aedc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aee0:	b10a      	cbz	r2, 800aee6 <_printf_common+0x26>
 800aee2:	3301      	adds	r3, #1
 800aee4:	6033      	str	r3, [r6, #0]
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	0699      	lsls	r1, r3, #26
 800aeea:	bf42      	ittt	mi
 800aeec:	6833      	ldrmi	r3, [r6, #0]
 800aeee:	3302      	addmi	r3, #2
 800aef0:	6033      	strmi	r3, [r6, #0]
 800aef2:	6825      	ldr	r5, [r4, #0]
 800aef4:	f015 0506 	ands.w	r5, r5, #6
 800aef8:	d106      	bne.n	800af08 <_printf_common+0x48>
 800aefa:	f104 0a19 	add.w	sl, r4, #25
 800aefe:	68e3      	ldr	r3, [r4, #12]
 800af00:	6832      	ldr	r2, [r6, #0]
 800af02:	1a9b      	subs	r3, r3, r2
 800af04:	42ab      	cmp	r3, r5
 800af06:	dc2b      	bgt.n	800af60 <_printf_common+0xa0>
 800af08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af0c:	1e13      	subs	r3, r2, #0
 800af0e:	6822      	ldr	r2, [r4, #0]
 800af10:	bf18      	it	ne
 800af12:	2301      	movne	r3, #1
 800af14:	0692      	lsls	r2, r2, #26
 800af16:	d430      	bmi.n	800af7a <_printf_common+0xba>
 800af18:	4649      	mov	r1, r9
 800af1a:	4638      	mov	r0, r7
 800af1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af20:	47c0      	blx	r8
 800af22:	3001      	adds	r0, #1
 800af24:	d023      	beq.n	800af6e <_printf_common+0xae>
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	6922      	ldr	r2, [r4, #16]
 800af2a:	f003 0306 	and.w	r3, r3, #6
 800af2e:	2b04      	cmp	r3, #4
 800af30:	bf14      	ite	ne
 800af32:	2500      	movne	r5, #0
 800af34:	6833      	ldreq	r3, [r6, #0]
 800af36:	f04f 0600 	mov.w	r6, #0
 800af3a:	bf08      	it	eq
 800af3c:	68e5      	ldreq	r5, [r4, #12]
 800af3e:	f104 041a 	add.w	r4, r4, #26
 800af42:	bf08      	it	eq
 800af44:	1aed      	subeq	r5, r5, r3
 800af46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800af4a:	bf08      	it	eq
 800af4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af50:	4293      	cmp	r3, r2
 800af52:	bfc4      	itt	gt
 800af54:	1a9b      	subgt	r3, r3, r2
 800af56:	18ed      	addgt	r5, r5, r3
 800af58:	42b5      	cmp	r5, r6
 800af5a:	d11a      	bne.n	800af92 <_printf_common+0xd2>
 800af5c:	2000      	movs	r0, #0
 800af5e:	e008      	b.n	800af72 <_printf_common+0xb2>
 800af60:	2301      	movs	r3, #1
 800af62:	4652      	mov	r2, sl
 800af64:	4649      	mov	r1, r9
 800af66:	4638      	mov	r0, r7
 800af68:	47c0      	blx	r8
 800af6a:	3001      	adds	r0, #1
 800af6c:	d103      	bne.n	800af76 <_printf_common+0xb6>
 800af6e:	f04f 30ff 	mov.w	r0, #4294967295
 800af72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af76:	3501      	adds	r5, #1
 800af78:	e7c1      	b.n	800aefe <_printf_common+0x3e>
 800af7a:	2030      	movs	r0, #48	; 0x30
 800af7c:	18e1      	adds	r1, r4, r3
 800af7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af88:	4422      	add	r2, r4
 800af8a:	3302      	adds	r3, #2
 800af8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af90:	e7c2      	b.n	800af18 <_printf_common+0x58>
 800af92:	2301      	movs	r3, #1
 800af94:	4622      	mov	r2, r4
 800af96:	4649      	mov	r1, r9
 800af98:	4638      	mov	r0, r7
 800af9a:	47c0      	blx	r8
 800af9c:	3001      	adds	r0, #1
 800af9e:	d0e6      	beq.n	800af6e <_printf_common+0xae>
 800afa0:	3601      	adds	r6, #1
 800afa2:	e7d9      	b.n	800af58 <_printf_common+0x98>

0800afa4 <_printf_i>:
 800afa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afa8:	7e0f      	ldrb	r7, [r1, #24]
 800afaa:	4691      	mov	r9, r2
 800afac:	2f78      	cmp	r7, #120	; 0x78
 800afae:	4680      	mov	r8, r0
 800afb0:	460c      	mov	r4, r1
 800afb2:	469a      	mov	sl, r3
 800afb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afba:	d807      	bhi.n	800afcc <_printf_i+0x28>
 800afbc:	2f62      	cmp	r7, #98	; 0x62
 800afbe:	d80a      	bhi.n	800afd6 <_printf_i+0x32>
 800afc0:	2f00      	cmp	r7, #0
 800afc2:	f000 80d5 	beq.w	800b170 <_printf_i+0x1cc>
 800afc6:	2f58      	cmp	r7, #88	; 0x58
 800afc8:	f000 80c1 	beq.w	800b14e <_printf_i+0x1aa>
 800afcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afd4:	e03a      	b.n	800b04c <_printf_i+0xa8>
 800afd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800afda:	2b15      	cmp	r3, #21
 800afdc:	d8f6      	bhi.n	800afcc <_printf_i+0x28>
 800afde:	a101      	add	r1, pc, #4	; (adr r1, 800afe4 <_printf_i+0x40>)
 800afe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afe4:	0800b03d 	.word	0x0800b03d
 800afe8:	0800b051 	.word	0x0800b051
 800afec:	0800afcd 	.word	0x0800afcd
 800aff0:	0800afcd 	.word	0x0800afcd
 800aff4:	0800afcd 	.word	0x0800afcd
 800aff8:	0800afcd 	.word	0x0800afcd
 800affc:	0800b051 	.word	0x0800b051
 800b000:	0800afcd 	.word	0x0800afcd
 800b004:	0800afcd 	.word	0x0800afcd
 800b008:	0800afcd 	.word	0x0800afcd
 800b00c:	0800afcd 	.word	0x0800afcd
 800b010:	0800b157 	.word	0x0800b157
 800b014:	0800b07d 	.word	0x0800b07d
 800b018:	0800b111 	.word	0x0800b111
 800b01c:	0800afcd 	.word	0x0800afcd
 800b020:	0800afcd 	.word	0x0800afcd
 800b024:	0800b179 	.word	0x0800b179
 800b028:	0800afcd 	.word	0x0800afcd
 800b02c:	0800b07d 	.word	0x0800b07d
 800b030:	0800afcd 	.word	0x0800afcd
 800b034:	0800afcd 	.word	0x0800afcd
 800b038:	0800b119 	.word	0x0800b119
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	1d1a      	adds	r2, r3, #4
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	602a      	str	r2, [r5, #0]
 800b044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b04c:	2301      	movs	r3, #1
 800b04e:	e0a0      	b.n	800b192 <_printf_i+0x1ee>
 800b050:	6820      	ldr	r0, [r4, #0]
 800b052:	682b      	ldr	r3, [r5, #0]
 800b054:	0607      	lsls	r7, r0, #24
 800b056:	f103 0104 	add.w	r1, r3, #4
 800b05a:	6029      	str	r1, [r5, #0]
 800b05c:	d501      	bpl.n	800b062 <_printf_i+0xbe>
 800b05e:	681e      	ldr	r6, [r3, #0]
 800b060:	e003      	b.n	800b06a <_printf_i+0xc6>
 800b062:	0646      	lsls	r6, r0, #25
 800b064:	d5fb      	bpl.n	800b05e <_printf_i+0xba>
 800b066:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b06a:	2e00      	cmp	r6, #0
 800b06c:	da03      	bge.n	800b076 <_printf_i+0xd2>
 800b06e:	232d      	movs	r3, #45	; 0x2d
 800b070:	4276      	negs	r6, r6
 800b072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b076:	230a      	movs	r3, #10
 800b078:	4859      	ldr	r0, [pc, #356]	; (800b1e0 <_printf_i+0x23c>)
 800b07a:	e012      	b.n	800b0a2 <_printf_i+0xfe>
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	6820      	ldr	r0, [r4, #0]
 800b080:	1d19      	adds	r1, r3, #4
 800b082:	6029      	str	r1, [r5, #0]
 800b084:	0605      	lsls	r5, r0, #24
 800b086:	d501      	bpl.n	800b08c <_printf_i+0xe8>
 800b088:	681e      	ldr	r6, [r3, #0]
 800b08a:	e002      	b.n	800b092 <_printf_i+0xee>
 800b08c:	0641      	lsls	r1, r0, #25
 800b08e:	d5fb      	bpl.n	800b088 <_printf_i+0xe4>
 800b090:	881e      	ldrh	r6, [r3, #0]
 800b092:	2f6f      	cmp	r7, #111	; 0x6f
 800b094:	bf0c      	ite	eq
 800b096:	2308      	moveq	r3, #8
 800b098:	230a      	movne	r3, #10
 800b09a:	4851      	ldr	r0, [pc, #324]	; (800b1e0 <_printf_i+0x23c>)
 800b09c:	2100      	movs	r1, #0
 800b09e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0a2:	6865      	ldr	r5, [r4, #4]
 800b0a4:	2d00      	cmp	r5, #0
 800b0a6:	bfa8      	it	ge
 800b0a8:	6821      	ldrge	r1, [r4, #0]
 800b0aa:	60a5      	str	r5, [r4, #8]
 800b0ac:	bfa4      	itt	ge
 800b0ae:	f021 0104 	bicge.w	r1, r1, #4
 800b0b2:	6021      	strge	r1, [r4, #0]
 800b0b4:	b90e      	cbnz	r6, 800b0ba <_printf_i+0x116>
 800b0b6:	2d00      	cmp	r5, #0
 800b0b8:	d04b      	beq.n	800b152 <_printf_i+0x1ae>
 800b0ba:	4615      	mov	r5, r2
 800b0bc:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0c0:	fb03 6711 	mls	r7, r3, r1, r6
 800b0c4:	5dc7      	ldrb	r7, [r0, r7]
 800b0c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0ca:	4637      	mov	r7, r6
 800b0cc:	42bb      	cmp	r3, r7
 800b0ce:	460e      	mov	r6, r1
 800b0d0:	d9f4      	bls.n	800b0bc <_printf_i+0x118>
 800b0d2:	2b08      	cmp	r3, #8
 800b0d4:	d10b      	bne.n	800b0ee <_printf_i+0x14a>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	07de      	lsls	r6, r3, #31
 800b0da:	d508      	bpl.n	800b0ee <_printf_i+0x14a>
 800b0dc:	6923      	ldr	r3, [r4, #16]
 800b0de:	6861      	ldr	r1, [r4, #4]
 800b0e0:	4299      	cmp	r1, r3
 800b0e2:	bfde      	ittt	le
 800b0e4:	2330      	movle	r3, #48	; 0x30
 800b0e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0ee:	1b52      	subs	r2, r2, r5
 800b0f0:	6122      	str	r2, [r4, #16]
 800b0f2:	464b      	mov	r3, r9
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	4640      	mov	r0, r8
 800b0f8:	f8cd a000 	str.w	sl, [sp]
 800b0fc:	aa03      	add	r2, sp, #12
 800b0fe:	f7ff fedf 	bl	800aec0 <_printf_common>
 800b102:	3001      	adds	r0, #1
 800b104:	d14a      	bne.n	800b19c <_printf_i+0x1f8>
 800b106:	f04f 30ff 	mov.w	r0, #4294967295
 800b10a:	b004      	add	sp, #16
 800b10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	f043 0320 	orr.w	r3, r3, #32
 800b116:	6023      	str	r3, [r4, #0]
 800b118:	2778      	movs	r7, #120	; 0x78
 800b11a:	4832      	ldr	r0, [pc, #200]	; (800b1e4 <_printf_i+0x240>)
 800b11c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	6829      	ldr	r1, [r5, #0]
 800b124:	061f      	lsls	r7, r3, #24
 800b126:	f851 6b04 	ldr.w	r6, [r1], #4
 800b12a:	d402      	bmi.n	800b132 <_printf_i+0x18e>
 800b12c:	065f      	lsls	r7, r3, #25
 800b12e:	bf48      	it	mi
 800b130:	b2b6      	uxthmi	r6, r6
 800b132:	07df      	lsls	r7, r3, #31
 800b134:	bf48      	it	mi
 800b136:	f043 0320 	orrmi.w	r3, r3, #32
 800b13a:	6029      	str	r1, [r5, #0]
 800b13c:	bf48      	it	mi
 800b13e:	6023      	strmi	r3, [r4, #0]
 800b140:	b91e      	cbnz	r6, 800b14a <_printf_i+0x1a6>
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	f023 0320 	bic.w	r3, r3, #32
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	2310      	movs	r3, #16
 800b14c:	e7a6      	b.n	800b09c <_printf_i+0xf8>
 800b14e:	4824      	ldr	r0, [pc, #144]	; (800b1e0 <_printf_i+0x23c>)
 800b150:	e7e4      	b.n	800b11c <_printf_i+0x178>
 800b152:	4615      	mov	r5, r2
 800b154:	e7bd      	b.n	800b0d2 <_printf_i+0x12e>
 800b156:	682b      	ldr	r3, [r5, #0]
 800b158:	6826      	ldr	r6, [r4, #0]
 800b15a:	1d18      	adds	r0, r3, #4
 800b15c:	6961      	ldr	r1, [r4, #20]
 800b15e:	6028      	str	r0, [r5, #0]
 800b160:	0635      	lsls	r5, r6, #24
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	d501      	bpl.n	800b16a <_printf_i+0x1c6>
 800b166:	6019      	str	r1, [r3, #0]
 800b168:	e002      	b.n	800b170 <_printf_i+0x1cc>
 800b16a:	0670      	lsls	r0, r6, #25
 800b16c:	d5fb      	bpl.n	800b166 <_printf_i+0x1c2>
 800b16e:	8019      	strh	r1, [r3, #0]
 800b170:	2300      	movs	r3, #0
 800b172:	4615      	mov	r5, r2
 800b174:	6123      	str	r3, [r4, #16]
 800b176:	e7bc      	b.n	800b0f2 <_printf_i+0x14e>
 800b178:	682b      	ldr	r3, [r5, #0]
 800b17a:	2100      	movs	r1, #0
 800b17c:	1d1a      	adds	r2, r3, #4
 800b17e:	602a      	str	r2, [r5, #0]
 800b180:	681d      	ldr	r5, [r3, #0]
 800b182:	6862      	ldr	r2, [r4, #4]
 800b184:	4628      	mov	r0, r5
 800b186:	f000 f9b3 	bl	800b4f0 <memchr>
 800b18a:	b108      	cbz	r0, 800b190 <_printf_i+0x1ec>
 800b18c:	1b40      	subs	r0, r0, r5
 800b18e:	6060      	str	r0, [r4, #4]
 800b190:	6863      	ldr	r3, [r4, #4]
 800b192:	6123      	str	r3, [r4, #16]
 800b194:	2300      	movs	r3, #0
 800b196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b19a:	e7aa      	b.n	800b0f2 <_printf_i+0x14e>
 800b19c:	462a      	mov	r2, r5
 800b19e:	4649      	mov	r1, r9
 800b1a0:	4640      	mov	r0, r8
 800b1a2:	6923      	ldr	r3, [r4, #16]
 800b1a4:	47d0      	blx	sl
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	d0ad      	beq.n	800b106 <_printf_i+0x162>
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	079b      	lsls	r3, r3, #30
 800b1ae:	d413      	bmi.n	800b1d8 <_printf_i+0x234>
 800b1b0:	68e0      	ldr	r0, [r4, #12]
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	4298      	cmp	r0, r3
 800b1b6:	bfb8      	it	lt
 800b1b8:	4618      	movlt	r0, r3
 800b1ba:	e7a6      	b.n	800b10a <_printf_i+0x166>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	4632      	mov	r2, r6
 800b1c0:	4649      	mov	r1, r9
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	47d0      	blx	sl
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	d09d      	beq.n	800b106 <_printf_i+0x162>
 800b1ca:	3501      	adds	r5, #1
 800b1cc:	68e3      	ldr	r3, [r4, #12]
 800b1ce:	9903      	ldr	r1, [sp, #12]
 800b1d0:	1a5b      	subs	r3, r3, r1
 800b1d2:	42ab      	cmp	r3, r5
 800b1d4:	dcf2      	bgt.n	800b1bc <_printf_i+0x218>
 800b1d6:	e7eb      	b.n	800b1b0 <_printf_i+0x20c>
 800b1d8:	2500      	movs	r5, #0
 800b1da:	f104 0619 	add.w	r6, r4, #25
 800b1de:	e7f5      	b.n	800b1cc <_printf_i+0x228>
 800b1e0:	0800b74f 	.word	0x0800b74f
 800b1e4:	0800b760 	.word	0x0800b760

0800b1e8 <__sflush_r>:
 800b1e8:	898a      	ldrh	r2, [r1, #12]
 800b1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	0710      	lsls	r0, r2, #28
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	d457      	bmi.n	800b2a4 <__sflush_r+0xbc>
 800b1f4:	684b      	ldr	r3, [r1, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	dc04      	bgt.n	800b204 <__sflush_r+0x1c>
 800b1fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dc01      	bgt.n	800b204 <__sflush_r+0x1c>
 800b200:	2000      	movs	r0, #0
 800b202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b206:	2e00      	cmp	r6, #0
 800b208:	d0fa      	beq.n	800b200 <__sflush_r+0x18>
 800b20a:	2300      	movs	r3, #0
 800b20c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b210:	682f      	ldr	r7, [r5, #0]
 800b212:	6a21      	ldr	r1, [r4, #32]
 800b214:	602b      	str	r3, [r5, #0]
 800b216:	d032      	beq.n	800b27e <__sflush_r+0x96>
 800b218:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b21a:	89a3      	ldrh	r3, [r4, #12]
 800b21c:	075a      	lsls	r2, r3, #29
 800b21e:	d505      	bpl.n	800b22c <__sflush_r+0x44>
 800b220:	6863      	ldr	r3, [r4, #4]
 800b222:	1ac0      	subs	r0, r0, r3
 800b224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b226:	b10b      	cbz	r3, 800b22c <__sflush_r+0x44>
 800b228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b22a:	1ac0      	subs	r0, r0, r3
 800b22c:	2300      	movs	r3, #0
 800b22e:	4602      	mov	r2, r0
 800b230:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b232:	4628      	mov	r0, r5
 800b234:	6a21      	ldr	r1, [r4, #32]
 800b236:	47b0      	blx	r6
 800b238:	1c43      	adds	r3, r0, #1
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	d106      	bne.n	800b24c <__sflush_r+0x64>
 800b23e:	6829      	ldr	r1, [r5, #0]
 800b240:	291d      	cmp	r1, #29
 800b242:	d82b      	bhi.n	800b29c <__sflush_r+0xb4>
 800b244:	4a28      	ldr	r2, [pc, #160]	; (800b2e8 <__sflush_r+0x100>)
 800b246:	410a      	asrs	r2, r1
 800b248:	07d6      	lsls	r6, r2, #31
 800b24a:	d427      	bmi.n	800b29c <__sflush_r+0xb4>
 800b24c:	2200      	movs	r2, #0
 800b24e:	6062      	str	r2, [r4, #4]
 800b250:	6922      	ldr	r2, [r4, #16]
 800b252:	04d9      	lsls	r1, r3, #19
 800b254:	6022      	str	r2, [r4, #0]
 800b256:	d504      	bpl.n	800b262 <__sflush_r+0x7a>
 800b258:	1c42      	adds	r2, r0, #1
 800b25a:	d101      	bne.n	800b260 <__sflush_r+0x78>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	b903      	cbnz	r3, 800b262 <__sflush_r+0x7a>
 800b260:	6560      	str	r0, [r4, #84]	; 0x54
 800b262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b264:	602f      	str	r7, [r5, #0]
 800b266:	2900      	cmp	r1, #0
 800b268:	d0ca      	beq.n	800b200 <__sflush_r+0x18>
 800b26a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b26e:	4299      	cmp	r1, r3
 800b270:	d002      	beq.n	800b278 <__sflush_r+0x90>
 800b272:	4628      	mov	r0, r5
 800b274:	f7ff fbee 	bl	800aa54 <_free_r>
 800b278:	2000      	movs	r0, #0
 800b27a:	6360      	str	r0, [r4, #52]	; 0x34
 800b27c:	e7c1      	b.n	800b202 <__sflush_r+0x1a>
 800b27e:	2301      	movs	r3, #1
 800b280:	4628      	mov	r0, r5
 800b282:	47b0      	blx	r6
 800b284:	1c41      	adds	r1, r0, #1
 800b286:	d1c8      	bne.n	800b21a <__sflush_r+0x32>
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d0c5      	beq.n	800b21a <__sflush_r+0x32>
 800b28e:	2b1d      	cmp	r3, #29
 800b290:	d001      	beq.n	800b296 <__sflush_r+0xae>
 800b292:	2b16      	cmp	r3, #22
 800b294:	d101      	bne.n	800b29a <__sflush_r+0xb2>
 800b296:	602f      	str	r7, [r5, #0]
 800b298:	e7b2      	b.n	800b200 <__sflush_r+0x18>
 800b29a:	89a3      	ldrh	r3, [r4, #12]
 800b29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a0:	81a3      	strh	r3, [r4, #12]
 800b2a2:	e7ae      	b.n	800b202 <__sflush_r+0x1a>
 800b2a4:	690f      	ldr	r7, [r1, #16]
 800b2a6:	2f00      	cmp	r7, #0
 800b2a8:	d0aa      	beq.n	800b200 <__sflush_r+0x18>
 800b2aa:	0793      	lsls	r3, r2, #30
 800b2ac:	bf18      	it	ne
 800b2ae:	2300      	movne	r3, #0
 800b2b0:	680e      	ldr	r6, [r1, #0]
 800b2b2:	bf08      	it	eq
 800b2b4:	694b      	ldreq	r3, [r1, #20]
 800b2b6:	1bf6      	subs	r6, r6, r7
 800b2b8:	600f      	str	r7, [r1, #0]
 800b2ba:	608b      	str	r3, [r1, #8]
 800b2bc:	2e00      	cmp	r6, #0
 800b2be:	dd9f      	ble.n	800b200 <__sflush_r+0x18>
 800b2c0:	4633      	mov	r3, r6
 800b2c2:	463a      	mov	r2, r7
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	6a21      	ldr	r1, [r4, #32]
 800b2c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b2cc:	47e0      	blx	ip
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	dc06      	bgt.n	800b2e0 <__sflush_r+0xf8>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	e790      	b.n	800b202 <__sflush_r+0x1a>
 800b2e0:	4407      	add	r7, r0
 800b2e2:	1a36      	subs	r6, r6, r0
 800b2e4:	e7ea      	b.n	800b2bc <__sflush_r+0xd4>
 800b2e6:	bf00      	nop
 800b2e8:	dfbffffe 	.word	0xdfbffffe

0800b2ec <_fflush_r>:
 800b2ec:	b538      	push	{r3, r4, r5, lr}
 800b2ee:	690b      	ldr	r3, [r1, #16]
 800b2f0:	4605      	mov	r5, r0
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	b913      	cbnz	r3, 800b2fc <_fflush_r+0x10>
 800b2f6:	2500      	movs	r5, #0
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}
 800b2fc:	b118      	cbz	r0, 800b306 <_fflush_r+0x1a>
 800b2fe:	6a03      	ldr	r3, [r0, #32]
 800b300:	b90b      	cbnz	r3, 800b306 <_fflush_r+0x1a>
 800b302:	f7ff fa8b 	bl	800a81c <__sinit>
 800b306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0f3      	beq.n	800b2f6 <_fflush_r+0xa>
 800b30e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b310:	07d0      	lsls	r0, r2, #31
 800b312:	d404      	bmi.n	800b31e <_fflush_r+0x32>
 800b314:	0599      	lsls	r1, r3, #22
 800b316:	d402      	bmi.n	800b31e <_fflush_r+0x32>
 800b318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b31a:	f7ff fb8b 	bl	800aa34 <__retarget_lock_acquire_recursive>
 800b31e:	4628      	mov	r0, r5
 800b320:	4621      	mov	r1, r4
 800b322:	f7ff ff61 	bl	800b1e8 <__sflush_r>
 800b326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b328:	4605      	mov	r5, r0
 800b32a:	07da      	lsls	r2, r3, #31
 800b32c:	d4e4      	bmi.n	800b2f8 <_fflush_r+0xc>
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	059b      	lsls	r3, r3, #22
 800b332:	d4e1      	bmi.n	800b2f8 <_fflush_r+0xc>
 800b334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b336:	f7ff fb7e 	bl	800aa36 <__retarget_lock_release_recursive>
 800b33a:	e7dd      	b.n	800b2f8 <_fflush_r+0xc>

0800b33c <_putc_r>:
 800b33c:	b570      	push	{r4, r5, r6, lr}
 800b33e:	460d      	mov	r5, r1
 800b340:	4614      	mov	r4, r2
 800b342:	4606      	mov	r6, r0
 800b344:	b118      	cbz	r0, 800b34e <_putc_r+0x12>
 800b346:	6a03      	ldr	r3, [r0, #32]
 800b348:	b90b      	cbnz	r3, 800b34e <_putc_r+0x12>
 800b34a:	f7ff fa67 	bl	800a81c <__sinit>
 800b34e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b350:	07d8      	lsls	r0, r3, #31
 800b352:	d405      	bmi.n	800b360 <_putc_r+0x24>
 800b354:	89a3      	ldrh	r3, [r4, #12]
 800b356:	0599      	lsls	r1, r3, #22
 800b358:	d402      	bmi.n	800b360 <_putc_r+0x24>
 800b35a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b35c:	f7ff fb6a 	bl	800aa34 <__retarget_lock_acquire_recursive>
 800b360:	68a3      	ldr	r3, [r4, #8]
 800b362:	3b01      	subs	r3, #1
 800b364:	2b00      	cmp	r3, #0
 800b366:	60a3      	str	r3, [r4, #8]
 800b368:	da05      	bge.n	800b376 <_putc_r+0x3a>
 800b36a:	69a2      	ldr	r2, [r4, #24]
 800b36c:	4293      	cmp	r3, r2
 800b36e:	db12      	blt.n	800b396 <_putc_r+0x5a>
 800b370:	b2eb      	uxtb	r3, r5
 800b372:	2b0a      	cmp	r3, #10
 800b374:	d00f      	beq.n	800b396 <_putc_r+0x5a>
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	6022      	str	r2, [r4, #0]
 800b37c:	701d      	strb	r5, [r3, #0]
 800b37e:	b2ed      	uxtb	r5, r5
 800b380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b382:	07da      	lsls	r2, r3, #31
 800b384:	d405      	bmi.n	800b392 <_putc_r+0x56>
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	059b      	lsls	r3, r3, #22
 800b38a:	d402      	bmi.n	800b392 <_putc_r+0x56>
 800b38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b38e:	f7ff fb52 	bl	800aa36 <__retarget_lock_release_recursive>
 800b392:	4628      	mov	r0, r5
 800b394:	bd70      	pop	{r4, r5, r6, pc}
 800b396:	4629      	mov	r1, r5
 800b398:	4622      	mov	r2, r4
 800b39a:	4630      	mov	r0, r6
 800b39c:	f000 f802 	bl	800b3a4 <__swbuf_r>
 800b3a0:	4605      	mov	r5, r0
 800b3a2:	e7ed      	b.n	800b380 <_putc_r+0x44>

0800b3a4 <__swbuf_r>:
 800b3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a6:	460e      	mov	r6, r1
 800b3a8:	4614      	mov	r4, r2
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	b118      	cbz	r0, 800b3b6 <__swbuf_r+0x12>
 800b3ae:	6a03      	ldr	r3, [r0, #32]
 800b3b0:	b90b      	cbnz	r3, 800b3b6 <__swbuf_r+0x12>
 800b3b2:	f7ff fa33 	bl	800a81c <__sinit>
 800b3b6:	69a3      	ldr	r3, [r4, #24]
 800b3b8:	60a3      	str	r3, [r4, #8]
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	071a      	lsls	r2, r3, #28
 800b3be:	d525      	bpl.n	800b40c <__swbuf_r+0x68>
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	b31b      	cbz	r3, 800b40c <__swbuf_r+0x68>
 800b3c4:	6823      	ldr	r3, [r4, #0]
 800b3c6:	6922      	ldr	r2, [r4, #16]
 800b3c8:	b2f6      	uxtb	r6, r6
 800b3ca:	1a98      	subs	r0, r3, r2
 800b3cc:	6963      	ldr	r3, [r4, #20]
 800b3ce:	4637      	mov	r7, r6
 800b3d0:	4283      	cmp	r3, r0
 800b3d2:	dc04      	bgt.n	800b3de <__swbuf_r+0x3a>
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f7ff ff88 	bl	800b2ec <_fflush_r>
 800b3dc:	b9e0      	cbnz	r0, 800b418 <__swbuf_r+0x74>
 800b3de:	68a3      	ldr	r3, [r4, #8]
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	60a3      	str	r3, [r4, #8]
 800b3e4:	6823      	ldr	r3, [r4, #0]
 800b3e6:	1c5a      	adds	r2, r3, #1
 800b3e8:	6022      	str	r2, [r4, #0]
 800b3ea:	701e      	strb	r6, [r3, #0]
 800b3ec:	6962      	ldr	r2, [r4, #20]
 800b3ee:	1c43      	adds	r3, r0, #1
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d004      	beq.n	800b3fe <__swbuf_r+0x5a>
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	07db      	lsls	r3, r3, #31
 800b3f8:	d506      	bpl.n	800b408 <__swbuf_r+0x64>
 800b3fa:	2e0a      	cmp	r6, #10
 800b3fc:	d104      	bne.n	800b408 <__swbuf_r+0x64>
 800b3fe:	4621      	mov	r1, r4
 800b400:	4628      	mov	r0, r5
 800b402:	f7ff ff73 	bl	800b2ec <_fflush_r>
 800b406:	b938      	cbnz	r0, 800b418 <__swbuf_r+0x74>
 800b408:	4638      	mov	r0, r7
 800b40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40c:	4621      	mov	r1, r4
 800b40e:	4628      	mov	r0, r5
 800b410:	f000 f806 	bl	800b420 <__swsetup_r>
 800b414:	2800      	cmp	r0, #0
 800b416:	d0d5      	beq.n	800b3c4 <__swbuf_r+0x20>
 800b418:	f04f 37ff 	mov.w	r7, #4294967295
 800b41c:	e7f4      	b.n	800b408 <__swbuf_r+0x64>
	...

0800b420 <__swsetup_r>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4b2a      	ldr	r3, [pc, #168]	; (800b4cc <__swsetup_r+0xac>)
 800b424:	4605      	mov	r5, r0
 800b426:	6818      	ldr	r0, [r3, #0]
 800b428:	460c      	mov	r4, r1
 800b42a:	b118      	cbz	r0, 800b434 <__swsetup_r+0x14>
 800b42c:	6a03      	ldr	r3, [r0, #32]
 800b42e:	b90b      	cbnz	r3, 800b434 <__swsetup_r+0x14>
 800b430:	f7ff f9f4 	bl	800a81c <__sinit>
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b43a:	0718      	lsls	r0, r3, #28
 800b43c:	d422      	bmi.n	800b484 <__swsetup_r+0x64>
 800b43e:	06d9      	lsls	r1, r3, #27
 800b440:	d407      	bmi.n	800b452 <__swsetup_r+0x32>
 800b442:	2309      	movs	r3, #9
 800b444:	602b      	str	r3, [r5, #0]
 800b446:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b44a:	f04f 30ff 	mov.w	r0, #4294967295
 800b44e:	81a3      	strh	r3, [r4, #12]
 800b450:	e034      	b.n	800b4bc <__swsetup_r+0x9c>
 800b452:	0758      	lsls	r0, r3, #29
 800b454:	d512      	bpl.n	800b47c <__swsetup_r+0x5c>
 800b456:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b458:	b141      	cbz	r1, 800b46c <__swsetup_r+0x4c>
 800b45a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b45e:	4299      	cmp	r1, r3
 800b460:	d002      	beq.n	800b468 <__swsetup_r+0x48>
 800b462:	4628      	mov	r0, r5
 800b464:	f7ff faf6 	bl	800aa54 <_free_r>
 800b468:	2300      	movs	r3, #0
 800b46a:	6363      	str	r3, [r4, #52]	; 0x34
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b472:	81a3      	strh	r3, [r4, #12]
 800b474:	2300      	movs	r3, #0
 800b476:	6063      	str	r3, [r4, #4]
 800b478:	6923      	ldr	r3, [r4, #16]
 800b47a:	6023      	str	r3, [r4, #0]
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	f043 0308 	orr.w	r3, r3, #8
 800b482:	81a3      	strh	r3, [r4, #12]
 800b484:	6923      	ldr	r3, [r4, #16]
 800b486:	b94b      	cbnz	r3, 800b49c <__swsetup_r+0x7c>
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b48e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b492:	d003      	beq.n	800b49c <__swsetup_r+0x7c>
 800b494:	4621      	mov	r1, r4
 800b496:	4628      	mov	r0, r5
 800b498:	f000 f85d 	bl	800b556 <__smakebuf_r>
 800b49c:	89a0      	ldrh	r0, [r4, #12]
 800b49e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4a2:	f010 0301 	ands.w	r3, r0, #1
 800b4a6:	d00a      	beq.n	800b4be <__swsetup_r+0x9e>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60a3      	str	r3, [r4, #8]
 800b4ac:	6963      	ldr	r3, [r4, #20]
 800b4ae:	425b      	negs	r3, r3
 800b4b0:	61a3      	str	r3, [r4, #24]
 800b4b2:	6923      	ldr	r3, [r4, #16]
 800b4b4:	b943      	cbnz	r3, 800b4c8 <__swsetup_r+0xa8>
 800b4b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4ba:	d1c4      	bne.n	800b446 <__swsetup_r+0x26>
 800b4bc:	bd38      	pop	{r3, r4, r5, pc}
 800b4be:	0781      	lsls	r1, r0, #30
 800b4c0:	bf58      	it	pl
 800b4c2:	6963      	ldrpl	r3, [r4, #20]
 800b4c4:	60a3      	str	r3, [r4, #8]
 800b4c6:	e7f4      	b.n	800b4b2 <__swsetup_r+0x92>
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	e7f7      	b.n	800b4bc <__swsetup_r+0x9c>
 800b4cc:	20000134 	.word	0x20000134

0800b4d0 <_sbrk_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	4d05      	ldr	r5, [pc, #20]	; (800b4ec <_sbrk_r+0x1c>)
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	4608      	mov	r0, r1
 800b4da:	602b      	str	r3, [r5, #0]
 800b4dc:	f7f5 fcd2 	bl	8000e84 <_sbrk>
 800b4e0:	1c43      	adds	r3, r0, #1
 800b4e2:	d102      	bne.n	800b4ea <_sbrk_r+0x1a>
 800b4e4:	682b      	ldr	r3, [r5, #0]
 800b4e6:	b103      	cbz	r3, 800b4ea <_sbrk_r+0x1a>
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	bd38      	pop	{r3, r4, r5, pc}
 800b4ec:	20001350 	.word	0x20001350

0800b4f0 <memchr>:
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	b510      	push	{r4, lr}
 800b4f4:	b2c9      	uxtb	r1, r1
 800b4f6:	4402      	add	r2, r0
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	d101      	bne.n	800b502 <memchr+0x12>
 800b4fe:	2000      	movs	r0, #0
 800b500:	e003      	b.n	800b50a <memchr+0x1a>
 800b502:	7804      	ldrb	r4, [r0, #0]
 800b504:	3301      	adds	r3, #1
 800b506:	428c      	cmp	r4, r1
 800b508:	d1f6      	bne.n	800b4f8 <memchr+0x8>
 800b50a:	bd10      	pop	{r4, pc}

0800b50c <__swhatbuf_r>:
 800b50c:	b570      	push	{r4, r5, r6, lr}
 800b50e:	460c      	mov	r4, r1
 800b510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b514:	4615      	mov	r5, r2
 800b516:	2900      	cmp	r1, #0
 800b518:	461e      	mov	r6, r3
 800b51a:	b096      	sub	sp, #88	; 0x58
 800b51c:	da0c      	bge.n	800b538 <__swhatbuf_r+0x2c>
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	2100      	movs	r1, #0
 800b522:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b526:	bf0c      	ite	eq
 800b528:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b52c:	2340      	movne	r3, #64	; 0x40
 800b52e:	2000      	movs	r0, #0
 800b530:	6031      	str	r1, [r6, #0]
 800b532:	602b      	str	r3, [r5, #0]
 800b534:	b016      	add	sp, #88	; 0x58
 800b536:	bd70      	pop	{r4, r5, r6, pc}
 800b538:	466a      	mov	r2, sp
 800b53a:	f000 f849 	bl	800b5d0 <_fstat_r>
 800b53e:	2800      	cmp	r0, #0
 800b540:	dbed      	blt.n	800b51e <__swhatbuf_r+0x12>
 800b542:	9901      	ldr	r1, [sp, #4]
 800b544:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b548:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b54c:	4259      	negs	r1, r3
 800b54e:	4159      	adcs	r1, r3
 800b550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b554:	e7eb      	b.n	800b52e <__swhatbuf_r+0x22>

0800b556 <__smakebuf_r>:
 800b556:	898b      	ldrh	r3, [r1, #12]
 800b558:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b55a:	079d      	lsls	r5, r3, #30
 800b55c:	4606      	mov	r6, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	d507      	bpl.n	800b572 <__smakebuf_r+0x1c>
 800b562:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b566:	6023      	str	r3, [r4, #0]
 800b568:	6123      	str	r3, [r4, #16]
 800b56a:	2301      	movs	r3, #1
 800b56c:	6163      	str	r3, [r4, #20]
 800b56e:	b002      	add	sp, #8
 800b570:	bd70      	pop	{r4, r5, r6, pc}
 800b572:	466a      	mov	r2, sp
 800b574:	ab01      	add	r3, sp, #4
 800b576:	f7ff ffc9 	bl	800b50c <__swhatbuf_r>
 800b57a:	9900      	ldr	r1, [sp, #0]
 800b57c:	4605      	mov	r5, r0
 800b57e:	4630      	mov	r0, r6
 800b580:	f7ff fad0 	bl	800ab24 <_malloc_r>
 800b584:	b948      	cbnz	r0, 800b59a <__smakebuf_r+0x44>
 800b586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b58a:	059a      	lsls	r2, r3, #22
 800b58c:	d4ef      	bmi.n	800b56e <__smakebuf_r+0x18>
 800b58e:	f023 0303 	bic.w	r3, r3, #3
 800b592:	f043 0302 	orr.w	r3, r3, #2
 800b596:	81a3      	strh	r3, [r4, #12]
 800b598:	e7e3      	b.n	800b562 <__smakebuf_r+0xc>
 800b59a:	89a3      	ldrh	r3, [r4, #12]
 800b59c:	6020      	str	r0, [r4, #0]
 800b59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5a2:	81a3      	strh	r3, [r4, #12]
 800b5a4:	9b00      	ldr	r3, [sp, #0]
 800b5a6:	6120      	str	r0, [r4, #16]
 800b5a8:	6163      	str	r3, [r4, #20]
 800b5aa:	9b01      	ldr	r3, [sp, #4]
 800b5ac:	b15b      	cbz	r3, 800b5c6 <__smakebuf_r+0x70>
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5b4:	f000 f81e 	bl	800b5f4 <_isatty_r>
 800b5b8:	b128      	cbz	r0, 800b5c6 <__smakebuf_r+0x70>
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f023 0303 	bic.w	r3, r3, #3
 800b5c0:	f043 0301 	orr.w	r3, r3, #1
 800b5c4:	81a3      	strh	r3, [r4, #12]
 800b5c6:	89a3      	ldrh	r3, [r4, #12]
 800b5c8:	431d      	orrs	r5, r3
 800b5ca:	81a5      	strh	r5, [r4, #12]
 800b5cc:	e7cf      	b.n	800b56e <__smakebuf_r+0x18>
	...

0800b5d0 <_fstat_r>:
 800b5d0:	b538      	push	{r3, r4, r5, lr}
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4d06      	ldr	r5, [pc, #24]	; (800b5f0 <_fstat_r+0x20>)
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	4608      	mov	r0, r1
 800b5da:	4611      	mov	r1, r2
 800b5dc:	602b      	str	r3, [r5, #0]
 800b5de:	f7f5 fc2b 	bl	8000e38 <_fstat>
 800b5e2:	1c43      	adds	r3, r0, #1
 800b5e4:	d102      	bne.n	800b5ec <_fstat_r+0x1c>
 800b5e6:	682b      	ldr	r3, [r5, #0]
 800b5e8:	b103      	cbz	r3, 800b5ec <_fstat_r+0x1c>
 800b5ea:	6023      	str	r3, [r4, #0]
 800b5ec:	bd38      	pop	{r3, r4, r5, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20001350 	.word	0x20001350

0800b5f4 <_isatty_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	4d05      	ldr	r5, [pc, #20]	; (800b610 <_isatty_r+0x1c>)
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	4608      	mov	r0, r1
 800b5fe:	602b      	str	r3, [r5, #0]
 800b600:	f7f5 fc29 	bl	8000e56 <_isatty>
 800b604:	1c43      	adds	r3, r0, #1
 800b606:	d102      	bne.n	800b60e <_isatty_r+0x1a>
 800b608:	682b      	ldr	r3, [r5, #0]
 800b60a:	b103      	cbz	r3, 800b60e <_isatty_r+0x1a>
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	bd38      	pop	{r3, r4, r5, pc}
 800b610:	20001350 	.word	0x20001350

0800b614 <_init>:
 800b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b616:	bf00      	nop
 800b618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b61a:	bc08      	pop	{r3}
 800b61c:	469e      	mov	lr, r3
 800b61e:	4770      	bx	lr

0800b620 <_fini>:
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b622:	bf00      	nop
 800b624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b626:	bc08      	pop	{r3}
 800b628:	469e      	mov	lr, r3
 800b62a:	4770      	bx	lr
