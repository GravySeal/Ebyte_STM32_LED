
Ebyte_LoRa_LEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080097b0  080097b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800988c  0800988c  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800988c  0800988c  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800988c  0800988c  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800988c  0800988c  0001988c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009890  08009890  00019890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08009894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  200000dc  08009970  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010f0  08009970  000210f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014829  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034bb  00000000  00000000  00034971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  00037e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8e  00000000  00000000  00039118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a6b4  00000000  00000000  00039fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001758c  00000000  00000000  0005465a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f5f2  00000000  00000000  0006bbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e50  00000000  00000000  000fb1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00100028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08009798 	.word	0x08009798

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	08009798 	.word	0x08009798

0800014c <initialise_e32>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void initialise_e32()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000156:	4850      	ldr	r0, [pc, #320]	; (8000298 <initialise_e32+0x14c>)
 8000158:	f001 f8ce 	bl	80012f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	2180      	movs	r1, #128	; 0x80
 8000160:	484d      	ldr	r0, [pc, #308]	; (8000298 <initialise_e32+0x14c>)
 8000162:	f001 f8c9 	bl	80012f8 <HAL_GPIO_WritePin>

	  Tx_data[0] = 0xC1;
 8000166:	4b4d      	ldr	r3, [pc, #308]	; (800029c <initialise_e32+0x150>)
 8000168:	22c1      	movs	r2, #193	; 0xc1
 800016a:	701a      	strb	r2, [r3, #0]
	  Tx_data[1] = 0xC1;
 800016c:	4b4b      	ldr	r3, [pc, #300]	; (800029c <initialise_e32+0x150>)
 800016e:	22c1      	movs	r2, #193	; 0xc1
 8000170:	705a      	strb	r2, [r3, #1]
	  Tx_data[2] = 0xC1;
 8000172:	4b4a      	ldr	r3, [pc, #296]	; (800029c <initialise_e32+0x150>)
 8000174:	22c1      	movs	r2, #193	; 0xc1
 8000176:	709a      	strb	r2, [r3, #2]

	  HAL_UART_Transmit(&huart1, Tx_data, 3, 1000);
 8000178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800017c:	2203      	movs	r2, #3
 800017e:	4947      	ldr	r1, [pc, #284]	; (800029c <initialise_e32+0x150>)
 8000180:	4847      	ldr	r0, [pc, #284]	; (80002a0 <initialise_e32+0x154>)
 8000182:	f003 ff57 	bl	8004034 <HAL_UART_Transmit>

	  HAL_UART_Receive(&huart1, Rx_data, 6, 1000);
 8000186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018a:	2206      	movs	r2, #6
 800018c:	4945      	ldr	r1, [pc, #276]	; (80002a4 <initialise_e32+0x158>)
 800018e:	4844      	ldr	r0, [pc, #272]	; (80002a0 <initialise_e32+0x154>)
 8000190:	f003 ffd3 	bl	800413a <HAL_UART_Receive>

	  HAL_Delay(100);
 8000194:	2064      	movs	r0, #100	; 0x64
 8000196:	f000 fd47 	bl	8000c28 <HAL_Delay>

	  Tx_data[0] = 0xC0;
 800019a:	4b40      	ldr	r3, [pc, #256]	; (800029c <initialise_e32+0x150>)
 800019c:	22c0      	movs	r2, #192	; 0xc0
 800019e:	701a      	strb	r2, [r3, #0]
	  Tx_data[1] = 0x00;
 80001a0:	4b3e      	ldr	r3, [pc, #248]	; (800029c <initialise_e32+0x150>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	705a      	strb	r2, [r3, #1]
	  Tx_data[2] = 0x00;
 80001a6:	4b3d      	ldr	r3, [pc, #244]	; (800029c <initialise_e32+0x150>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	709a      	strb	r2, [r3, #2]
	  Tx_data[3] = 0x3D;
 80001ac:	4b3b      	ldr	r3, [pc, #236]	; (800029c <initialise_e32+0x150>)
 80001ae:	223d      	movs	r2, #61	; 0x3d
 80001b0:	70da      	strb	r2, [r3, #3]
	  Tx_data[4] = 0x17;
 80001b2:	4b3a      	ldr	r3, [pc, #232]	; (800029c <initialise_e32+0x150>)
 80001b4:	2217      	movs	r2, #23
 80001b6:	711a      	strb	r2, [r3, #4]
	  Tx_data[5] = 0x80;
 80001b8:	4b38      	ldr	r3, [pc, #224]	; (800029c <initialise_e32+0x150>)
 80001ba:	2280      	movs	r2, #128	; 0x80
 80001bc:	715a      	strb	r2, [r3, #5]

	  HAL_UART_Transmit(&huart1, Tx_data, 6, 1000);
 80001be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001c2:	2206      	movs	r2, #6
 80001c4:	4935      	ldr	r1, [pc, #212]	; (800029c <initialise_e32+0x150>)
 80001c6:	4836      	ldr	r0, [pc, #216]	; (80002a0 <initialise_e32+0x154>)
 80001c8:	f003 ff34 	bl	8004034 <HAL_UART_Transmit>

	  HAL_UART_Receive(&huart1, Rx_data, 6, 1000);
 80001cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d0:	2206      	movs	r2, #6
 80001d2:	4934      	ldr	r1, [pc, #208]	; (80002a4 <initialise_e32+0x158>)
 80001d4:	4832      	ldr	r0, [pc, #200]	; (80002a0 <initialise_e32+0x154>)
 80001d6:	f003 ffb0 	bl	800413a <HAL_UART_Receive>

	  HAL_Delay(100);
 80001da:	2064      	movs	r0, #100	; 0x64
 80001dc:	f000 fd24 	bl	8000c28 <HAL_Delay>

	  Tx_data[0] = 0xC1;
 80001e0:	4b2e      	ldr	r3, [pc, #184]	; (800029c <initialise_e32+0x150>)
 80001e2:	22c1      	movs	r2, #193	; 0xc1
 80001e4:	701a      	strb	r2, [r3, #0]
	  Tx_data[1] = 0xC1;
 80001e6:	4b2d      	ldr	r3, [pc, #180]	; (800029c <initialise_e32+0x150>)
 80001e8:	22c1      	movs	r2, #193	; 0xc1
 80001ea:	705a      	strb	r2, [r3, #1]
	  Tx_data[2] = 0xC1;
 80001ec:	4b2b      	ldr	r3, [pc, #172]	; (800029c <initialise_e32+0x150>)
 80001ee:	22c1      	movs	r2, #193	; 0xc1
 80001f0:	709a      	strb	r2, [r3, #2]

	  Rx_data[0] = 0;
 80001f2:	4b2c      	ldr	r3, [pc, #176]	; (80002a4 <initialise_e32+0x158>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	701a      	strb	r2, [r3, #0]
	  Rx_data[1] = 0;
 80001f8:	4b2a      	ldr	r3, [pc, #168]	; (80002a4 <initialise_e32+0x158>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	705a      	strb	r2, [r3, #1]
	  Rx_data[2] = 0;
 80001fe:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <initialise_e32+0x158>)
 8000200:	2200      	movs	r2, #0
 8000202:	709a      	strb	r2, [r3, #2]
	  Rx_data[3] = 0;
 8000204:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <initialise_e32+0x158>)
 8000206:	2200      	movs	r2, #0
 8000208:	70da      	strb	r2, [r3, #3]
	  Rx_data[4] = 0;
 800020a:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <initialise_e32+0x158>)
 800020c:	2200      	movs	r2, #0
 800020e:	711a      	strb	r2, [r3, #4]
	  Rx_data[5] = 0;
 8000210:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <initialise_e32+0x158>)
 8000212:	2200      	movs	r2, #0
 8000214:	715a      	strb	r2, [r3, #5]

	  HAL_UART_Transmit(&huart1, Tx_data, 3, 1000);
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	2203      	movs	r2, #3
 800021c:	491f      	ldr	r1, [pc, #124]	; (800029c <initialise_e32+0x150>)
 800021e:	4820      	ldr	r0, [pc, #128]	; (80002a0 <initialise_e32+0x154>)
 8000220:	f003 ff08 	bl	8004034 <HAL_UART_Transmit>

	  HAL_UART_Receive(&huart1, Rx_data, 6, 1000);
 8000224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000228:	2206      	movs	r2, #6
 800022a:	491e      	ldr	r1, [pc, #120]	; (80002a4 <initialise_e32+0x158>)
 800022c:	481c      	ldr	r0, [pc, #112]	; (80002a0 <initialise_e32+0x154>)
 800022e:	f003 ff84 	bl	800413a <HAL_UART_Receive>

	  HAL_Delay(100);
 8000232:	2064      	movs	r0, #100	; 0x64
 8000234:	f000 fcf8 	bl	8000c28 <HAL_Delay>

	  HAL_UART_Transmit(&huart1, Tx_data, 3, 1000);
 8000238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800023c:	2203      	movs	r2, #3
 800023e:	4917      	ldr	r1, [pc, #92]	; (800029c <initialise_e32+0x150>)
 8000240:	4817      	ldr	r0, [pc, #92]	; (80002a0 <initialise_e32+0x154>)
 8000242:	f003 fef7 	bl	8004034 <HAL_UART_Transmit>

	  HAL_UART_Receive(&huart1, Rx_data, 6, 1000);
 8000246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024a:	2206      	movs	r2, #6
 800024c:	4915      	ldr	r1, [pc, #84]	; (80002a4 <initialise_e32+0x158>)
 800024e:	4814      	ldr	r0, [pc, #80]	; (80002a0 <initialise_e32+0x154>)
 8000250:	f003 ff73 	bl	800413a <HAL_UART_Receive>

	  HAL_Delay(100);
 8000254:	2064      	movs	r0, #100	; 0x64
 8000256:	f000 fce7 	bl	8000c28 <HAL_Delay>

	  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <initialise_e32+0x14c>)
 8000262:	f001 f849 	bl	80012f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	480b      	ldr	r0, [pc, #44]	; (8000298 <initialise_e32+0x14c>)
 800026c:	f001 f844 	bl	80012f8 <HAL_GPIO_WritePin>

	  HAL_Delay(100);
 8000270:	2064      	movs	r0, #100	; 0x64
 8000272:	f000 fcd9 	bl	8000c28 <HAL_Delay>

	  USART1 -> CR1 &= ~(USART_CR1_UE);
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <initialise_e32+0x15c>)
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <initialise_e32+0x15c>)
 800027c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000280:	60d3      	str	r3, [r2, #12]
	  USART1 -> BRR = 0x8b;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <initialise_e32+0x15c>)
 8000284:	228b      	movs	r2, #139	; 0x8b
 8000286:	609a      	str	r2, [r3, #8]
	  USART1 -> CR1 |= USART_CR1_UE;
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <initialise_e32+0x15c>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <initialise_e32+0x15c>)
 800028e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000292:	60d3      	str	r3, [r2, #12]
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40010c00 	.word	0x40010c00
 800029c:	200000f8 	.word	0x200000f8
 80002a0:	20000388 	.word	0x20000388
 80002a4:	200001f8 	.word	0x200001f8
 80002a8:	40013800 	.word	0x40013800

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int32_t CH1_DC = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b6:	f000 fc55 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ba:	f000 f83d 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002be:	f000 f9c7 	bl	8000650 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002c2:	f000 f893 	bl	80003ec <MX_TIM2_Init>
  MX_TIM3_Init();
 80002c6:	f000 f8ff 	bl	80004c8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80002ca:	f000 f96d 	bl	80005a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80002ce:	f000 f995 	bl	80005fc <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80002d2:	f008 fe35 	bl	8008f40 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  initialise_e32();
 80002d6:	f7ff ff39 	bl	800014c <initialise_e32>

  HAL_UART_Receive_IT(&huart1, Rx_data, 10);
 80002da:	220a      	movs	r2, #10
 80002dc:	4913      	ldr	r1, [pc, #76]	; (800032c <main+0x80>)
 80002de:	4814      	ldr	r0, [pc, #80]	; (8000330 <main+0x84>)
 80002e0:	f003 ffbd 	bl	800425e <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002e4:	2100      	movs	r1, #0
 80002e6:	4813      	ldr	r0, [pc, #76]	; (8000334 <main+0x88>)
 80002e8:	f003 fa84 	bl	80037f4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      while(CH1_DC < 65535)
 80002ec:	e009      	b.n	8000302 <main+0x56>
      {
          TIM2->CCR1 = CH1_DC;
 80002ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	6353      	str	r3, [r2, #52]	; 0x34
          CH1_DC += 70;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3346      	adds	r3, #70	; 0x46
 80002fa:	607b      	str	r3, [r7, #4]
          HAL_Delay(1);
 80002fc:	2001      	movs	r0, #1
 80002fe:	f000 fc93 	bl	8000c28 <HAL_Delay>
      while(CH1_DC < 65535)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000308:	4293      	cmp	r3, r2
 800030a:	ddf0      	ble.n	80002ee <main+0x42>
      }
      while(CH1_DC > 0)
 800030c:	e009      	b.n	8000322 <main+0x76>
      {
          TIM2->CCR1 = CH1_DC;
 800030e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	6353      	str	r3, [r2, #52]	; 0x34
          CH1_DC -= 70;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	3b46      	subs	r3, #70	; 0x46
 800031a:	607b      	str	r3, [r7, #4]
          HAL_Delay(1);
 800031c:	2001      	movs	r0, #1
 800031e:	f000 fc83 	bl	8000c28 <HAL_Delay>
      while(CH1_DC > 0)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2b00      	cmp	r3, #0
 8000326:	dcf2      	bgt.n	800030e <main+0x62>
      while(CH1_DC < 65535)
 8000328:	e7eb      	b.n	8000302 <main+0x56>
 800032a:	bf00      	nop
 800032c:	200001f8 	.word	0x200001f8
 8000330:	20000388 	.word	0x20000388
 8000334:	200002f8 	.word	0x200002f8

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b094      	sub	sp, #80	; 0x50
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f009 f9fa 	bl	8009740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	f107 0314 	add.w	r3, r7, #20
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
 800035a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000368:	2301      	movs	r3, #1
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800036c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000370:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000376:	2301      	movs	r3, #1
 8000378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000382:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000384:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000388:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800038e:	4618      	mov	r0, r3
 8000390:	f002 fd18 	bl	8002dc4 <HAL_RCC_OscConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800039a:	f000 f9fd 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039e:	230f      	movs	r3, #15
 80003a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003a2:	2301      	movs	r3, #1
 80003a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f002 ff85 	bl	80032c8 <HAL_RCC_ClockConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003c4:	f000 f9e8 	bl	8000798 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003c8:	2310      	movs	r3, #16
 80003ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80003cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003d0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4618      	mov	r0, r3
 80003d6:	f003 f907 	bl	80035e8 <HAL_RCCEx_PeriphCLKConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003e0:	f000 f9da 	bl	8000798 <Error_Handler>
  }
}
 80003e4:	bf00      	nop
 80003e6:	3750      	adds	r7, #80	; 0x50
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08a      	sub	sp, #40	; 0x28
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f2:	f107 0320 	add.w	r3, r7, #32
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800040e:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <MX_TIM2_Init+0xd8>)
 8000410:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000414:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000416:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <MX_TIM2_Init+0xd8>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <MX_TIM2_Init+0xd8>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000422:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <MX_TIM2_Init+0xd8>)
 8000424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000428:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042a:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <MX_TIM2_Init+0xd8>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000430:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <MX_TIM2_Init+0xd8>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000436:	4823      	ldr	r0, [pc, #140]	; (80004c4 <MX_TIM2_Init+0xd8>)
 8000438:	f003 f98c 	bl	8003754 <HAL_TIM_PWM_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000442:	f000 f9a9 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000446:	2300      	movs	r3, #0
 8000448:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044a:	2300      	movs	r3, #0
 800044c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800044e:	f107 0320 	add.w	r3, r7, #32
 8000452:	4619      	mov	r1, r3
 8000454:	481b      	ldr	r0, [pc, #108]	; (80004c4 <MX_TIM2_Init+0xd8>)
 8000456:	f003 fd3f 	bl	8003ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000460:	f000 f99a 	bl	8000798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000464:	2360      	movs	r3, #96	; 0x60
 8000466:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	4619      	mov	r1, r3
 800047a:	4812      	ldr	r0, [pc, #72]	; (80004c4 <MX_TIM2_Init+0xd8>)
 800047c:	f003 fa5c 	bl	8003938 <HAL_TIM_PWM_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000486:	f000 f987 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2204      	movs	r2, #4
 800048e:	4619      	mov	r1, r3
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <MX_TIM2_Init+0xd8>)
 8000492:	f003 fa51 	bl	8003938 <HAL_TIM_PWM_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800049c:	f000 f97c 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2208      	movs	r2, #8
 80004a4:	4619      	mov	r1, r3
 80004a6:	4807      	ldr	r0, [pc, #28]	; (80004c4 <MX_TIM2_Init+0xd8>)
 80004a8:	f003 fa46 	bl	8003938 <HAL_TIM_PWM_ConfigChannel>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80004b2:	f000 f971 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004b6:	4803      	ldr	r0, [pc, #12]	; (80004c4 <MX_TIM2_Init+0xd8>)
 80004b8:	f000 f9d6 	bl	8000868 <HAL_TIM_MspPostInit>

}
 80004bc:	bf00      	nop
 80004be:	3728      	adds	r7, #40	; 0x28
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200002f8 	.word	0x200002f8

080004c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <MX_TIM3_Init+0xd8>)
 80004ec:	4a2d      	ldr	r2, [pc, #180]	; (80005a4 <MX_TIM3_Init+0xdc>)
 80004ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004f0:	4b2b      	ldr	r3, [pc, #172]	; (80005a0 <MX_TIM3_Init+0xd8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f6:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <MX_TIM3_Init+0xd8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004fc:	4b28      	ldr	r3, [pc, #160]	; (80005a0 <MX_TIM3_Init+0xd8>)
 80004fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000504:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <MX_TIM3_Init+0xd8>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050a:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <MX_TIM3_Init+0xd8>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000510:	4823      	ldr	r0, [pc, #140]	; (80005a0 <MX_TIM3_Init+0xd8>)
 8000512:	f003 f91f 	bl	8003754 <HAL_TIM_PWM_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800051c:	f000 f93c 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000520:	2300      	movs	r3, #0
 8000522:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000528:	f107 0320 	add.w	r3, r7, #32
 800052c:	4619      	mov	r1, r3
 800052e:	481c      	ldr	r0, [pc, #112]	; (80005a0 <MX_TIM3_Init+0xd8>)
 8000530:	f003 fcd2 	bl	8003ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800053a:	f000 f92d 	bl	8000798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800053e:	2360      	movs	r3, #96	; 0x60
 8000540:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	4619      	mov	r1, r3
 8000554:	4812      	ldr	r0, [pc, #72]	; (80005a0 <MX_TIM3_Init+0xd8>)
 8000556:	f003 f9ef 	bl	8003938 <HAL_TIM_PWM_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000560:	f000 f91a 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2204      	movs	r2, #4
 8000568:	4619      	mov	r1, r3
 800056a:	480d      	ldr	r0, [pc, #52]	; (80005a0 <MX_TIM3_Init+0xd8>)
 800056c:	f003 f9e4 	bl	8003938 <HAL_TIM_PWM_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000576:	f000 f90f 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2208      	movs	r2, #8
 800057e:	4619      	mov	r1, r3
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <MX_TIM3_Init+0xd8>)
 8000582:	f003 f9d9 	bl	8003938 <HAL_TIM_PWM_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800058c:	f000 f904 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <MX_TIM3_Init+0xd8>)
 8000592:	f000 f969 	bl	8000868 <HAL_TIM_MspPostInit>

}
 8000596:	bf00      	nop
 8000598:	3728      	adds	r7, #40	; 0x28
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000340 	.word	0x20000340
 80005a4:	40000400 	.word	0x40000400

080005a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <MX_USART1_UART_Init+0x50>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005e0:	f003 fcd8 	bl	8003f94 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ea:	f000 f8d5 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000388 	.word	0x20000388
 80005f8:	40013800 	.word	0x40013800

080005fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART3_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART3_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART3_UART_Init+0x4c>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART3_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART3_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART3_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART3_UART_Init+0x4c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART3_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART3_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART3_UART_Init+0x4c>)
 8000634:	f003 fcae 	bl	8003f94 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 f8ab 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200003d0 	.word	0x200003d0
 800064c:	40004800 	.word	0x40004800

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000664:	4b3c      	ldr	r3, [pc, #240]	; (8000758 <MX_GPIO_Init+0x108>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a3b      	ldr	r2, [pc, #236]	; (8000758 <MX_GPIO_Init+0x108>)
 800066a:	f043 0320 	orr.w	r3, r3, #32
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b39      	ldr	r3, [pc, #228]	; (8000758 <MX_GPIO_Init+0x108>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0320 	and.w	r3, r3, #32
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b36      	ldr	r3, [pc, #216]	; (8000758 <MX_GPIO_Init+0x108>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a35      	ldr	r2, [pc, #212]	; (8000758 <MX_GPIO_Init+0x108>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b33      	ldr	r3, [pc, #204]	; (8000758 <MX_GPIO_Init+0x108>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b30      	ldr	r3, [pc, #192]	; (8000758 <MX_GPIO_Init+0x108>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a2f      	ldr	r2, [pc, #188]	; (8000758 <MX_GPIO_Init+0x108>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <MX_GPIO_Init+0x108>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b2:	482a      	ldr	r0, [pc, #168]	; (800075c <MX_GPIO_Init+0x10c>)
 80006b4:	f000 fe20 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80006be:	4828      	ldr	r0, [pc, #160]	; (8000760 <MX_GPIO_Init+0x110>)
 80006c0:	f000 fe1a 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP5_Pin DIP6_Pin DIP7_Pin DIP4_Pin
                           DIP3_Pin DIP2_Pin DIP1_Pin */
  GPIO_InitStruct.Pin = DIP5_Pin|DIP6_Pin|DIP7_Pin|DIP4_Pin
 80006c4:	f243 037c 	movw	r3, #12412	; 0x307c
 80006c8:	613b      	str	r3, [r7, #16]
                          |DIP3_Pin|DIP2_Pin|DIP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	4619      	mov	r1, r3
 80006d8:	4821      	ldr	r0, [pc, #132]	; (8000760 <MX_GPIO_Init+0x110>)
 80006da:	f000 fc89 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4819      	ldr	r0, [pc, #100]	; (800075c <MX_GPIO_Init+0x10c>)
 80006f8:	f000 fc7a 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PANIC_Pin */
  GPIO_InitStruct.Pin = PANIC_Pin;
 80006fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_GPIO_Init+0x114>)
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PANIC_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <MX_GPIO_Init+0x10c>)
 8000712:	f000 fc6d 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin;
 8000716:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_GPIO_Init+0x110>)
 8000730:	f000 fc5e 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8000734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_GPIO_Init+0x114>)
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_GPIO_Init+0x110>)
 800074a:	f000 fc51 	bl	8000ff0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000
 800075c:	40010800 	.word	0x40010800
 8000760:	40010c00 	.word	0x40010c00
 8000764:	10110000 	.word	0x10110000

08000768 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <HAL_UART_RxCpltCallback+0x24>)
 8000776:	f000 fdd7 	bl	8001328 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&huart1, Rx_data, 40);
 800077a:	2228      	movs	r2, #40	; 0x28
 800077c:	4904      	ldr	r1, [pc, #16]	; (8000790 <HAL_UART_RxCpltCallback+0x28>)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <HAL_UART_RxCpltCallback+0x2c>)
 8000780:	f003 fd6d 	bl	800425e <HAL_UART_Receive_IT>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40010800 	.word	0x40010800
 8000790:	200001f8 	.word	0x200001f8
 8000794:	20000388 	.word	0x20000388

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <HAL_MspInit+0x5c>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <HAL_MspInit+0x5c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_MspInit+0x5c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x5c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_MspInit+0x5c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x5c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_MspInit+0x60>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_MspInit+0x60>)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	40021000 	.word	0x40021000
 8000804:	40010000 	.word	0x40010000

08000808 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000818:	d10c      	bne.n	8000834 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_TIM_PWM_MspInit+0x58>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <HAL_TIM_PWM_MspInit+0x58>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_TIM_PWM_MspInit+0x58>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000832:	e010      	b.n	8000856 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_TIM_PWM_MspInit+0x5c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d10b      	bne.n	8000856 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_TIM_PWM_MspInit+0x58>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_TIM_PWM_MspInit+0x58>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_TIM_PWM_MspInit+0x58>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	40021000 	.word	0x40021000
 8000864:	40000400 	.word	0x40000400

08000868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0318 	add.w	r3, r7, #24
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000886:	d118      	bne.n	80008ba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <HAL_TIM_MspPostInit+0xc4>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a27      	ldr	r2, [pc, #156]	; (800092c <HAL_TIM_MspPostInit+0xc4>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <HAL_TIM_MspPostInit+0xc4>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80008a0:	2307      	movs	r3, #7
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2302      	movs	r3, #2
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0318 	add.w	r3, r7, #24
 80008b0:	4619      	mov	r1, r3
 80008b2:	481f      	ldr	r0, [pc, #124]	; (8000930 <HAL_TIM_MspPostInit+0xc8>)
 80008b4:	f000 fb9c 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008b8:	e034      	b.n	8000924 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <HAL_TIM_MspPostInit+0xcc>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d12f      	bne.n	8000924 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b19      	ldr	r3, [pc, #100]	; (800092c <HAL_TIM_MspPostInit+0xc4>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a18      	ldr	r2, [pc, #96]	; (800092c <HAL_TIM_MspPostInit+0xc4>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <HAL_TIM_MspPostInit+0xc4>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <HAL_TIM_MspPostInit+0xc4>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a12      	ldr	r2, [pc, #72]	; (800092c <HAL_TIM_MspPostInit+0xc4>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_TIM_MspPostInit+0xc4>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0308 	and.w	r3, r3, #8
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008f4:	23c0      	movs	r3, #192	; 0xc0
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2302      	movs	r3, #2
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	4619      	mov	r1, r3
 8000906:	480a      	ldr	r0, [pc, #40]	; (8000930 <HAL_TIM_MspPostInit+0xc8>)
 8000908:	f000 fb72 	bl	8000ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2302      	movs	r3, #2
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <HAL_TIM_MspPostInit+0xd0>)
 8000920:	f000 fb66 	bl	8000ff0 <HAL_GPIO_Init>
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	40010800 	.word	0x40010800
 8000934:	40000400 	.word	0x40000400
 8000938:	40010c00 	.word	0x40010c00

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a40      	ldr	r2, [pc, #256]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d13a      	bne.n	80009d2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800095c:	4b3f      	ldr	r3, [pc, #252]	; (8000a5c <HAL_UART_MspInit+0x120>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a3e      	ldr	r2, [pc, #248]	; (8000a5c <HAL_UART_MspInit+0x120>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b3c      	ldr	r3, [pc, #240]	; (8000a5c <HAL_UART_MspInit+0x120>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b39      	ldr	r3, [pc, #228]	; (8000a5c <HAL_UART_MspInit+0x120>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a38      	ldr	r2, [pc, #224]	; (8000a5c <HAL_UART_MspInit+0x120>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <HAL_UART_MspInit+0x120>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800098c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	4619      	mov	r1, r3
 80009a0:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_UART_MspInit+0x124>)
 80009a2:	f000 fb25 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4829      	ldr	r0, [pc, #164]	; (8000a60 <HAL_UART_MspInit+0x124>)
 80009bc:	f000 fb18 	bl	8000ff0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	2025      	movs	r0, #37	; 0x25
 80009c6:	f000 fa2a 	bl	8000e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ca:	2025      	movs	r0, #37	; 0x25
 80009cc:	f000 fa43 	bl	8000e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009d0:	e03e      	b.n	8000a50 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <HAL_UART_MspInit+0x128>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d139      	bne.n	8000a50 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <HAL_UART_MspInit+0x120>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <HAL_UART_MspInit+0x120>)
 80009e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e6:	61d3      	str	r3, [r2, #28]
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_UART_MspInit+0x120>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_UART_MspInit+0x120>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0x120>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_UART_MspInit+0x120>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0308 	and.w	r3, r3, #8
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <HAL_UART_MspInit+0x12c>)
 8000a22:	f000 fae5 	bl	8000ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480b      	ldr	r0, [pc, #44]	; (8000a68 <HAL_UART_MspInit+0x12c>)
 8000a3c:	f000 fad8 	bl	8000ff0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2027      	movs	r0, #39	; 0x27
 8000a46:	f000 f9ea 	bl	8000e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a4a:	2027      	movs	r0, #39	; 0x27
 8000a4c:	f000 fa03 	bl	8000e56 <HAL_NVIC_EnableIRQ>
}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40013800 	.word	0x40013800
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010800 	.word	0x40010800
 8000a64:	40004800 	.word	0x40004800
 8000a68:	40010c00 	.word	0x40010c00

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab2:	f000 f89d 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000ac2:	f000 fd95 	bl	80015f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200009e0 	.word	0x200009e0

08000ad0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ad6:	f000 fd8b 	bl	80015f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200009e0 	.word	0x200009e0

08000ae4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <USART1_IRQHandler+0x10>)
 8000aea:	f003 fbdd 	bl	80042a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000388 	.word	0x20000388

08000af8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <USART3_IRQHandler+0x10>)
 8000afe:	f003 fbd3 	bl	80042a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200003d0 	.word	0x200003d0

08000b0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b18:	f7ff fff8 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480b      	ldr	r0, [pc, #44]	; (8000b4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b1e:	490c      	ldr	r1, [pc, #48]	; (8000b50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b20:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b34:	4c09      	ldr	r4, [pc, #36]	; (8000b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f008 fe05 	bl	8009750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b46:	f7ff fbb1 	bl	80002ac <main>
  bx lr
 8000b4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000b54:	08009894 	.word	0x08009894
  ldr r2, =_sbss
 8000b58:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000b5c:	200010f0 	.word	0x200010f0

08000b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x28>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x28>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f947 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe10 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f95f 	bl	8000e72 <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f927 	bl	8000e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x20>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a03      	ldr	r2, [pc, #12]	; (8000c10 <HAL_IncTick+0x20>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000418 	.word	0x20000418

08000c14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000418 	.word	0x20000418

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff fff0 	bl	8000c14 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffe0 	bl	8000c14 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4906      	ldr	r1, [pc, #24]	; (8000d08 <__NVIC_EnableIRQ+0x34>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	210f      	movs	r1, #15
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff90 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff2d 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e30:	f7ff ff42 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff90 	bl	8000d60 <NVIC_EncodePriority>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff5f 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff35 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffa2 	bl	8000dc4 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b085      	sub	sp, #20
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d008      	beq.n	8000eb4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e020      	b.n	8000ef6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 020e 	bic.w	r2, r2, #14
 8000ec2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0201 	bic.w	r2, r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000edc:	2101      	movs	r1, #1
 8000ede:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d005      	beq.n	8000f24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e051      	b.n	8000fc8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 020e 	bic.w	r2, r2, #14
 8000f32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a22      	ldr	r2, [pc, #136]	; (8000fd4 <HAL_DMA_Abort_IT+0xd4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d029      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0xa2>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <HAL_DMA_Abort_IT+0xd8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d022      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x9e>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_DMA_Abort_IT+0xdc>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01a      	beq.n	8000f98 <HAL_DMA_Abort_IT+0x98>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <HAL_DMA_Abort_IT+0xe0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d012      	beq.n	8000f92 <HAL_DMA_Abort_IT+0x92>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <HAL_DMA_Abort_IT+0xe4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00a      	beq.n	8000f8c <HAL_DMA_Abort_IT+0x8c>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <HAL_DMA_Abort_IT+0xe8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d102      	bne.n	8000f86 <HAL_DMA_Abort_IT+0x86>
 8000f80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f84:	e00e      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000f86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f8a:	e00b      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f90:	e008      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	e005      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9c:	e002      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	e000      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	4a11      	ldr	r2, [pc, #68]	; (8000fec <HAL_DMA_Abort_IT+0xec>)
 8000fa6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	4798      	blx	r3
    } 
  }
  return status;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40020008 	.word	0x40020008
 8000fd8:	4002001c 	.word	0x4002001c
 8000fdc:	40020030 	.word	0x40020030
 8000fe0:	40020044 	.word	0x40020044
 8000fe4:	40020058 	.word	0x40020058
 8000fe8:	4002006c 	.word	0x4002006c
 8000fec:	40020000 	.word	0x40020000

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b08b      	sub	sp, #44	; 0x2c
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	e169      	b.n	80012d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001004:	2201      	movs	r2, #1
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	429a      	cmp	r2, r3
 800101e:	f040 8158 	bne.w	80012d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4a9a      	ldr	r2, [pc, #616]	; (8001290 <HAL_GPIO_Init+0x2a0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d05e      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 800102c:	4a98      	ldr	r2, [pc, #608]	; (8001290 <HAL_GPIO_Init+0x2a0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d875      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 8001032:	4a98      	ldr	r2, [pc, #608]	; (8001294 <HAL_GPIO_Init+0x2a4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d058      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 8001038:	4a96      	ldr	r2, [pc, #600]	; (8001294 <HAL_GPIO_Init+0x2a4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d86f      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 800103e:	4a96      	ldr	r2, [pc, #600]	; (8001298 <HAL_GPIO_Init+0x2a8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d052      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 8001044:	4a94      	ldr	r2, [pc, #592]	; (8001298 <HAL_GPIO_Init+0x2a8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d869      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 800104a:	4a94      	ldr	r2, [pc, #592]	; (800129c <HAL_GPIO_Init+0x2ac>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d04c      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 8001050:	4a92      	ldr	r2, [pc, #584]	; (800129c <HAL_GPIO_Init+0x2ac>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d863      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 8001056:	4a92      	ldr	r2, [pc, #584]	; (80012a0 <HAL_GPIO_Init+0x2b0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d046      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 800105c:	4a90      	ldr	r2, [pc, #576]	; (80012a0 <HAL_GPIO_Init+0x2b0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d85d      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 8001062:	2b12      	cmp	r3, #18
 8001064:	d82a      	bhi.n	80010bc <HAL_GPIO_Init+0xcc>
 8001066:	2b12      	cmp	r3, #18
 8001068:	d859      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 800106a:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <HAL_GPIO_Init+0x80>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	080010eb 	.word	0x080010eb
 8001074:	080010c5 	.word	0x080010c5
 8001078:	080010d7 	.word	0x080010d7
 800107c:	08001119 	.word	0x08001119
 8001080:	0800111f 	.word	0x0800111f
 8001084:	0800111f 	.word	0x0800111f
 8001088:	0800111f 	.word	0x0800111f
 800108c:	0800111f 	.word	0x0800111f
 8001090:	0800111f 	.word	0x0800111f
 8001094:	0800111f 	.word	0x0800111f
 8001098:	0800111f 	.word	0x0800111f
 800109c:	0800111f 	.word	0x0800111f
 80010a0:	0800111f 	.word	0x0800111f
 80010a4:	0800111f 	.word	0x0800111f
 80010a8:	0800111f 	.word	0x0800111f
 80010ac:	0800111f 	.word	0x0800111f
 80010b0:	0800111f 	.word	0x0800111f
 80010b4:	080010cd 	.word	0x080010cd
 80010b8:	080010e1 	.word	0x080010e1
 80010bc:	4a79      	ldr	r2, [pc, #484]	; (80012a4 <HAL_GPIO_Init+0x2b4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010c2:	e02c      	b.n	800111e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	623b      	str	r3, [r7, #32]
          break;
 80010ca:	e029      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	3304      	adds	r3, #4
 80010d2:	623b      	str	r3, [r7, #32]
          break;
 80010d4:	e024      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	3308      	adds	r3, #8
 80010dc:	623b      	str	r3, [r7, #32]
          break;
 80010de:	e01f      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	330c      	adds	r3, #12
 80010e6:	623b      	str	r3, [r7, #32]
          break;
 80010e8:	e01a      	b.n	8001120 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010f2:	2304      	movs	r3, #4
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e013      	b.n	8001120 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d105      	bne.n	800110c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001100:	2308      	movs	r3, #8
 8001102:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	611a      	str	r2, [r3, #16]
          break;
 800110a:	e009      	b.n	8001120 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800110c:	2308      	movs	r3, #8
 800110e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	615a      	str	r2, [r3, #20]
          break;
 8001116:	e003      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
          break;
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x130>
          break;
 800111e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2bff      	cmp	r3, #255	; 0xff
 8001124:	d801      	bhi.n	800112a <HAL_GPIO_Init+0x13a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	e001      	b.n	800112e <HAL_GPIO_Init+0x13e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3304      	adds	r3, #4
 800112e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2bff      	cmp	r3, #255	; 0xff
 8001134:	d802      	bhi.n	800113c <HAL_GPIO_Init+0x14c>
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x152>
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	3b08      	subs	r3, #8
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	210f      	movs	r1, #15
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	401a      	ands	r2, r3
 8001154:	6a39      	ldr	r1, [r7, #32]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	431a      	orrs	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 80b1 	beq.w	80012d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001170:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <HAL_GPIO_Init+0x2b8>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a4c      	ldr	r2, [pc, #304]	; (80012a8 <HAL_GPIO_Init+0x2b8>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <HAL_GPIO_Init+0x2b8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001188:	4a48      	ldr	r2, [pc, #288]	; (80012ac <HAL_GPIO_Init+0x2bc>)
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a40      	ldr	r2, [pc, #256]	; (80012b0 <HAL_GPIO_Init+0x2c0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d013      	beq.n	80011dc <HAL_GPIO_Init+0x1ec>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a3f      	ldr	r2, [pc, #252]	; (80012b4 <HAL_GPIO_Init+0x2c4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d00d      	beq.n	80011d8 <HAL_GPIO_Init+0x1e8>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a3e      	ldr	r2, [pc, #248]	; (80012b8 <HAL_GPIO_Init+0x2c8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d007      	beq.n	80011d4 <HAL_GPIO_Init+0x1e4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a3d      	ldr	r2, [pc, #244]	; (80012bc <HAL_GPIO_Init+0x2cc>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d101      	bne.n	80011d0 <HAL_GPIO_Init+0x1e0>
 80011cc:	2303      	movs	r3, #3
 80011ce:	e006      	b.n	80011de <HAL_GPIO_Init+0x1ee>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e004      	b.n	80011de <HAL_GPIO_Init+0x1ee>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e002      	b.n	80011de <HAL_GPIO_Init+0x1ee>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <HAL_GPIO_Init+0x1ee>
 80011dc:	2300      	movs	r3, #0
 80011de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e0:	f002 0203 	and.w	r2, r2, #3
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	4093      	lsls	r3, r2
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011ee:	492f      	ldr	r1, [pc, #188]	; (80012ac <HAL_GPIO_Init+0x2bc>)
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	492c      	ldr	r1, [pc, #176]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001216:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	43db      	mvns	r3, r3
 800121e:	4928      	ldr	r1, [pc, #160]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001220:	4013      	ands	r3, r2
 8001222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	4922      	ldr	r1, [pc, #136]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	60cb      	str	r3, [r1, #12]
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	43db      	mvns	r3, r3
 8001246:	491e      	ldr	r1, [pc, #120]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001248:	4013      	ands	r3, r2
 800124a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d006      	beq.n	8001266 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	4918      	ldr	r1, [pc, #96]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	43db      	mvns	r3, r3
 800126e:	4914      	ldr	r1, [pc, #80]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001270:	4013      	ands	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d021      	beq.n	80012c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	490e      	ldr	r1, [pc, #56]	; (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	600b      	str	r3, [r1, #0]
 800128c:	e021      	b.n	80012d2 <HAL_GPIO_Init+0x2e2>
 800128e:	bf00      	nop
 8001290:	10320000 	.word	0x10320000
 8001294:	10310000 	.word	0x10310000
 8001298:	10220000 	.word	0x10220000
 800129c:	10210000 	.word	0x10210000
 80012a0:	10120000 	.word	0x10120000
 80012a4:	10110000 	.word	0x10110000
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010000 	.word	0x40010000
 80012b0:	40010800 	.word	0x40010800
 80012b4:	40010c00 	.word	0x40010c00
 80012b8:	40011000 	.word	0x40011000
 80012bc:	40011400 	.word	0x40011400
 80012c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_GPIO_Init+0x304>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	4909      	ldr	r1, [pc, #36]	; (80012f4 <HAL_GPIO_Init+0x304>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	3301      	adds	r3, #1
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	fa22 f303 	lsr.w	r3, r2, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f47f ae8e 	bne.w	8001004 <HAL_GPIO_Init+0x14>
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	372c      	adds	r7, #44	; 0x2c
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	611a      	str	r2, [r3, #16]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4013      	ands	r3, r2
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43d9      	mvns	r1, r3
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	400b      	ands	r3, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	611a      	str	r2, [r3, #16]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800135a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135c:	b08b      	sub	sp, #44	; 0x2c
 800135e:	af06      	add	r7, sp, #24
 8001360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0f1      	b.n	8001550 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d106      	bne.n	8001386 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f007 ff5b 	bl	800923c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f003 fd2e 	bl	8004df4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	687e      	ldr	r6, [r7, #4]
 80013a0:	466d      	mov	r5, sp
 80013a2:	f106 0410 	add.w	r4, r6, #16
 80013a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	602b      	str	r3, [r5, #0]
 80013ae:	1d33      	adds	r3, r6, #4
 80013b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	f003 fcf8 	bl	8004da8 <USB_CoreInit>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2202      	movs	r2, #2
 80013c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0c2      	b.n	8001550 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fd29 	bl	8004e28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e040      	b.n	800145e <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	3301      	adds	r3, #1
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	3303      	adds	r3, #3
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	3338      	adds	r3, #56	; 0x38
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	333c      	adds	r3, #60	; 0x3c
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3340      	adds	r3, #64	; 0x40
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	3301      	adds	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	d3b9      	bcc.n	80013dc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e044      	b.n	80014f8 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	440b      	add	r3, r1
 8001492:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	3301      	adds	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d3b5      	bcc.n	800146e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	687e      	ldr	r6, [r7, #4]
 800150a:	466d      	mov	r5, sp
 800150c:	f106 0410 	add.w	r4, r6, #16
 8001510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	602b      	str	r3, [r5, #0]
 8001518:	1d33      	adds	r3, r6, #4
 800151a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151c:	6838      	ldr	r0, [r7, #0]
 800151e:	f003 fc8f 	bl	8004e40 <USB_DevInit>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e00d      	b.n	8001550 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f005 fd24 	bl	8006f96 <USB_DevDisconnect>

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001558 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_PCD_Start+0x16>
 800156a:	2302      	movs	r3, #2
 800156c:	e016      	b.n	800159c <HAL_PCD_Start+0x44>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fc24 	bl	8004dc8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001580:	2101      	movs	r1, #1
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f008 f8a5 	bl	80096d2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f005 fcf8 	bl	8006f82 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_PCD_Stop+0x16>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e016      	b.n	80015e8 <HAL_PCD_Stop+0x44>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 fc14 	bl	8004df4 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 80015cc:	2100      	movs	r1, #0
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f008 f87f 	bl	80096d2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f005 fcdc 	bl	8006f96 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f005 fcd4 	bl	8006faa <USB_ReadInterrupts>
 8001602:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fabc 	bl	8001b8c <PCD_EP_ISR_Handler>

    return;
 8001614:	e119      	b.n	800184a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001628:	b29a      	uxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001632:	b292      	uxth	r2, r2
 8001634:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f007 fe82 	bl	8009342 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800163e:	2100      	movs	r1, #0
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f905 	bl	8001850 <HAL_PCD_SetAddress>

    return;
 8001646:	e100      	b.n	800184a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00c      	beq.n	800166c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800165a:	b29a      	uxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001664:	b292      	uxth	r2, r2
 8001666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800166a:	e0ee      	b.n	800184a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00c      	beq.n	8001690 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001688:	b292      	uxth	r2, r2
 800168a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800168e:	e0dc      	b.n	800184a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d027      	beq.n	80016ea <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0204 	bic.w	r2, r2, #4
 80016ac:	b292      	uxth	r2, r2
 80016ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0208 	bic.w	r2, r2, #8
 80016c4:	b292      	uxth	r2, r2
 80016c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f007 fe72 	bl	80093b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016d8:	b29a      	uxth	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016e2:	b292      	uxth	r2, r2
 80016e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016e8:	e0af      	b.n	800184a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8083 	beq.w	80017fc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	77fb      	strb	r3, [r7, #31]
 80016fa:	e010      	b.n	800171e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	7ffb      	ldrb	r3, [r7, #31]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	441a      	add	r2, r3
 8001708:	7ffb      	ldrb	r3, [r7, #31]
 800170a:	8812      	ldrh	r2, [r2, #0]
 800170c:	b292      	uxth	r2, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	3320      	adds	r3, #32
 8001712:	443b      	add	r3, r7
 8001714:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001718:	7ffb      	ldrb	r3, [r7, #31]
 800171a:	3301      	adds	r3, #1
 800171c:	77fb      	strb	r3, [r7, #31]
 800171e:	7ffb      	ldrb	r3, [r7, #31]
 8001720:	2b07      	cmp	r3, #7
 8001722:	d9eb      	bls.n	80016fc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800172c:	b29a      	uxth	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	b292      	uxth	r2, r2
 8001738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001744:	b29a      	uxth	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	b292      	uxth	r2, r2
 8001750:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001754:	bf00      	nop
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800175e:	b29b      	uxth	r3, r3
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f6      	beq.n	8001756 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001770:	b29a      	uxth	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800177a:	b292      	uxth	r2, r2
 800177c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001780:	2300      	movs	r3, #0
 8001782:	77fb      	strb	r3, [r7, #31]
 8001784:	e00f      	b.n	80017a6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001786:	7ffb      	ldrb	r3, [r7, #31]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	4611      	mov	r1, r2
 800178e:	7ffa      	ldrb	r2, [r7, #31]
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	440a      	add	r2, r1
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	3320      	adds	r3, #32
 8001798:	443b      	add	r3, r7
 800179a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800179e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80017a0:	7ffb      	ldrb	r3, [r7, #31]
 80017a2:	3301      	adds	r3, #1
 80017a4:	77fb      	strb	r3, [r7, #31]
 80017a6:	7ffb      	ldrb	r3, [r7, #31]
 80017a8:	2b07      	cmp	r3, #7
 80017aa:	d9ec      	bls.n	8001786 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0208 	orr.w	r2, r2, #8
 80017be:	b292      	uxth	r2, r2
 80017c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d6:	b292      	uxth	r2, r2
 80017d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0204 	orr.w	r2, r2, #4
 80017ee:	b292      	uxth	r2, r2
 80017f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f007 fdc3 	bl	8009380 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80017fa:	e026      	b.n	800184a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00f      	beq.n	8001826 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800180e:	b29a      	uxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001818:	b292      	uxth	r2, r2
 800181a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f007 fd81 	bl	8009326 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001824:	e011      	b.n	800184a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00c      	beq.n	800184a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001842:	b292      	uxth	r2, r2
 8001844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001848:	bf00      	nop
  }
}
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_PCD_SetAddress+0x1a>
 8001866:	2302      	movs	r3, #2
 8001868:	e013      	b.n	8001892 <HAL_PCD_SetAddress+0x42>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f005 fb6a 	bl	8006f5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	4608      	mov	r0, r1
 80018a4:	4611      	mov	r1, r2
 80018a6:	461a      	mov	r2, r3
 80018a8:	4603      	mov	r3, r0
 80018aa:	70fb      	strb	r3, [r7, #3]
 80018ac:	460b      	mov	r3, r1
 80018ae:	803b      	strh	r3, [r7, #0]
 80018b0:	4613      	mov	r3, r2
 80018b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	da0e      	bge.n	80018de <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	705a      	strb	r2, [r3, #1]
 80018dc:	e00e      	b.n	80018fc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	f003 0207 	and.w	r2, r3, #7
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	b2da      	uxtb	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001908:	883a      	ldrh	r2, [r7, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	78ba      	ldrb	r2, [r7, #2]
 8001912:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001914:	78bb      	ldrb	r3, [r7, #2]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d102      	bne.n	8001920 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_PCD_EP_Open+0x94>
 800192a:	2302      	movs	r3, #2
 800192c:	e00e      	b.n	800194c <HAL_PCD_EP_Open+0xb2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68f9      	ldr	r1, [r7, #12]
 800193c:	4618      	mov	r0, r3
 800193e:	f003 fa9f 	bl	8004e80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800194a:	7afb      	ldrb	r3, [r7, #11]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	460b      	mov	r3, r1
 8001962:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001964:	7afb      	ldrb	r3, [r7, #11]
 8001966:	f003 0207 	and.w	r2, r3, #7
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4413      	add	r3, r2
 800197a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2200      	movs	r2, #0
 8001992:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001994:	7afb      	ldrb	r3, [r7, #11]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	b2da      	uxtb	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6979      	ldr	r1, [r7, #20]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fe2a 	bl	8005600 <USB_EPStartXfer>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c6:	7afb      	ldrb	r3, [r7, #11]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4413      	add	r3, r2
 80019da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2200      	movs	r2, #0
 80019fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2201      	movs	r2, #1
 8001a00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a02:	7afb      	ldrb	r3, [r7, #11]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6979      	ldr	r1, [r7, #20]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 fdf3 	bl	8005600 <USB_EPStartXfer>

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	f003 0207 	and.w	r2, r3, #7
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d901      	bls.n	8001a42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e04c      	b.n	8001adc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da0e      	bge.n	8001a68 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2201      	movs	r2, #1
 8001a64:	705a      	strb	r2, [r3, #1]
 8001a66:	e00c      	b.n	8001a82 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_PCD_EP_SetStall+0x7e>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e01c      	b.n	8001adc <HAL_PCD_EP_SetStall+0xb8>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68f9      	ldr	r1, [r7, #12]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f005 f956 	bl	8006d62 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d108      	bne.n	8001ad2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f005 fa7b 	bl	8006fc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	f003 020f 	and.w	r2, r3, #15
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d901      	bls.n	8001b02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e040      	b.n	8001b84 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	da0e      	bge.n	8001b28 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2201      	movs	r2, #1
 8001b24:	705a      	strb	r2, [r3, #1]
 8001b26:	e00e      	b.n	8001b46 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 0207 	and.w	r2, r3, #7
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_PCD_EP_ClrStall+0x82>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e00e      	b.n	8001b84 <HAL_PCD_EP_ClrStall+0xa0>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68f9      	ldr	r1, [r7, #12]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f005 f944 	bl	8006e02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b096      	sub	sp, #88	; 0x58
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b94:	e3bf      	b.n	8002316 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ba2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001bb0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 8179 	bne.w	8001eac <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d152      	bne.n	8001c6c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bd6:	81fb      	strh	r3, [r7, #14]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	89fb      	ldrh	r3, [r7, #14]
 8001bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3328      	adds	r3, #40	; 0x28
 8001bee:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	3302      	adds	r3, #2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	441a      	add	r2, r3
 8001c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c28:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f007 fb60 	bl	80092f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 836b 	beq.w	8002316 <PCD_EP_ISR_Handler+0x78a>
 8001c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f040 8366 	bne.w	8002316 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	b292      	uxth	r2, r2
 8001c5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c6a:	e354      	b.n	8002316 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c72:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d034      	beq.n	8001cf4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3306      	adds	r3, #6
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f005 f9cd 	bl	8007068 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cda:	4013      	ands	r3, r2
 8001cdc:	823b      	strh	r3, [r7, #16]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	8a3a      	ldrh	r2, [r7, #16]
 8001ce4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ce8:	b292      	uxth	r2, r2
 8001cea:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f007 fad3 	bl	8009298 <HAL_PCD_SetupStageCallback>
 8001cf2:	e310      	b.n	8002316 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cf4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f280 830c 	bge.w	8002316 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	83fb      	strh	r3, [r7, #30]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	8bfa      	ldrh	r2, [r7, #30]
 8001d14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d18:	b292      	uxth	r2, r2
 8001d1a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	3306      	adds	r3, #6
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d46:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d019      	beq.n	8001d84 <PCD_EP_ISR_Handler+0x1f8>
 8001d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d015      	beq.n	8001d84 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5e:	6959      	ldr	r1, [r3, #20]
 8001d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d62:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f005 f97d 	bl	8007068 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	441a      	add	r2, r3
 8001d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f007 fa9c 	bl	80092bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001d8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 82bd 	bne.w	8002316 <PCD_EP_ISR_Handler+0x78a>
 8001d9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001da0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001da4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001da8:	f000 82b5 	beq.w	8002316 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	801a      	strh	r2, [r3, #0]
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b3e      	cmp	r3, #62	; 0x3e
 8001de2:	d91d      	bls.n	8001e20 <PCD_EP_ISR_Handler+0x294>
 8001de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	647b      	str	r3, [r7, #68]	; 0x44
 8001dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <PCD_EP_ISR_Handler+0x272>
 8001df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	029b      	lsls	r3, r3, #10
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	801a      	strh	r2, [r3, #0]
 8001e1e:	e026      	b.n	8001e6e <PCD_EP_ISR_Handler+0x2e2>
 8001e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10a      	bne.n	8001e3e <PCD_EP_ISR_Handler+0x2b2>
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	e017      	b.n	8001e6e <PCD_EP_ISR_Handler+0x2e2>
 8001e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	647b      	str	r3, [r7, #68]	; 0x44
 8001e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <PCD_EP_ISR_Handler+0x2cc>
 8001e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e54:	3301      	adds	r3, #1
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	029b      	lsls	r3, r3, #10
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e7e:	827b      	strh	r3, [r7, #18]
 8001e80:	8a7b      	ldrh	r3, [r7, #18]
 8001e82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e86:	827b      	strh	r3, [r7, #18]
 8001e88:	8a7b      	ldrh	r3, [r7, #18]
 8001e8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e8e:	827b      	strh	r3, [r7, #18]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	8a7b      	ldrh	r3, [r7, #18]
 8001e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	8013      	strh	r3, [r2, #0]
 8001eaa:	e234      	b.n	8002316 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ec0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f280 80fc 	bge.w	80020c2 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001efc:	b292      	uxth	r2, r2
 8001efe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f00:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f18:	7b1b      	ldrb	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d125      	bne.n	8001f6a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	3306      	adds	r3, #6
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001f4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8092 	beq.w	8002078 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5a:	6959      	ldr	r1, [r3, #20]
 8001f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5e:	88da      	ldrh	r2, [r3, #6]
 8001f60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001f64:	f005 f880 	bl	8007068 <USB_ReadPMA>
 8001f68:	e086      	b.n	8002078 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6c:	78db      	ldrb	r3, [r3, #3]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d10a      	bne.n	8001f88 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f76:	461a      	mov	r2, r3
 8001f78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f9d9 	bl	8002332 <HAL_PCD_EP_DB_Receive>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001f86:	e077      	b.n	8002078 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	441a      	add	r2, r3
 8001fb4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d024      	beq.n	8002030 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	4413      	add	r3, r2
 8002004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002012:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002016:	2b00      	cmp	r3, #0
 8002018:	d02e      	beq.n	8002078 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002020:	6959      	ldr	r1, [r3, #20]
 8002022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002024:	891a      	ldrh	r2, [r3, #8]
 8002026:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800202a:	f005 f81d 	bl	8007068 <USB_ReadPMA>
 800202e:	e023      	b.n	8002078 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	3306      	adds	r3, #6
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002058:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800205c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206a:	6959      	ldr	r1, [r3, #20]
 800206c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206e:	895a      	ldrh	r2, [r3, #10]
 8002070:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002074:	f004 fff8 	bl	8007068 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207a:	69da      	ldr	r2, [r3, #28]
 800207c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002080:	441a      	add	r2, r3
 8002082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002084:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800208e:	441a      	add	r2, r3
 8002090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002092:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <PCD_EP_ISR_Handler+0x51c>
 800209c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80020a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d206      	bcs.n	80020b6 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f007 f904 	bl	80092bc <HAL_PCD_DataOutStageCallback>
 80020b4:	e005      	b.n	80020c2 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 fa9f 	bl	8005600 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8123 	beq.w	8002316 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80020d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	441a      	add	r2, r3
 8002110:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800211c:	b29b      	uxth	r3, r3
 800211e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002122:	78db      	ldrb	r3, [r3, #3]
 8002124:	2b01      	cmp	r3, #1
 8002126:	f040 80a2 	bne.w	800226e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800212a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002132:	7b1b      	ldrb	r3, [r3, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8093 	beq.w	8002260 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800213a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d046      	beq.n	80021d4 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d126      	bne.n	800219c <PCD_EP_ISR_Handler+0x610>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215c:	b29b      	uxth	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	4413      	add	r3, r2
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
 8002166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	011a      	lsls	r2, r3, #4
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	4413      	add	r3, r2
 8002170:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002174:	623b      	str	r3, [r7, #32]
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002180:	b29a      	uxth	r2, r3
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	801a      	strh	r2, [r3, #0]
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002194:	b29a      	uxth	r2, r3
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	e061      	b.n	8002260 <PCD_EP_ISR_Handler+0x6d4>
 800219c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800219e:	785b      	ldrb	r3, [r3, #1]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d15d      	bne.n	8002260 <PCD_EP_ISR_Handler+0x6d4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	4413      	add	r3, r2
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	011a      	lsls	r2, r3, #4
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	4413      	add	r3, r2
 80021c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	2200      	movs	r2, #0
 80021d0:	801a      	strh	r2, [r3, #0]
 80021d2:	e045      	b.n	8002260 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021dc:	785b      	ldrb	r3, [r3, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d126      	bne.n	8002230 <PCD_EP_ISR_Handler+0x6a4>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f6:	4413      	add	r3, r2
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
 80021fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	011a      	lsls	r2, r3, #4
 8002200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002202:	4413      	add	r3, r2
 8002204:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002208:	633b      	str	r3, [r7, #48]	; 0x30
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002214:	b29a      	uxth	r2, r3
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	801a      	strh	r2, [r3, #0]
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002228:	b29a      	uxth	r2, r3
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	801a      	strh	r2, [r3, #0]
 800222e:	e017      	b.n	8002260 <PCD_EP_ISR_Handler+0x6d4>
 8002230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d113      	bne.n	8002260 <PCD_EP_ISR_Handler+0x6d4>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002246:	4413      	add	r3, r2
 8002248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800224a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	011a      	lsls	r2, r3, #4
 8002250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002252:	4413      	add	r3, r2
 8002254:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002258:	63bb      	str	r3, [r7, #56]	; 0x38
 800225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225c:	2200      	movs	r2, #0
 800225e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f007 f843 	bl	80092f2 <HAL_PCD_DataInStageCallback>
 800226c:	e053      	b.n	8002316 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800226e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d146      	bne.n	8002308 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002282:	b29b      	uxth	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	3302      	adds	r3, #2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80022a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d907      	bls.n	80022c2 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80022b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022ba:	1ad2      	subs	r2, r2, r3
 80022bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022be:	619a      	str	r2, [r3, #24]
 80022c0:	e002      	b.n	80022c8 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80022c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80022c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d106      	bne.n	80022de <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f007 f80b 	bl	80092f2 <HAL_PCD_DataInStageCallback>
 80022dc:	e01b      	b.n	8002316 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80022de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022e6:	441a      	add	r2, r3
 80022e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80022ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022f4:	441a      	add	r2, r3
 80022f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002300:	4618      	mov	r0, r3
 8002302:	f003 f97d 	bl	8005600 <USB_EPStartXfer>
 8002306:	e006      	b.n	8002316 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002308:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800230c:	461a      	mov	r2, r3
 800230e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f91b 	bl	800254c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800231e:	b29b      	uxth	r3, r3
 8002320:	b21b      	sxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	f6ff ac37 	blt.w	8001b96 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3758      	adds	r7, #88	; 0x58
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b088      	sub	sp, #32
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	4613      	mov	r3, r2
 800233e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d07e      	beq.n	8002448 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	3302      	adds	r3, #2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	4413      	add	r3, r2
 8002368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002372:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	8b7b      	ldrh	r3, [r7, #26]
 800237a:	429a      	cmp	r2, r3
 800237c:	d306      	bcc.n	800238c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	8b7b      	ldrh	r3, [r7, #26]
 8002384:	1ad2      	subs	r2, r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	619a      	str	r2, [r3, #24]
 800238a:	e002      	b.n	8002392 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d123      	bne.n	80023e2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b4:	833b      	strh	r3, [r7, #24]
 80023b6:	8b3b      	ldrh	r3, [r7, #24]
 80023b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023bc:	833b      	strh	r3, [r7, #24]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	441a      	add	r2, r3
 80023cc:	8b3b      	ldrh	r3, [r7, #24]
 80023ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023de:	b29b      	uxth	r3, r3
 80023e0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01f      	beq.n	800242c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002406:	82fb      	strh	r3, [r7, #22]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	441a      	add	r2, r3
 8002416:	8afb      	ldrh	r3, [r7, #22]
 8002418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800241c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002424:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002428:	b29b      	uxth	r3, r3
 800242a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800242c:	8b7b      	ldrh	r3, [r7, #26]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8087 	beq.w	8002542 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	6959      	ldr	r1, [r3, #20]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	891a      	ldrh	r2, [r3, #8]
 8002440:	8b7b      	ldrh	r3, [r7, #26]
 8002442:	f004 fe11 	bl	8007068 <USB_ReadPMA>
 8002446:	e07c      	b.n	8002542 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	3306      	adds	r3, #6
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	4413      	add	r3, r2
 8002466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002470:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	8b7b      	ldrh	r3, [r7, #26]
 8002478:	429a      	cmp	r2, r3
 800247a:	d306      	bcc.n	800248a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	8b7b      	ldrh	r3, [r7, #26]
 8002482:	1ad2      	subs	r2, r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	619a      	str	r2, [r3, #24]
 8002488:	e002      	b.n	8002490 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d123      	bne.n	80024e0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b2:	83fb      	strh	r3, [r7, #30]
 80024b4:	8bfb      	ldrh	r3, [r7, #30]
 80024b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024ba:	83fb      	strh	r3, [r7, #30]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	441a      	add	r2, r3
 80024ca:	8bfb      	ldrh	r3, [r7, #30]
 80024cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024dc:	b29b      	uxth	r3, r3
 80024de:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11f      	bne.n	800252a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002504:	83bb      	strh	r3, [r7, #28]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	441a      	add	r2, r3
 8002514:	8bbb      	ldrh	r3, [r7, #28]
 8002516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800251a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800251e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002522:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002526:	b29b      	uxth	r3, r3
 8002528:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800252a:	8b7b      	ldrh	r3, [r7, #26]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	6959      	ldr	r1, [r3, #20]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	895a      	ldrh	r2, [r3, #10]
 800253c:	8b7b      	ldrh	r3, [r7, #26]
 800253e:	f004 fd93 	bl	8007068 <USB_ReadPMA>
    }
  }

  return count;
 8002542:	8b7b      	ldrh	r3, [r7, #26]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b0a4      	sub	sp, #144	; 0x90
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 81dd 	beq.w	8002920 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	3302      	adds	r3, #2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800258e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800259a:	429a      	cmp	r2, r3
 800259c:	d907      	bls.n	80025ae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025a6:	1ad2      	subs	r2, r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	619a      	str	r2, [r3, #24]
 80025ac:	e002      	b.n	80025b4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 80b9 	bne.w	8002730 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	785b      	ldrb	r3, [r3, #1]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d126      	bne.n	8002614 <HAL_PCD_EP_DB_Transmit+0xc8>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	4413      	add	r3, r2
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	011a      	lsls	r2, r3, #4
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	4413      	add	r3, r2
 80025e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	801a      	strh	r2, [r3, #0]
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800260c:	b29a      	uxth	r2, r3
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	e01a      	b.n	800264a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	785b      	ldrb	r3, [r3, #1]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d116      	bne.n	800264a <HAL_PCD_EP_DB_Transmit+0xfe>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262a:	b29b      	uxth	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	4413      	add	r3, r2
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	011a      	lsls	r2, r3, #4
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	4413      	add	r3, r2
 800263e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	2200      	movs	r2, #0
 8002648:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d126      	bne.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	011a      	lsls	r2, r3, #4
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268a:	b29a      	uxth	r2, r3
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	801a      	strh	r2, [r3, #0]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800269a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800269e:	b29a      	uxth	r2, r3
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	801a      	strh	r2, [r3, #0]
 80026a4:	e017      	b.n	80026d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	785b      	ldrb	r3, [r3, #1]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d113      	bne.n	80026d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	4413      	add	r3, r2
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	011a      	lsls	r2, r3, #4
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	4413      	add	r3, r2
 80026ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	2200      	movs	r2, #0
 80026d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f006 fe08 	bl	80092f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 82fc 	beq.w	8002ce6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002708:	82fb      	strh	r3, [r7, #22]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	441a      	add	r2, r3
 8002718:	8afb      	ldrh	r3, [r7, #22]
 800271a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800271e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272a:	b29b      	uxth	r3, r3
 800272c:	8013      	strh	r3, [r2, #0]
 800272e:	e2da      	b.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d021      	beq.n	800277e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002754:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	441a      	add	r2, r3
 8002766:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800276a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800276e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277a:	b29b      	uxth	r3, r3
 800277c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002784:	2b01      	cmp	r3, #1
 8002786:	f040 82ae 	bne.w	8002ce6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002792:	441a      	add	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027a0:	441a      	add	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	6a1a      	ldr	r2, [r3, #32]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d30b      	bcc.n	80027ca <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6a1a      	ldr	r2, [r3, #32]
 80027be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c2:	1ad2      	subs	r2, r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	621a      	str	r2, [r3, #32]
 80027c8:	e017      	b.n	80027fa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d108      	bne.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80027d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027e2:	e00a      	b.n	80027fa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2200      	movs	r2, #0
 80027f8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d165      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0x382>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002816:	4413      	add	r3, r2
 8002818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	011a      	lsls	r2, r3, #4
 8002820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002822:	4413      	add	r3, r2
 8002824:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002834:	b29a      	uxth	r2, r3
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800283e:	2b3e      	cmp	r3, #62	; 0x3e
 8002840:	d91d      	bls.n	800287e <HAL_PCD_EP_DB_Transmit+0x332>
 8002842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	64bb      	str	r3, [r7, #72]	; 0x48
 800284a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_PCD_EP_DB_Transmit+0x310>
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	3b01      	subs	r3, #1
 800285a:	64bb      	str	r3, [r7, #72]	; 0x48
 800285c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29a      	uxth	r2, r3
 8002862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002864:	b29b      	uxth	r3, r3
 8002866:	029b      	lsls	r3, r3, #10
 8002868:	b29b      	uxth	r3, r3
 800286a:	4313      	orrs	r3, r2
 800286c:	b29b      	uxth	r3, r3
 800286e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002876:	b29a      	uxth	r2, r3
 8002878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287a:	801a      	strh	r2, [r3, #0]
 800287c:	e044      	b.n	8002908 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800287e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <HAL_PCD_EP_DB_Transmit+0x350>
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002894:	b29a      	uxth	r2, r3
 8002896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	e035      	b.n	8002908 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800289c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80028a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x36a>
 80028b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b2:	3301      	adds	r3, #1
 80028b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80028b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028be:	b29b      	uxth	r3, r3
 80028c0:	029b      	lsls	r3, r3, #10
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4313      	orrs	r3, r2
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	801a      	strh	r2, [r3, #0]
 80028cc:	e01c      	b.n	8002908 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d118      	bne.n	8002908 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	647b      	str	r3, [r7, #68]	; 0x44
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ea:	4413      	add	r3, r2
 80028ec:	647b      	str	r3, [r7, #68]	; 0x44
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	011a      	lsls	r2, r3, #4
 80028f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f6:	4413      	add	r3, r2
 80028f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028fc:	643b      	str	r3, [r7, #64]	; 0x40
 80028fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002902:	b29a      	uxth	r2, r3
 8002904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002906:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6959      	ldr	r1, [r3, #20]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	891a      	ldrh	r2, [r3, #8]
 8002914:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002918:	b29b      	uxth	r3, r3
 800291a:	f004 fb60 	bl	8006fde <USB_WritePMA>
 800291e:	e1e2      	b.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002928:	b29b      	uxth	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	3306      	adds	r3, #6
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	4413      	add	r3, r2
 800293e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002948:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002954:	429a      	cmp	r2, r3
 8002956:	d307      	bcc.n	8002968 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	699a      	ldr	r2, [r3, #24]
 800295c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002960:	1ad2      	subs	r2, r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	619a      	str	r2, [r3, #24]
 8002966:	e002      	b.n	800296e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 80c0 	bne.w	8002af8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	785b      	ldrb	r3, [r3, #1]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d126      	bne.n	80029ce <HAL_PCD_EP_DB_Transmit+0x482>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298e:	b29b      	uxth	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002994:	4413      	add	r3, r2
 8002996:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	011a      	lsls	r2, r3, #4
 800299e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029a0:	4413      	add	r3, r2
 80029a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80029a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029b6:	801a      	strh	r2, [r3, #0]
 80029b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ca:	801a      	strh	r2, [r3, #0]
 80029cc:	e01a      	b.n	8002a04 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	785b      	ldrb	r3, [r3, #1]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d116      	bne.n	8002a04 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	667b      	str	r3, [r7, #100]	; 0x64
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029ea:	4413      	add	r3, r2
 80029ec:	667b      	str	r3, [r7, #100]	; 0x64
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	011a      	lsls	r2, r3, #4
 80029f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029f6:	4413      	add	r3, r2
 80029f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029fc:	663b      	str	r3, [r7, #96]	; 0x60
 80029fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a00:	2200      	movs	r2, #0
 8002a02:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	677b      	str	r3, [r7, #116]	; 0x74
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d12b      	bne.n	8002a6a <HAL_PCD_EP_DB_Transmit+0x51e>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a26:	4413      	add	r3, r2
 8002a28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	011a      	lsls	r2, r3, #4
 8002a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a32:	4413      	add	r3, r2
 8002a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a4e:	801a      	strh	r2, [r3, #0]
 8002a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a66:	801a      	strh	r2, [r3, #0]
 8002a68:	e017      	b.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	785b      	ldrb	r3, [r3, #1]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d113      	bne.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a80:	4413      	add	r3, r2
 8002a82:	677b      	str	r3, [r7, #116]	; 0x74
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	011a      	lsls	r2, r3, #4
 8002a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a92:	673b      	str	r3, [r7, #112]	; 0x70
 8002a94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a96:	2200      	movs	r2, #0
 8002a98:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f006 fc26 	bl	80092f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 811a 	bne.w	8002ce6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002acc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	441a      	add	r2, r3
 8002ade:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	8013      	strh	r3, [r2, #0]
 8002af6:	e0f6      	b.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d121      	bne.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	441a      	add	r2, r3
 8002b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	f040 80ca 	bne.w	8002ce6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b5a:	441a      	add	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b68:	441a      	add	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d30b      	bcc.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	6a1a      	ldr	r2, [r3, #32]
 8002b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b8a:	1ad2      	subs	r2, r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	621a      	str	r2, [r3, #32]
 8002b90:	e017      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d108      	bne.n	8002bac <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002b9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002baa:	e00a      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	785b      	ldrb	r3, [r3, #1]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d165      	bne.n	8002c9c <HAL_PCD_EP_DB_Transmit+0x750>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be4:	4413      	add	r3, r2
 8002be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	011a      	lsls	r2, r3, #4
 8002bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c06:	801a      	strh	r2, [r3, #0]
 8002c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c0c:	2b3e      	cmp	r3, #62	; 0x3e
 8002c0e:	d91d      	bls.n	8002c4c <HAL_PCD_EP_DB_Transmit+0x700>
 8002c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <HAL_PCD_EP_DB_Transmit+0x6de>
 8002c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c26:	3b01      	subs	r3, #1
 8002c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	e041      	b.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <HAL_PCD_EP_DB_Transmit+0x71e>
 8002c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	e032      	b.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x738>
 8002c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c80:	3301      	adds	r3, #1
 8002c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	029b      	lsls	r3, r3, #10
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	4313      	orrs	r3, r2
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c98:	801a      	strh	r2, [r3, #0]
 8002c9a:	e019      	b.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	785b      	ldrb	r3, [r3, #1]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d115      	bne.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb2:	4413      	add	r3, r2
 8002cb4:	657b      	str	r3, [r7, #84]	; 0x54
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	011a      	lsls	r2, r3, #4
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cc4:	653b      	str	r3, [r7, #80]	; 0x50
 8002cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cce:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6959      	ldr	r1, [r3, #20]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	895a      	ldrh	r2, [r3, #10]
 8002cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	f004 f97c 	bl	8006fde <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d00:	82bb      	strh	r3, [r7, #20]
 8002d02:	8abb      	ldrh	r3, [r7, #20]
 8002d04:	f083 0310 	eor.w	r3, r3, #16
 8002d08:	82bb      	strh	r3, [r7, #20]
 8002d0a:	8abb      	ldrh	r3, [r7, #20]
 8002d0c:	f083 0320 	eor.w	r3, r3, #32
 8002d10:	82bb      	strh	r3, [r7, #20]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	441a      	add	r2, r3
 8002d20:	8abb      	ldrh	r3, [r7, #20]
 8002d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3790      	adds	r7, #144	; 0x90
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	817b      	strh	r3, [r7, #10]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d52:	897b      	ldrh	r3, [r7, #10]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e009      	b.n	8002d8a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d76:	897a      	ldrh	r2, [r7, #10]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d8a:	893b      	ldrh	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d107      	bne.n	8002da0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2200      	movs	r2, #0
 8002d94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	80da      	strh	r2, [r3, #6]
 8002d9e:	e00b      	b.n	8002db8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2201      	movs	r2, #1
 8002da4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e272      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8087 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de4:	4b92      	ldr	r3, [pc, #584]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d00c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002df0:	4b8f      	ldr	r3, [pc, #572]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d112      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5e>
 8002dfc:	4b8c      	ldr	r3, [pc, #560]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d10b      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0a:	4b89      	ldr	r3, [pc, #548]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d06c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x12c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d168      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e24c      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x76>
 8002e2c:	4b80      	ldr	r3, [pc, #512]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a7f      	ldr	r2, [pc, #508]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	e02e      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x98>
 8002e42:	4b7b      	ldr	r3, [pc, #492]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7a      	ldr	r2, [pc, #488]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b78      	ldr	r3, [pc, #480]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a77      	ldr	r2, [pc, #476]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e01d      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0xbc>
 8002e66:	4b72      	ldr	r3, [pc, #456]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a71      	ldr	r2, [pc, #452]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6e      	ldr	r2, [pc, #440]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e80:	4b6b      	ldr	r3, [pc, #428]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6a      	ldr	r2, [pc, #424]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b68      	ldr	r3, [pc, #416]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a67      	ldr	r2, [pc, #412]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fd feb8 	bl	8000c14 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7fd feb4 	bl	8000c14 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e200      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xe4>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fd fea4 	bl	8000c14 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fd fea0 	bl	8000c14 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1ec      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	4b53      	ldr	r3, [pc, #332]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x10c>
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d063      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efe:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f0a:	4b49      	ldr	r3, [pc, #292]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d11c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x18c>
 8002f16:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d116      	bne.n	8002f50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	4b43      	ldr	r3, [pc, #268]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_OscConfig+0x176>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e1c0      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4939      	ldr	r1, [pc, #228]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	e03a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b36      	ldr	r3, [pc, #216]	; (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fd fe59 	bl	8000c14 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fd fe55 	bl	8000c14 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e1a1      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f78:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4927      	ldr	r1, [pc, #156]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]
 8002f98:	e015      	b.n	8002fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9a:	4b26      	ldr	r3, [pc, #152]	; (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fd fe38 	bl	8000c14 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa8:	f7fd fe34 	bl	8000c14 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e180      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fba:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d03a      	beq.n	8003048 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d019      	beq.n	800300e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fd fe18 	bl	8000c14 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe8:	f7fd fe14 	bl	8000c14 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e160      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003006:	2001      	movs	r0, #1
 8003008:	f000 fad0 	bl	80035ac <RCC_Delay>
 800300c:	e01c      	b.n	8003048 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fd fdfe 	bl	8000c14 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301a:	e00f      	b.n	800303c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301c:	f7fd fdfa 	bl	8000c14 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d908      	bls.n	800303c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e146      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	42420000 	.word	0x42420000
 8003038:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303c:	4b92      	ldr	r3, [pc, #584]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e9      	bne.n	800301c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a6 	beq.w	80031a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305a:	4b8b      	ldr	r3, [pc, #556]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10d      	bne.n	8003082 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003066:	4b88      	ldr	r3, [pc, #544]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4a87      	ldr	r2, [pc, #540]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003070:	61d3      	str	r3, [r2, #28]
 8003072:	4b85      	ldr	r3, [pc, #532]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307e:	2301      	movs	r3, #1
 8003080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003082:	4b82      	ldr	r3, [pc, #520]	; (800328c <HAL_RCC_OscConfig+0x4c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d118      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308e:	4b7f      	ldr	r3, [pc, #508]	; (800328c <HAL_RCC_OscConfig+0x4c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a7e      	ldr	r2, [pc, #504]	; (800328c <HAL_RCC_OscConfig+0x4c8>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7fd fdbb 	bl	8000c14 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a2:	f7fd fdb7 	bl	8000c14 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b64      	cmp	r3, #100	; 0x64
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e103      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	4b75      	ldr	r3, [pc, #468]	; (800328c <HAL_RCC_OscConfig+0x4c8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x312>
 80030c8:	4b6f      	ldr	r3, [pc, #444]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4a6e      	ldr	r2, [pc, #440]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6213      	str	r3, [r2, #32]
 80030d4:	e02d      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x334>
 80030de:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a69      	ldr	r2, [pc, #420]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6213      	str	r3, [r2, #32]
 80030ea:	4b67      	ldr	r3, [pc, #412]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a66      	ldr	r2, [pc, #408]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6213      	str	r3, [r2, #32]
 80030f6:	e01c      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d10c      	bne.n	800311a <HAL_RCC_OscConfig+0x356>
 8003100:	4b61      	ldr	r3, [pc, #388]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a60      	ldr	r2, [pc, #384]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	6213      	str	r3, [r2, #32]
 800310c:	4b5e      	ldr	r3, [pc, #376]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a5d      	ldr	r2, [pc, #372]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	e00b      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 800311a:	4b5b      	ldr	r3, [pc, #364]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a5a      	ldr	r2, [pc, #360]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	4b58      	ldr	r3, [pc, #352]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a57      	ldr	r2, [pc, #348]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d015      	beq.n	8003166 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313a:	f7fd fd6b 	bl	8000c14 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fd fd67 	bl	8000c14 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0b1      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	4b4b      	ldr	r3, [pc, #300]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ee      	beq.n	8003142 <HAL_RCC_OscConfig+0x37e>
 8003164:	e014      	b.n	8003190 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fd fd55 	bl	8000c14 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fd fd51 	bl	8000c14 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e09b      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003184:	4b40      	ldr	r3, [pc, #256]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ee      	bne.n	800316e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d105      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003196:	4b3c      	ldr	r3, [pc, #240]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a3b      	ldr	r2, [pc, #236]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8087 	beq.w	80032ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ac:	4b36      	ldr	r3, [pc, #216]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d061      	beq.n	800327c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d146      	bne.n	800324e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b33      	ldr	r3, [pc, #204]	; (8003290 <HAL_RCC_OscConfig+0x4cc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fd fd25 	bl	8000c14 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fd fd21 	bl	8000c14 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e06d      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e0:	4b29      	ldr	r3, [pc, #164]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f4:	d108      	bne.n	8003208 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031f6:	4b24      	ldr	r3, [pc, #144]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4921      	ldr	r1, [pc, #132]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003208:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a19      	ldr	r1, [r3, #32]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	430b      	orrs	r3, r1
 800321a:	491b      	ldr	r1, [pc, #108]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003220:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x4cc>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fd fcf5 	bl	8000c14 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7fd fcf1 	bl	8000c14 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e03d      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x46a>
 800324c:	e035      	b.n	80032ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_RCC_OscConfig+0x4cc>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fd fcde 	bl	8000c14 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325c:	f7fd fcda 	bl	8000c14 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e026      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x498>
 800327a:	e01e      	b.n	80032ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d107      	bne.n	8003294 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e019      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
 8003288:	40021000 	.word	0x40021000
 800328c:	40007000 	.word	0x40007000
 8003290:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x500>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021000 	.word	0x40021000

080032c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0d0      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d910      	bls.n	800330c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	4965      	ldr	r1, [pc, #404]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0b8      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003324:	4b59      	ldr	r3, [pc, #356]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a58      	ldr	r2, [pc, #352]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800332e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800333c:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a52      	ldr	r2, [pc, #328]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003346:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	494d      	ldr	r1, [pc, #308]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d040      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d115      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07f      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e073      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e06b      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b39      	ldr	r3, [pc, #228]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4936      	ldr	r1, [pc, #216]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b8:	f7fd fc2c 	bl	8000c14 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fd fc28 	bl	8000c14 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e053      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b27      	ldr	r3, [pc, #156]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d210      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4922      	ldr	r1, [pc, #136]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e032      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4916      	ldr	r1, [pc, #88]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	490e      	ldr	r1, [pc, #56]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003456:	f000 f821 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800345a:	4602      	mov	r2, r0
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	490a      	ldr	r1, [pc, #40]	; (8003490 <HAL_RCC_ClockConfig+0x1c8>)
 8003468:	5ccb      	ldrb	r3, [r1, r3]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <HAL_RCC_ClockConfig+0x1cc>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_ClockConfig+0x1d0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fb8a 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40022000 	.word	0x40022000
 800348c:	40021000 	.word	0x40021000
 8003490:	08009860 	.word	0x08009860
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <HAL_RCC_GetSysClockFreq+0x94>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d002      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x30>
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x36>
 80034ca:	e027      	b.n	800351c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034cc:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ce:	613b      	str	r3, [r7, #16]
      break;
 80034d0:	e027      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	0c9b      	lsrs	r3, r3, #18
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	4a17      	ldr	r2, [pc, #92]	; (8003538 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034dc:	5cd3      	ldrb	r3, [r2, r3]
 80034de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d010      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <HAL_RCC_GetSysClockFreq+0x94>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	0c5b      	lsrs	r3, r3, #17
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	4a11      	ldr	r2, [pc, #68]	; (800353c <HAL_RCC_GetSysClockFreq+0xa0>)
 80034f6:	5cd3      	ldrb	r3, [r2, r3]
 80034f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <HAL_RCC_GetSysClockFreq+0x98>)
 80034fe:	fb03 f202 	mul.w	r2, r3, r2
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	e004      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a0c      	ldr	r2, [pc, #48]	; (8003540 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	613b      	str	r3, [r7, #16]
      break;
 800351a:	e002      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_GetSysClockFreq+0xa8>)
 800351e:	613b      	str	r3, [r7, #16]
      break;
 8003520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003522:	693b      	ldr	r3, [r7, #16]
}
 8003524:	4618      	mov	r0, r3
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	00f42400 	.word	0x00f42400
 8003538:	08009878 	.word	0x08009878
 800353c:	08009888 	.word	0x08009888
 8003540:	003d0900 	.word	0x003d0900
 8003544:	007a1200 	.word	0x007a1200

08003548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b02      	ldr	r3, [pc, #8]	; (8003558 <HAL_RCC_GetHCLKFreq+0x10>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	20000000 	.word	0x20000000

0800355c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003560:	f7ff fff2 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	4903      	ldr	r1, [pc, #12]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	08009870 	.word	0x08009870

08003584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003588:	f7ff ffde 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	0adb      	lsrs	r3, r3, #11
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	08009870 	.word	0x08009870

080035ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <RCC_Delay+0x34>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <RCC_Delay+0x38>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	0a5b      	lsrs	r3, r3, #9
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035c8:	bf00      	nop
  }
  while (Delay --);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1e5a      	subs	r2, r3, #1
 80035ce:	60fa      	str	r2, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f9      	bne.n	80035c8 <RCC_Delay+0x1c>
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	20000000 	.word	0x20000000
 80035e4:	10624dd3 	.word	0x10624dd3

080035e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d07d      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003604:	2300      	movs	r3, #0
 8003606:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003608:	4b4f      	ldr	r3, [pc, #316]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10d      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003614:	4b4c      	ldr	r3, [pc, #304]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4a4b      	ldr	r2, [pc, #300]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361e:	61d3      	str	r3, [r2, #28]
 8003620:	4b49      	ldr	r3, [pc, #292]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362c:	2301      	movs	r3, #1
 800362e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b46      	ldr	r3, [pc, #280]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d118      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363c:	4b43      	ldr	r3, [pc, #268]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a42      	ldr	r2, [pc, #264]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003646:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003648:	f7fd fae4 	bl	8000c14 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364e:	e008      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003650:	f7fd fae0 	bl	8000c14 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e06d      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	4b3a      	ldr	r3, [pc, #232]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d02e      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	429a      	cmp	r2, r3
 800368a:	d027      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800368c:	4b2e      	ldr	r3, [pc, #184]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003694:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003696:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800369c:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036a2:	4a29      	ldr	r2, [pc, #164]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d014      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7fd faaf 	bl	8000c14 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ba:	f7fd faab 	bl	8000c14 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e036      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ee      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4917      	ldr	r1, [pc, #92]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f4:	4b14      	ldr	r3, [pc, #80]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	4a13      	ldr	r2, [pc, #76]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	490b      	ldr	r1, [pc, #44]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	4904      	ldr	r1, [pc, #16]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003738:	4313      	orrs	r3, r2
 800373a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
 8003750:	42420440 	.word	0x42420440

08003754 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e041      	b.n	80037ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd f844 	bl	8000808 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f000 f992 	bl	8003abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HAL_TIM_PWM_Start+0x24>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e022      	b.n	800385e <HAL_TIM_PWM_Start+0x6a>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b04      	cmp	r3, #4
 800381c:	d109      	bne.n	8003832 <HAL_TIM_PWM_Start+0x3e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	bf14      	ite	ne
 800382a:	2301      	movne	r3, #1
 800382c:	2300      	moveq	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	e015      	b.n	800385e <HAL_TIM_PWM_Start+0x6a>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d109      	bne.n	800384c <HAL_TIM_PWM_Start+0x58>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	e008      	b.n	800385e <HAL_TIM_PWM_Start+0x6a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	bf14      	ite	ne
 8003858:	2301      	movne	r3, #1
 800385a:	2300      	moveq	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e05e      	b.n	8003924 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d104      	bne.n	8003876 <HAL_TIM_PWM_Start+0x82>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003874:	e013      	b.n	800389e <HAL_TIM_PWM_Start+0xaa>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b04      	cmp	r3, #4
 800387a:	d104      	bne.n	8003886 <HAL_TIM_PWM_Start+0x92>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003884:	e00b      	b.n	800389e <HAL_TIM_PWM_Start+0xaa>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d104      	bne.n	8003896 <HAL_TIM_PWM_Start+0xa2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003894:	e003      	b.n	800389e <HAL_TIM_PWM_Start+0xaa>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	6839      	ldr	r1, [r7, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 faf2 	bl	8003e90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1e      	ldr	r2, [pc, #120]	; (800392c <HAL_TIM_PWM_Start+0x138>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d107      	bne.n	80038c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a18      	ldr	r2, [pc, #96]	; (800392c <HAL_TIM_PWM_Start+0x138>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00e      	beq.n	80038ee <HAL_TIM_PWM_Start+0xfa>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d009      	beq.n	80038ee <HAL_TIM_PWM_Start+0xfa>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a14      	ldr	r2, [pc, #80]	; (8003930 <HAL_TIM_PWM_Start+0x13c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_TIM_PWM_Start+0xfa>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a12      	ldr	r2, [pc, #72]	; (8003934 <HAL_TIM_PWM_Start+0x140>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d111      	bne.n	8003912 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	d010      	beq.n	8003922 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003910:	e007      	b.n	8003922 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800

08003938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003952:	2302      	movs	r3, #2
 8003954:	e0ae      	b.n	8003ab4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b0c      	cmp	r3, #12
 8003962:	f200 809f 	bhi.w	8003aa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003966:	a201      	add	r2, pc, #4	; (adr r2, 800396c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	080039a1 	.word	0x080039a1
 8003970:	08003aa5 	.word	0x08003aa5
 8003974:	08003aa5 	.word	0x08003aa5
 8003978:	08003aa5 	.word	0x08003aa5
 800397c:	080039e1 	.word	0x080039e1
 8003980:	08003aa5 	.word	0x08003aa5
 8003984:	08003aa5 	.word	0x08003aa5
 8003988:	08003aa5 	.word	0x08003aa5
 800398c:	08003a23 	.word	0x08003a23
 8003990:	08003aa5 	.word	0x08003aa5
 8003994:	08003aa5 	.word	0x08003aa5
 8003998:	08003aa5 	.word	0x08003aa5
 800399c:	08003a63 	.word	0x08003a63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f8ea 	bl	8003b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0208 	orr.w	r2, r2, #8
 80039ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0204 	bic.w	r2, r2, #4
 80039ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6999      	ldr	r1, [r3, #24]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	619a      	str	r2, [r3, #24]
      break;
 80039de:	e064      	b.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f930 	bl	8003c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6999      	ldr	r1, [r3, #24]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	021a      	lsls	r2, r3, #8
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	619a      	str	r2, [r3, #24]
      break;
 8003a20:	e043      	b.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 f979 	bl	8003d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0208 	orr.w	r2, r2, #8
 8003a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0204 	bic.w	r2, r2, #4
 8003a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69d9      	ldr	r1, [r3, #28]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	61da      	str	r2, [r3, #28]
      break;
 8003a60:	e023      	b.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 f9c3 	bl	8003df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69d9      	ldr	r1, [r3, #28]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	021a      	lsls	r2, r3, #8
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	61da      	str	r2, [r3, #28]
      break;
 8003aa2:	e002      	b.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <TIM_Base_SetConfig+0xb8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00b      	beq.n	8003aec <TIM_Base_SetConfig+0x30>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ada:	d007      	beq.n	8003aec <TIM_Base_SetConfig+0x30>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <TIM_Base_SetConfig+0xbc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0x30>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a25      	ldr	r2, [pc, #148]	; (8003b7c <TIM_Base_SetConfig+0xc0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d108      	bne.n	8003afe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <TIM_Base_SetConfig+0xb8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <TIM_Base_SetConfig+0x62>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d007      	beq.n	8003b1e <TIM_Base_SetConfig+0x62>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <TIM_Base_SetConfig+0xbc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_Base_SetConfig+0x62>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <TIM_Base_SetConfig+0xc0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d108      	bne.n	8003b30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a07      	ldr	r2, [pc, #28]	; (8003b74 <TIM_Base_SetConfig+0xb8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d103      	bne.n	8003b64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	615a      	str	r2, [r3, #20]
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800

08003b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f023 0201 	bic.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 0302 	bic.w	r3, r3, #2
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <TIM_OC1_SetConfig+0xc8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10c      	bne.n	8003bf6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0308 	bic.w	r3, r3, #8
 8003be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <TIM_OC1_SetConfig+0xc8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d111      	bne.n	8003c22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00

08003c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f023 0210 	bic.w	r2, r3, #16
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0320 	bic.w	r3, r3, #32
 8003c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <TIM_OC2_SetConfig+0xd0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10d      	bne.n	8003cc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <TIM_OC2_SetConfig+0xd0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d113      	bne.n	8003cf8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	40012c00 	.word	0x40012c00

08003d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <TIM_OC3_SetConfig+0xd0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10d      	bne.n	8003d9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <TIM_OC3_SetConfig+0xd0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d113      	bne.n	8003dca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	621a      	str	r2, [r3, #32]
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40012c00 	.word	0x40012c00

08003df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	031b      	lsls	r3, r3, #12
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a0f      	ldr	r2, [pc, #60]	; (8003e8c <TIM_OC4_SetConfig+0x98>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d109      	bne.n	8003e68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	019b      	lsls	r3, r3, #6
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	40012c00 	.word	0x40012c00

08003e90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1a      	ldr	r2, [r3, #32]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e046      	b.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a16      	ldr	r2, [pc, #88]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10c      	bne.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800

08003f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e042      	b.n	800402c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fc fcbe 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2224      	movs	r2, #36	; 0x24
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fe57 	bl	8004c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800400c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	; 0x28
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b20      	cmp	r3, #32
 8004052:	d16d      	bne.n	8004130 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_UART_Transmit+0x2c>
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e066      	b.n	8004132 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2221      	movs	r2, #33	; 0x21
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004072:	f7fc fdcf 	bl	8000c14 <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408c:	d108      	bne.n	80040a0 <HAL_UART_Transmit+0x6c>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	e003      	b.n	80040a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040a8:	e02a      	b.n	8004100 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2200      	movs	r2, #0
 80040b2:	2180      	movs	r1, #128	; 0x80
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fba6 	bl	8004806 <UART_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e036      	b.n	8004132 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	3302      	adds	r3, #2
 80040de:	61bb      	str	r3, [r7, #24]
 80040e0:	e007      	b.n	80040f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	781a      	ldrb	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	3301      	adds	r3, #1
 80040f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1cf      	bne.n	80040aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2200      	movs	r2, #0
 8004112:	2140      	movs	r1, #64	; 0x40
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fb76 	bl	8004806 <UART_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e006      	b.n	8004132 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	e000      	b.n	8004132 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004130:	2302      	movs	r3, #2
  }
}
 8004132:	4618      	mov	r0, r3
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b08a      	sub	sp, #40	; 0x28
 800413e:	af02      	add	r7, sp, #8
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b20      	cmp	r3, #32
 8004158:	d17c      	bne.n	8004254 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_UART_Receive+0x2c>
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e075      	b.n	8004256 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2222      	movs	r2, #34	; 0x22
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800417e:	f7fc fd49 	bl	8000c14 <HAL_GetTick>
 8004182:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	88fa      	ldrh	r2, [r7, #6]
 800418e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004198:	d108      	bne.n	80041ac <HAL_UART_Receive+0x72>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d104      	bne.n	80041ac <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	e003      	b.n	80041b4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041b4:	e043      	b.n	800423e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2200      	movs	r2, #0
 80041be:	2120      	movs	r1, #32
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fb20 	bl	8004806 <UART_WaitOnFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e042      	b.n	8004256 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10c      	bne.n	80041f0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	3302      	adds	r3, #2
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	e01f      	b.n	8004230 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f8:	d007      	beq.n	800420a <HAL_UART_Receive+0xd0>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <HAL_UART_Receive+0xde>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	e008      	b.n	800422a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004224:	b2da      	uxtb	r2, r3
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	3301      	adds	r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1b6      	bne.n	80041b6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	e000      	b.n	8004256 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004254:	2302      	movs	r3, #2
  }
}
 8004256:	4618      	mov	r0, r3
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	4613      	mov	r3, r2
 800426a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b20      	cmp	r3, #32
 8004276:	d112      	bne.n	800429e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_UART_Receive_IT+0x26>
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e00b      	b.n	80042a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	461a      	mov	r2, r3
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fb24 	bl	80048e2 <UART_Start_Receive_IT>
 800429a:	4603      	mov	r3, r0
 800429c:	e000      	b.n	80042a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b0ba      	sub	sp, #232	; 0xe8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10f      	bne.n	800430e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <HAL_UART_IRQHandler+0x66>
 80042fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fc01 	bl	8004b0e <UART_Receive_IT>
      return;
 800430c:	e25b      	b.n	80047c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800430e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80de 	beq.w	80044d4 <HAL_UART_IRQHandler+0x22c>
 8004318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d106      	bne.n	8004332 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004328:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80d1 	beq.w	80044d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00b      	beq.n	8004356 <HAL_UART_IRQHandler+0xae>
 800433e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f043 0201 	orr.w	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_UART_IRQHandler+0xd2>
 8004362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	f043 0202 	orr.w	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_UART_IRQHandler+0xf6>
 8004386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	f043 0204 	orr.w	r2, r3, #4
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d011      	beq.n	80043ce <HAL_UART_IRQHandler+0x126>
 80043aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d105      	bne.n	80043c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	f043 0208 	orr.w	r2, r3, #8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 81f2 	beq.w	80047bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_UART_IRQHandler+0x14e>
 80043e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fb8c 	bl	8004b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d103      	bne.n	8004422 <HAL_UART_IRQHandler+0x17a>
 800441a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d04f      	beq.n	80044c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fa96 	bl	8004954 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d041      	beq.n	80044ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3314      	adds	r3, #20
 800443c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800444c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3314      	adds	r3, #20
 800445e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004462:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800446e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800447a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1d9      	bne.n	8004436 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d013      	beq.n	80044b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448e:	4a7e      	ldr	r2, [pc, #504]	; (8004688 <HAL_UART_IRQHandler+0x3e0>)
 8004490:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004496:	4618      	mov	r0, r3
 8004498:	f7fc fd32 	bl	8000f00 <HAL_DMA_Abort_IT>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d016      	beq.n	80044d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044ac:	4610      	mov	r0, r2
 80044ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b0:	e00e      	b.n	80044d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f993 	bl	80047de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b8:	e00a      	b.n	80044d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f98f 	bl	80047de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c0:	e006      	b.n	80044d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f98b 	bl	80047de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80044ce:	e175      	b.n	80047bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	bf00      	nop
    return;
 80044d2:	e173      	b.n	80047bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	2b01      	cmp	r3, #1
 80044da:	f040 814f 	bne.w	800477c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8148 	beq.w	800477c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8141 	beq.w	800477c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80b6 	beq.w	800468c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800452c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8145 	beq.w	80047c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800453a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800453e:	429a      	cmp	r2, r3
 8004540:	f080 813e 	bcs.w	80047c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800454a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b20      	cmp	r3, #32
 8004554:	f000 8088 	beq.w	8004668 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800456e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004576:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004584:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004590:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800459c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1d9      	bne.n	8004558 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3314      	adds	r3, #20
 80045c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e1      	bne.n	80045a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3314      	adds	r3, #20
 8004600:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004604:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004606:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800460a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e3      	bne.n	80045e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004638:	f023 0310 	bic.w	r3, r3, #16
 800463c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	330c      	adds	r3, #12
 8004646:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800464a:	65ba      	str	r2, [r7, #88]	; 0x58
 800464c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e3      	bne.n	8004626 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	4618      	mov	r0, r3
 8004664:	f7fc fc11 	bl	8000e8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004676:	b29b      	uxth	r3, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	b29b      	uxth	r3, r3
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f8b6 	bl	80047f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004684:	e09c      	b.n	80047c0 <HAL_UART_IRQHandler+0x518>
 8004686:	bf00      	nop
 8004688:	08004a19 	.word	0x08004a19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004694:	b29b      	uxth	r3, r3
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 808e 	beq.w	80047c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8089 	beq.w	80047c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046d6:	647a      	str	r2, [r7, #68]	; 0x44
 80046d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e3      	bne.n	80046b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3314      	adds	r3, #20
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	623b      	str	r3, [r7, #32]
   return(result);
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3314      	adds	r3, #20
 800470a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800470e:	633a      	str	r2, [r7, #48]	; 0x30
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e3      	bne.n	80046ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	330c      	adds	r3, #12
 8004736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0310 	bic.w	r3, r3, #16
 8004746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	330c      	adds	r3, #12
 8004750:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004754:	61fa      	str	r2, [r7, #28]
 8004756:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	69b9      	ldr	r1, [r7, #24]
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	617b      	str	r3, [r7, #20]
   return(result);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e3      	bne.n	8004730 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800476e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f83b 	bl	80047f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800477a:	e023      	b.n	80047c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800477c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <HAL_UART_IRQHandler+0x4f4>
 8004788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f953 	bl	8004a40 <UART_Transmit_IT>
    return;
 800479a:	e014      	b.n	80047c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800479c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00e      	beq.n	80047c6 <HAL_UART_IRQHandler+0x51e>
 80047a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f992 	bl	8004ade <UART_EndTransmit_IT>
    return;
 80047ba:	e004      	b.n	80047c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80047bc:	bf00      	nop
 80047be:	e002      	b.n	80047c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80047c0:	bf00      	nop
 80047c2:	e000      	b.n	80047c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80047c4:	bf00      	nop
  }
}
 80047c6:	37e8      	adds	r7, #232	; 0xe8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr

08004806 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b090      	sub	sp, #64	; 0x40
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	603b      	str	r3, [r7, #0]
 8004812:	4613      	mov	r3, r2
 8004814:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004816:	e050      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d04c      	beq.n	80048ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <UART_WaitOnFlagUntilTimeout+0x30>
 8004826:	f7fc f9f5 	bl	8000c14 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004832:	429a      	cmp	r2, r3
 8004834:	d241      	bcs.n	80048ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004856:	637a      	str	r2, [r7, #52]	; 0x34
 8004858:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800485c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e5      	bne.n	8004836 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3314      	adds	r3, #20
 8004870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	613b      	str	r3, [r7, #16]
   return(result);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f023 0301 	bic.w	r3, r3, #1
 8004880:	63bb      	str	r3, [r7, #56]	; 0x38
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3314      	adds	r3, #20
 8004888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800488a:	623a      	str	r2, [r7, #32]
 800488c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	69f9      	ldr	r1, [r7, #28]
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	61bb      	str	r3, [r7, #24]
   return(result);
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e5      	bne.n	800486a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e00f      	b.n	80048da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d09f      	beq.n	8004818 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3740      	adds	r7, #64	; 0x40
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	4613      	mov	r3, r2
 80048ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	88fa      	ldrh	r2, [r7, #6]
 80048fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	88fa      	ldrh	r2, [r7, #6]
 8004900:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2222      	movs	r2, #34	; 0x22
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d007      	beq.n	8004928 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004926:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0220 	orr.w	r2, r2, #32
 8004946:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr

08004954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004954:	b480      	push	{r7}
 8004956:	b095      	sub	sp, #84	; 0x54
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800497c:	643a      	str	r2, [r7, #64]	; 0x40
 800497e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004982:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e5      	bne.n	800495c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3314      	adds	r3, #20
 8004996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	61fb      	str	r3, [r7, #28]
   return(result);
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3314      	adds	r3, #20
 80049ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e5      	bne.n	8004990 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d119      	bne.n	8004a00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	60bb      	str	r3, [r7, #8]
   return(result);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f023 0310 	bic.w	r3, r3, #16
 80049e2:	647b      	str	r3, [r7, #68]	; 0x44
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	330c      	adds	r3, #12
 80049ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049ec:	61ba      	str	r2, [r7, #24]
 80049ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6979      	ldr	r1, [r7, #20]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	613b      	str	r3, [r7, #16]
   return(result);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a0e:	bf00      	nop
 8004a10:	3754      	adds	r7, #84	; 0x54
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff fed3 	bl	80047de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b21      	cmp	r3, #33	; 0x21
 8004a52:	d13e      	bne.n	8004ad2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5c:	d114      	bne.n	8004a88 <UART_Transmit_IT+0x48>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d110      	bne.n	8004a88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	1c9a      	adds	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	621a      	str	r2, [r3, #32]
 8004a86:	e008      	b.n	8004a9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	1c59      	adds	r1, r3, #1
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6211      	str	r1, [r2, #32]
 8004a92:	781a      	ldrb	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10f      	bne.n	8004ace <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004abc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004acc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e000      	b.n	8004ad4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
  }
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff fe64 	bl	80047cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b08c      	sub	sp, #48	; 0x30
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b22      	cmp	r3, #34	; 0x22
 8004b20:	f040 80ae 	bne.w	8004c80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2c:	d117      	bne.n	8004b5e <UART_Receive_IT+0x50>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d113      	bne.n	8004b5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	1c9a      	adds	r2, r3, #2
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b5c:	e026      	b.n	8004bac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b70:	d007      	beq.n	8004b82 <UART_Receive_IT+0x74>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <UART_Receive_IT+0x82>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	e008      	b.n	8004ba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d15d      	bne.n	8004c7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0220 	bic.w	r2, r2, #32
 8004bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d135      	bne.n	8004c72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f023 0310 	bic.w	r3, r3, #16
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2c:	623a      	str	r2, [r7, #32]
 8004c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	69f9      	ldr	r1, [r7, #28]
 8004c32:	6a3a      	ldr	r2, [r7, #32]
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b10      	cmp	r3, #16
 8004c4c:	d10a      	bne.n	8004c64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fdc0 	bl	80047f0 <HAL_UARTEx_RxEventCallback>
 8004c70:	e002      	b.n	8004c78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fb fd78 	bl	8000768 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e002      	b.n	8004c82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e000      	b.n	8004c82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c80:	2302      	movs	r3, #2
  }
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3730      	adds	r7, #48	; 0x30
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cc6:	f023 030c 	bic.w	r3, r3, #12
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a2c      	ldr	r2, [pc, #176]	; (8004da0 <UART_SetConfig+0x114>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d103      	bne.n	8004cfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cf4:	f7fe fc46 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	e002      	b.n	8004d02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cfc:	f7fe fc2e 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8004d00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	009a      	lsls	r2, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	4a22      	ldr	r2, [pc, #136]	; (8004da4 <UART_SetConfig+0x118>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	0119      	lsls	r1, r3, #4
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	009a      	lsls	r2, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d38:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <UART_SetConfig+0x118>)
 8004d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	2064      	movs	r0, #100	; 0x64
 8004d42:	fb00 f303 	mul.w	r3, r0, r3
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	3332      	adds	r3, #50	; 0x32
 8004d4c:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <UART_SetConfig+0x118>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d58:	4419      	add	r1, r3
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009a      	lsls	r2, r3, #2
 8004d64:	441a      	add	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d70:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <UART_SetConfig+0x118>)
 8004d72:	fba3 0302 	umull	r0, r3, r3, r2
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	2064      	movs	r0, #100	; 0x64
 8004d7a:	fb00 f303 	mul.w	r3, r0, r3
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	3332      	adds	r3, #50	; 0x32
 8004d84:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <UART_SetConfig+0x118>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	f003 020f 	and.w	r2, r3, #15
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	440a      	add	r2, r1
 8004d96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40013800 	.word	0x40013800
 8004da4:	51eb851f 	.word	0x51eb851f

08004da8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004da8:	b084      	sub	sp, #16
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	f107 0014 	add.w	r0, r7, #20
 8004db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	b004      	add	sp, #16
 8004dc6:	4770      	bx	lr

08004dc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004dd8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ddc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004dfc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004e00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	4013      	ands	r3, r2
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr

08004e28 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e40:	b084      	sub	sp, #16
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	f107 0014 	add.w	r0, r7, #20
 8004e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	b004      	add	sp, #16
 8004e7e:	4770      	bx	lr

08004e80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b09d      	sub	sp, #116	; 0x74
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	78db      	ldrb	r3, [r3, #3]
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d81f      	bhi.n	8004ef2 <USB_ActivateEndpoint+0x72>
 8004eb2:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <USB_ActivateEndpoint+0x38>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004ec9 	.word	0x08004ec9
 8004ebc:	08004ee5 	.word	0x08004ee5
 8004ec0:	08004efb 	.word	0x08004efb
 8004ec4:	08004ed7 	.word	0x08004ed7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ec8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ed0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004ed4:	e012      	b.n	8004efc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004ed6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004eda:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004ede:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004ee2:	e00b      	b.n	8004efc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ee4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ee8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004ef0:	e004      	b.n	8004efc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004ef8:	e000      	b.n	8004efc <USB_ActivateEndpoint+0x7c>
      break;
 8004efa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	441a      	add	r2, r3
 8004f4c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	7b1b      	ldrb	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f040 8178 	bne.w	800525e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	785b      	ldrb	r3, [r3, #1]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 8084 	beq.w	8005080 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	4413      	add	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	011a      	lsls	r2, r3, #4
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	88db      	ldrh	r3, [r3, #6]
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	827b      	strh	r3, [r7, #18]
 8004fba:	8a7b      	ldrh	r3, [r7, #18]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01b      	beq.n	8004ffc <USB_ActivateEndpoint+0x17c>
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	823b      	strh	r3, [r7, #16]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	8a3b      	ldrh	r3, [r7, #16]
 8004fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	78db      	ldrb	r3, [r3, #3]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d020      	beq.n	8005046 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501a:	81bb      	strh	r3, [r7, #12]
 800501c:	89bb      	ldrh	r3, [r7, #12]
 800501e:	f083 0320 	eor.w	r3, r3, #32
 8005022:	81bb      	strh	r3, [r7, #12]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	441a      	add	r2, r3
 800502e:	89bb      	ldrh	r3, [r7, #12]
 8005030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005040:	b29b      	uxth	r3, r3
 8005042:	8013      	strh	r3, [r2, #0]
 8005044:	e2d5      	b.n	80055f2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505c:	81fb      	strh	r3, [r7, #14]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	89fb      	ldrh	r3, [r7, #14]
 800506a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507a:	b29b      	uxth	r3, r3
 800507c:	8013      	strh	r3, [r2, #0]
 800507e:	e2b8      	b.n	80055f2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	633b      	str	r3, [r7, #48]	; 0x30
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	4413      	add	r3, r2
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	011a      	lsls	r2, r3, #4
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	4413      	add	r3, r2
 800509e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	88db      	ldrh	r3, [r3, #6]
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050be:	b29b      	uxth	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	4413      	add	r3, r2
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	011a      	lsls	r2, r3, #4
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	4413      	add	r3, r2
 80050d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b3e      	cmp	r3, #62	; 0x3e
 80050ee:	d91d      	bls.n	800512c <USB_ActivateEndpoint+0x2ac>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <USB_ActivateEndpoint+0x28a>
 8005104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005106:	3b01      	subs	r3, #1
 8005108:	66bb      	str	r3, [r7, #104]	; 0x68
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b29a      	uxth	r2, r3
 8005110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005112:	b29b      	uxth	r3, r3
 8005114:	029b      	lsls	r3, r3, #10
 8005116:	b29b      	uxth	r3, r3
 8005118:	4313      	orrs	r3, r2
 800511a:	b29b      	uxth	r3, r3
 800511c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005124:	b29a      	uxth	r2, r3
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	801a      	strh	r2, [r3, #0]
 800512a:	e026      	b.n	800517a <USB_ActivateEndpoint+0x2fa>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <USB_ActivateEndpoint+0x2ca>
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005142:	b29a      	uxth	r2, r3
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	e017      	b.n	800517a <USB_ActivateEndpoint+0x2fa>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	66bb      	str	r3, [r7, #104]	; 0x68
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <USB_ActivateEndpoint+0x2e4>
 800515e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005160:	3301      	adds	r3, #1
 8005162:	66bb      	str	r3, [r7, #104]	; 0x68
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29a      	uxth	r2, r3
 800516a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800516c:	b29b      	uxth	r3, r3
 800516e:	029b      	lsls	r3, r3, #10
 8005170:	b29b      	uxth	r3, r3
 8005172:	4313      	orrs	r3, r2
 8005174:	b29a      	uxth	r2, r3
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	847b      	strh	r3, [r7, #34]	; 0x22
 8005188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800518a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01b      	beq.n	80051ca <USB_ActivateEndpoint+0x34a>
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a8:	843b      	strh	r3, [r7, #32]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	441a      	add	r2, r3
 80051b4:	8c3b      	ldrh	r3, [r7, #32]
 80051b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d124      	bne.n	800521c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e8:	83bb      	strh	r3, [r7, #28]
 80051ea:	8bbb      	ldrh	r3, [r7, #28]
 80051ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051f0:	83bb      	strh	r3, [r7, #28]
 80051f2:	8bbb      	ldrh	r3, [r7, #28]
 80051f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051f8:	83bb      	strh	r3, [r7, #28]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	441a      	add	r2, r3
 8005204:	8bbb      	ldrh	r3, [r7, #28]
 8005206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005216:	b29b      	uxth	r3, r3
 8005218:	8013      	strh	r3, [r2, #0]
 800521a:	e1ea      	b.n	80055f2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	83fb      	strh	r3, [r7, #30]
 8005234:	8bfb      	ldrh	r3, [r7, #30]
 8005236:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800523a:	83fb      	strh	r3, [r7, #30]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	8bfb      	ldrh	r3, [r7, #30]
 8005248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005258:	b29b      	uxth	r3, r3
 800525a:	8013      	strh	r3, [r2, #0]
 800525c:	e1c9      	b.n	80055f2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	78db      	ldrb	r3, [r3, #3]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d11e      	bne.n	80052a4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	441a      	add	r2, r3
 800528a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800528e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005296:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800529a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529e:	b29b      	uxth	r3, r3
 80052a0:	8013      	strh	r3, [r2, #0]
 80052a2:	e01d      	b.n	80052e0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80052b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052dc:	b29b      	uxth	r3, r3
 80052de:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f0:	4413      	add	r3, r2
 80052f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	011a      	lsls	r2, r3, #4
 80052fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005302:	65bb      	str	r3, [r7, #88]	; 0x58
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	891b      	ldrh	r3, [r3, #8]
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	b29b      	uxth	r3, r3
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	657b      	str	r3, [r7, #84]	; 0x54
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005324:	4413      	add	r3, r2
 8005326:	657b      	str	r3, [r7, #84]	; 0x54
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	011a      	lsls	r2, r3, #4
 800532e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005330:	4413      	add	r3, r2
 8005332:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005336:	653b      	str	r3, [r7, #80]	; 0x50
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	895b      	ldrh	r3, [r3, #10]
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	b29b      	uxth	r3, r3
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005346:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f040 8093 	bne.w	8005478 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005362:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01b      	beq.n	80053a6 <USB_ActivateEndpoint+0x526>
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005384:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	441a      	add	r2, r3
 8005390:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800539e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80053b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01b      	beq.n	80053f6 <USB_ActivateEndpoint+0x576>
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80053e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540c:	873b      	strh	r3, [r7, #56]	; 0x38
 800540e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005410:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005414:	873b      	strh	r3, [r7, #56]	; 0x38
 8005416:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005418:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800541c:	873b      	strh	r3, [r7, #56]	; 0x38
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800542a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543a:	b29b      	uxth	r3, r3
 800543c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005454:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	441a      	add	r2, r3
 8005460:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005472:	b29b      	uxth	r3, r3
 8005474:	8013      	strh	r3, [r2, #0]
 8005476:	e0bc      	b.n	80055f2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005488:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800548c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01d      	beq.n	80054d0 <USB_ActivateEndpoint+0x650>
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	441a      	add	r2, r3
 80054b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80054bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80054e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01d      	beq.n	8005528 <USB_ActivateEndpoint+0x6a8>
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	441a      	add	r2, r3
 8005510:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005520:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005524:	b29b      	uxth	r3, r3
 8005526:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	78db      	ldrb	r3, [r3, #3]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d024      	beq.n	800557a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005546:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800554a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800554e:	f083 0320 	eor.w	r3, r3, #32
 8005552:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	441a      	add	r2, r3
 8005560:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
 8005578:	e01d      	b.n	80055b6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005590:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	441a      	add	r2, r3
 800559e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80055a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80055de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80055f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3774      	adds	r7, #116	; 0x74
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr

08005600 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b0c2      	sub	sp, #264	; 0x108
 8005604:	af00      	add	r7, sp, #0
 8005606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800560e:	6018      	str	r0, [r3, #0]
 8005610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005618:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800561a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	2b01      	cmp	r3, #1
 8005628:	f040 86b7 	bne.w	800639a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800562c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	429a      	cmp	r2, r3
 8005646:	d908      	bls.n	800565a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005658:	e007      	b.n	800566a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800565a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800566a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800566e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	7b1b      	ldrb	r3, [r3, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d13a      	bne.n	80056f0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800567a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800567e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6959      	ldr	r1, [r3, #20]
 8005686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	88da      	ldrh	r2, [r3, #6]
 8005692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005696:	b29b      	uxth	r3, r3
 8005698:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800569c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056a0:	6800      	ldr	r0, [r0, #0]
 80056a2:	f001 fc9c 	bl	8006fde <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4413      	add	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	011a      	lsls	r2, r3, #4
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	801a      	strh	r2, [r3, #0]
 80056ec:	f000 be1f 	b.w	800632e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80056f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	78db      	ldrb	r3, [r3, #3]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	f040 8462 	bne.w	8005fc6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a1a      	ldr	r2, [r3, #32]
 800570e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	429a      	cmp	r2, r3
 800571c:	f240 83df 	bls.w	8005ede <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800574a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	441a      	add	r2, r3
 8005764:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005770:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005778:	b29b      	uxth	r3, r3
 800577a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800577c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6a1a      	ldr	r2, [r3, #32]
 8005788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800578c:	1ad2      	subs	r2, r2, r3
 800578e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800579a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 81c7 	beq.w	8005b50 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	633b      	str	r3, [r7, #48]	; 0x30
 80057ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d177      	bne.n	80058ce <USB_EPStartXfer+0x2ce>
 80057de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	4413      	add	r3, r2
 8005800:	62bb      	str	r3, [r7, #40]	; 0x28
 8005802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	011a      	lsls	r2, r3, #4
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	4413      	add	r3, r2
 8005814:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005824:	b29a      	uxth	r2, r3
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582e:	2b3e      	cmp	r3, #62	; 0x3e
 8005830:	d921      	bls.n	8005876 <USB_EPStartXfer+0x276>
 8005832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800583c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005840:	f003 031f 	and.w	r3, r3, #31
 8005844:	2b00      	cmp	r3, #0
 8005846:	d104      	bne.n	8005852 <USB_EPStartXfer+0x252>
 8005848:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800584c:	3b01      	subs	r3, #1
 800584e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29a      	uxth	r2, r3
 8005858:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800585c:	b29b      	uxth	r3, r3
 800585e:	029b      	lsls	r3, r3, #10
 8005860:	b29b      	uxth	r3, r3
 8005862:	4313      	orrs	r3, r2
 8005864:	b29b      	uxth	r3, r3
 8005866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586e:	b29a      	uxth	r2, r3
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	e050      	b.n	8005918 <USB_EPStartXfer+0x318>
 8005876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10a      	bne.n	8005894 <USB_EPStartXfer+0x294>
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588c:	b29a      	uxth	r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	e041      	b.n	8005918 <USB_EPStartXfer+0x318>
 8005894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005898:	085b      	lsrs	r3, r3, #1
 800589a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800589e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d004      	beq.n	80058b4 <USB_EPStartXfer+0x2b4>
 80058aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058ae:	3301      	adds	r3, #1
 80058b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058be:	b29b      	uxth	r3, r3
 80058c0:	029b      	lsls	r3, r3, #10
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	4313      	orrs	r3, r2
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	e024      	b.n	8005918 <USB_EPStartXfer+0x318>
 80058ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d11c      	bne.n	8005918 <USB_EPStartXfer+0x318>
 80058de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	4413      	add	r3, r2
 80058f4:	633b      	str	r3, [r7, #48]	; 0x30
 80058f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	011a      	lsls	r2, r3, #4
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	4413      	add	r3, r2
 8005908:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800590c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005912:	b29a      	uxth	r2, r3
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	895b      	ldrh	r3, [r3, #10]
 8005924:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6959      	ldr	r1, [r3, #20]
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005938:	b29b      	uxth	r3, r3
 800593a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800593e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005942:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005946:	6800      	ldr	r0, [r0, #0]
 8005948:	f001 fb49 	bl	8006fde <USB_WritePMA>
            ep->xfer_buff += len;
 800594c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595c:	441a      	add	r2, r3
 800595e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800596a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6a1a      	ldr	r2, [r3, #32]
 8005976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	429a      	cmp	r2, r3
 8005984:	d90f      	bls.n	80059a6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6a1a      	ldr	r2, [r3, #32]
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005996:	1ad2      	subs	r2, r2, r3
 8005998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	621a      	str	r2, [r3, #32]
 80059a4:	e00e      	b.n	80059c4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80059a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80059b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2200      	movs	r2, #0
 80059c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d177      	bne.n	8005ac4 <USB_EPStartXfer+0x4c4>
 80059d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	4413      	add	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	011a      	lsls	r2, r3, #4
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	801a      	strh	r2, [r3, #0]
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a24:	2b3e      	cmp	r3, #62	; 0x3e
 8005a26:	d921      	bls.n	8005a6c <USB_EPStartXfer+0x46c>
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <USB_EPStartXfer+0x448>
 8005a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a42:	3b01      	subs	r3, #1
 8005a44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	029b      	lsls	r3, r3, #10
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	e056      	b.n	8005b1a <USB_EPStartXfer+0x51a>
 8005a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <USB_EPStartXfer+0x48a>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	801a      	strh	r2, [r3, #0]
 8005a88:	e047      	b.n	8005b1a <USB_EPStartXfer+0x51a>
 8005a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d004      	beq.n	8005aaa <USB_EPStartXfer+0x4aa>
 8005aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	029b      	lsls	r3, r3, #10
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	4313      	orrs	r3, r2
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	801a      	strh	r2, [r3, #0]
 8005ac2:	e02a      	b.n	8005b1a <USB_EPStartXfer+0x51a>
 8005ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d122      	bne.n	8005b1a <USB_EPStartXfer+0x51a>
 8005ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	623b      	str	r3, [r7, #32]
 8005ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	4413      	add	r3, r2
 8005af6:	623b      	str	r3, [r7, #32]
 8005af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	011a      	lsls	r2, r3, #4
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b0e:	61fb      	str	r3, [r7, #28]
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	891b      	ldrh	r3, [r3, #8]
 8005b26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6959      	ldr	r1, [r3, #20]
 8005b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b44:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b48:	6800      	ldr	r0, [r0, #0]
 8005b4a:	f001 fa48 	bl	8006fde <USB_WritePMA>
 8005b4e:	e3ee      	b.n	800632e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d177      	bne.n	8005c50 <USB_EPStartXfer+0x650>
 8005b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b80:	4413      	add	r3, r2
 8005b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	011a      	lsls	r2, r3, #4
 8005b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b94:	4413      	add	r3, r2
 8005b96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb0:	2b3e      	cmp	r3, #62	; 0x3e
 8005bb2:	d921      	bls.n	8005bf8 <USB_EPStartXfer+0x5f8>
 8005bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <USB_EPStartXfer+0x5d4>
 8005bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	029b      	lsls	r3, r3, #10
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	4313      	orrs	r3, r2
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	e056      	b.n	8005ca6 <USB_EPStartXfer+0x6a6>
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <USB_EPStartXfer+0x616>
 8005c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c12:	801a      	strh	r2, [r3, #0]
 8005c14:	e047      	b.n	8005ca6 <USB_EPStartXfer+0x6a6>
 8005c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d004      	beq.n	8005c36 <USB_EPStartXfer+0x636>
 8005c2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c30:	3301      	adds	r3, #1
 8005c32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	029b      	lsls	r3, r3, #10
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	4313      	orrs	r3, r2
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	e02a      	b.n	8005ca6 <USB_EPStartXfer+0x6a6>
 8005c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d122      	bne.n	8005ca6 <USB_EPStartXfer+0x6a6>
 8005c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c80:	4413      	add	r3, r2
 8005c82:	653b      	str	r3, [r7, #80]	; 0x50
 8005c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	011a      	lsls	r2, r3, #4
 8005c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c94:	4413      	add	r3, r2
 8005c96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	891b      	ldrh	r3, [r3, #8]
 8005cb2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6959      	ldr	r1, [r3, #20]
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ccc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005cd0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cd4:	6800      	ldr	r0, [r0, #0]
 8005cd6:	f001 f982 	bl	8006fde <USB_WritePMA>
            ep->xfer_buff += len;
 8005cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cea:	441a      	add	r2, r3
 8005cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6a1a      	ldr	r2, [r3, #32]
 8005d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d90f      	bls.n	8005d34 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6a1a      	ldr	r2, [r3, #32]
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d24:	1ad2      	subs	r2, r2, r3
 8005d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	621a      	str	r2, [r3, #32]
 8005d32:	e00e      	b.n	8005d52 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d177      	bne.n	8005e5e <USB_EPStartXfer+0x85e>
 8005d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	4413      	add	r3, r2
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	011a      	lsls	r2, r3, #4
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	4413      	add	r3, r2
 8005da4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	801a      	strh	r2, [r3, #0]
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8005dc0:	d921      	bls.n	8005e06 <USB_EPStartXfer+0x806>
 8005dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <USB_EPStartXfer+0x7e2>
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	029b      	lsls	r3, r3, #10
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	4313      	orrs	r3, r2
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	e050      	b.n	8005ea8 <USB_EPStartXfer+0x8a8>
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <USB_EPStartXfer+0x824>
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e20:	801a      	strh	r2, [r3, #0]
 8005e22:	e041      	b.n	8005ea8 <USB_EPStartXfer+0x8a8>
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d004      	beq.n	8005e44 <USB_EPStartXfer+0x844>
 8005e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3e:	3301      	adds	r3, #1
 8005e40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	029b      	lsls	r3, r3, #10
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	4313      	orrs	r3, r2
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	e024      	b.n	8005ea8 <USB_EPStartXfer+0x8a8>
 8005e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d11c      	bne.n	8005ea8 <USB_EPStartXfer+0x8a8>
 8005e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e82:	4413      	add	r3, r2
 8005e84:	643b      	str	r3, [r7, #64]	; 0x40
 8005e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	011a      	lsls	r2, r3, #4
 8005e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e96:	4413      	add	r3, r2
 8005e98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	895b      	ldrh	r3, [r3, #10]
 8005eb4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6959      	ldr	r1, [r3, #20]
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ece:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ed2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ed6:	6800      	ldr	r0, [r0, #0]
 8005ed8:	f001 f881 	bl	8006fde <USB_WritePMA>
 8005edc:	e227      	b.n	800632e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f14:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	441a      	add	r2, r3
 8005f32:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f6a:	4413      	add	r3, r2
 8005f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	011a      	lsls	r2, r3, #4
 8005f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f7e:	4413      	add	r3, r2
 8005f80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f84:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	891b      	ldrh	r3, [r3, #8]
 8005f9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6959      	ldr	r1, [r3, #20]
 8005fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005fb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005fba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005fbe:	6800      	ldr	r0, [r0, #0]
 8005fc0:	f001 f80d 	bl	8006fde <USB_WritePMA>
 8005fc4:	e1b3      	b.n	800632e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a1a      	ldr	r2, [r3, #32]
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 80c6 	beq.w	8006198 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800600c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	673b      	str	r3, [r7, #112]	; 0x70
 8006018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d177      	bne.n	8006118 <USB_EPStartXfer+0xb18>
 8006028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	66bb      	str	r3, [r7, #104]	; 0x68
 8006034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006042:	b29b      	uxth	r3, r3
 8006044:	461a      	mov	r2, r3
 8006046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006048:	4413      	add	r3, r2
 800604a:	66bb      	str	r3, [r7, #104]	; 0x68
 800604c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	011a      	lsls	r2, r3, #4
 800605a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800605c:	4413      	add	r3, r2
 800605e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006062:	667b      	str	r3, [r7, #100]	; 0x64
 8006064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800606e:	b29a      	uxth	r2, r3
 8006070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006078:	2b3e      	cmp	r3, #62	; 0x3e
 800607a:	d921      	bls.n	80060c0 <USB_EPStartXfer+0xac0>
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <USB_EPStartXfer+0xa9c>
 8006092:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006096:	3b01      	subs	r3, #1
 8006098:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800609c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	029b      	lsls	r3, r3, #10
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4313      	orrs	r3, r2
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	e050      	b.n	8006162 <USB_EPStartXfer+0xb62>
 80060c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <USB_EPStartXfer+0xade>
 80060c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060da:	801a      	strh	r2, [r3, #0]
 80060dc:	e041      	b.n	8006162 <USB_EPStartXfer+0xb62>
 80060de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d004      	beq.n	80060fe <USB_EPStartXfer+0xafe>
 80060f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060f8:	3301      	adds	r3, #1
 80060fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29a      	uxth	r2, r3
 8006104:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006108:	b29b      	uxth	r3, r3
 800610a:	029b      	lsls	r3, r3, #10
 800610c:	b29b      	uxth	r3, r3
 800610e:	4313      	orrs	r3, r2
 8006110:	b29a      	uxth	r2, r3
 8006112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006114:	801a      	strh	r2, [r3, #0]
 8006116:	e024      	b.n	8006162 <USB_EPStartXfer+0xb62>
 8006118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d11c      	bne.n	8006162 <USB_EPStartXfer+0xb62>
 8006128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006136:	b29b      	uxth	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800613c:	4413      	add	r3, r2
 800613e:	673b      	str	r3, [r7, #112]	; 0x70
 8006140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	011a      	lsls	r2, r3, #4
 800614e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006150:	4413      	add	r3, r2
 8006152:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006156:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800615c:	b29a      	uxth	r2, r3
 800615e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006160:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	895b      	ldrh	r3, [r3, #10]
 800616e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6959      	ldr	r1, [r3, #20]
 800617e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006182:	b29b      	uxth	r3, r3
 8006184:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006188:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800618c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006190:	6800      	ldr	r0, [r0, #0]
 8006192:	f000 ff24 	bl	8006fde <USB_WritePMA>
 8006196:	e0ca      	b.n	800632e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d177      	bne.n	8006298 <USB_EPStartXfer+0xc98>
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061c8:	4413      	add	r3, r2
 80061ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	011a      	lsls	r2, r3, #4
 80061da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061dc:	4413      	add	r3, r2
 80061de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80061e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f8:	2b3e      	cmp	r3, #62	; 0x3e
 80061fa:	d921      	bls.n	8006240 <USB_EPStartXfer+0xc40>
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2b00      	cmp	r3, #0
 8006210:	d104      	bne.n	800621c <USB_EPStartXfer+0xc1c>
 8006212:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006216:	3b01      	subs	r3, #1
 8006218:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800621c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29a      	uxth	r2, r3
 8006222:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006226:	b29b      	uxth	r3, r3
 8006228:	029b      	lsls	r3, r3, #10
 800622a:	b29b      	uxth	r3, r3
 800622c:	4313      	orrs	r3, r2
 800622e:	b29b      	uxth	r3, r3
 8006230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006238:	b29a      	uxth	r2, r3
 800623a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	e05c      	b.n	80062fa <USB_EPStartXfer+0xcfa>
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <USB_EPStartXfer+0xc5e>
 8006248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006256:	b29a      	uxth	r2, r3
 8006258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	e04d      	b.n	80062fa <USB_EPStartXfer+0xcfa>
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006262:	085b      	lsrs	r3, r3, #1
 8006264:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <USB_EPStartXfer+0xc7e>
 8006274:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006278:	3301      	adds	r3, #1
 800627a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800627e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29a      	uxth	r2, r3
 8006284:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006288:	b29b      	uxth	r3, r3
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	b29b      	uxth	r3, r3
 800628e:	4313      	orrs	r3, r2
 8006290:	b29a      	uxth	r2, r3
 8006292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006294:	801a      	strh	r2, [r3, #0]
 8006296:	e030      	b.n	80062fa <USB_EPStartXfer+0xcfa>
 8006298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d128      	bne.n	80062fa <USB_EPStartXfer+0xcfa>
 80062a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	461a      	mov	r2, r3
 80062c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062cc:	4413      	add	r3, r2
 80062ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	011a      	lsls	r2, r3, #4
 80062e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062e4:	4413      	add	r3, r2
 80062e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80062fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	891b      	ldrh	r3, [r3, #8]
 8006306:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800630a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6959      	ldr	r1, [r3, #20]
 8006316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800631a:	b29b      	uxth	r3, r3
 800631c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006320:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006324:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006328:	6800      	ldr	r0, [r0, #0]
 800632a:	f000 fe58 	bl	8006fde <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800632e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006354:	817b      	strh	r3, [r7, #10]
 8006356:	897b      	ldrh	r3, [r7, #10]
 8006358:	f083 0310 	eor.w	r3, r3, #16
 800635c:	817b      	strh	r3, [r7, #10]
 800635e:	897b      	ldrh	r3, [r7, #10]
 8006360:	f083 0320 	eor.w	r3, r3, #32
 8006364:	817b      	strh	r3, [r7, #10]
 8006366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	441a      	add	r2, r3
 8006380:	897b      	ldrh	r3, [r7, #10]
 8006382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800638a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006392:	b29b      	uxth	r3, r3
 8006394:	8013      	strh	r3, [r2, #0]
 8006396:	f000 bcde 	b.w	8006d56 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800639a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	7b1b      	ldrb	r3, [r3, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f040 80bb 	bne.w	8006522 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80063ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d917      	bls.n	80063f8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80063c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80063d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e8:	1ad2      	subs	r2, r2, r3
 80063ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	619a      	str	r2, [r3, #24]
 80063f6:	e00e      	b.n	8006416 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80063f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2200      	movs	r2, #0
 8006414:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006428:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800643a:	4413      	add	r3, r2
 800643c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	011a      	lsls	r2, r3, #4
 800644e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006452:	4413      	add	r3, r2
 8006454:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006458:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800645c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006468:	b29a      	uxth	r2, r3
 800646a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006474:	2b3e      	cmp	r3, #62	; 0x3e
 8006476:	d924      	bls.n	80064c2 <USB_EPStartXfer+0xec2>
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647c:	095b      	lsrs	r3, r3, #5
 800647e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006486:	f003 031f 	and.w	r3, r3, #31
 800648a:	2b00      	cmp	r3, #0
 800648c:	d104      	bne.n	8006498 <USB_EPStartXfer+0xe98>
 800648e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006492:	3b01      	subs	r3, #1
 8006494:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29a      	uxth	r2, r3
 80064a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	029b      	lsls	r3, r3, #10
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	4313      	orrs	r3, r2
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	f000 bc10 	b.w	8006ce2 <USB_EPStartXfer+0x16e2>
 80064c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10c      	bne.n	80064e4 <USB_EPStartXfer+0xee4>
 80064ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064da:	b29a      	uxth	r2, r3
 80064dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	e3fe      	b.n	8006ce2 <USB_EPStartXfer+0x16e2>
 80064e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e8:	085b      	lsrs	r3, r3, #1
 80064ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <USB_EPStartXfer+0xf04>
 80064fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064fe:	3301      	adds	r3, #1
 8006500:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	b29a      	uxth	r2, r3
 800650c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006510:	b29b      	uxth	r3, r3
 8006512:	029b      	lsls	r3, r3, #10
 8006514:	b29b      	uxth	r3, r3
 8006516:	4313      	orrs	r3, r2
 8006518:	b29a      	uxth	r2, r3
 800651a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e3df      	b.n	8006ce2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	78db      	ldrb	r3, [r3, #3]
 800652e:	2b02      	cmp	r3, #2
 8006530:	f040 8218 	bne.w	8006964 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f040 809d 	bne.w	8006680 <USB_EPStartXfer+0x1080>
 8006546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006558:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006562:	b29b      	uxth	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800656a:	4413      	add	r3, r2
 800656c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	011a      	lsls	r2, r3, #4
 800657e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006582:	4413      	add	r3, r2
 8006584:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006588:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800658c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006598:	b29a      	uxth	r2, r3
 800659a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b3e      	cmp	r3, #62	; 0x3e
 80065ae:	d92b      	bls.n	8006608 <USB_EPStartXfer+0x1008>
 80065b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	095b      	lsrs	r3, r3, #5
 80065be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <USB_EPStartXfer+0xfe0>
 80065d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065da:	3b01      	subs	r3, #1
 80065dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	029b      	lsls	r3, r3, #10
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	4313      	orrs	r3, r2
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fe:	b29a      	uxth	r2, r3
 8006600:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006604:	801a      	strh	r2, [r3, #0]
 8006606:	e070      	b.n	80066ea <USB_EPStartXfer+0x10ea>
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10c      	bne.n	8006632 <USB_EPStartXfer+0x1032>
 8006618:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006628:	b29a      	uxth	r2, r3
 800662a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e05b      	b.n	80066ea <USB_EPStartXfer+0x10ea>
 8006632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d004      	beq.n	8006662 <USB_EPStartXfer+0x1062>
 8006658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665c:	3301      	adds	r3, #1
 800665e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29a      	uxth	r2, r3
 800666a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666e:	b29b      	uxth	r3, r3
 8006670:	029b      	lsls	r3, r3, #10
 8006672:	b29b      	uxth	r3, r3
 8006674:	4313      	orrs	r3, r2
 8006676:	b29a      	uxth	r2, r3
 8006678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	e034      	b.n	80066ea <USB_EPStartXfer+0x10ea>
 8006680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d12c      	bne.n	80066ea <USB_EPStartXfer+0x10ea>
 8006690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800669e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066b4:	4413      	add	r3, r2
 80066b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	011a      	lsls	r2, r3, #4
 80066c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 809d 	bne.w	8006844 <USB_EPStartXfer+0x1244>
 800670a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800672e:	4413      	add	r3, r2
 8006730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	011a      	lsls	r2, r3, #4
 8006742:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006746:	4413      	add	r3, r2
 8006748:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800674c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800675c:	b29a      	uxth	r2, r3
 800675e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	2b3e      	cmp	r3, #62	; 0x3e
 8006772:	d92b      	bls.n	80067cc <USB_EPStartXfer+0x11cc>
 8006774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f003 031f 	and.w	r3, r3, #31
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <USB_EPStartXfer+0x11a4>
 800679a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679e:	3b01      	subs	r3, #1
 80067a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	029b      	lsls	r3, r3, #10
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	4313      	orrs	r3, r2
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	e069      	b.n	80068a0 <USB_EPStartXfer+0x12a0>
 80067cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10c      	bne.n	80067f6 <USB_EPStartXfer+0x11f6>
 80067dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067f2:	801a      	strh	r2, [r3, #0]
 80067f4:	e054      	b.n	80068a0 <USB_EPStartXfer+0x12a0>
 80067f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d004      	beq.n	8006826 <USB_EPStartXfer+0x1226>
 800681c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006820:	3301      	adds	r3, #1
 8006822:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006826:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29a      	uxth	r2, r3
 800682e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006832:	b29b      	uxth	r3, r3
 8006834:	029b      	lsls	r3, r3, #10
 8006836:	b29b      	uxth	r3, r3
 8006838:	4313      	orrs	r3, r2
 800683a:	b29a      	uxth	r2, r3
 800683c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006840:	801a      	strh	r2, [r3, #0]
 8006842:	e02d      	b.n	80068a0 <USB_EPStartXfer+0x12a0>
 8006844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d125      	bne.n	80068a0 <USB_EPStartXfer+0x12a0>
 8006854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006858:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006862:	b29b      	uxth	r3, r3
 8006864:	461a      	mov	r2, r3
 8006866:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800686a:	4413      	add	r3, r2
 800686c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	011a      	lsls	r2, r3, #4
 800687e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006882:	4413      	add	r3, r2
 8006884:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006888:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800688c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	b29a      	uxth	r2, r3
 800689a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800689e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80068a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8218 	beq.w	8006ce2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80068b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <USB_EPStartXfer+0x12ea>
 80068de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10d      	bne.n	8006906 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f040 81f5 	bne.w	8006ce2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068f8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	f040 81ee 	bne.w	8006ce2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	441a      	add	r2, r3
 800694a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800694e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800695a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800695e:	b29b      	uxth	r3, r3
 8006960:	8013      	strh	r3, [r2, #0]
 8006962:	e1be      	b.n	8006ce2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	78db      	ldrb	r3, [r3, #3]
 8006970:	2b01      	cmp	r3, #1
 8006972:	f040 81b4 	bne.w	8006cde <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699a      	ldr	r2, [r3, #24]
 8006982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	429a      	cmp	r2, r3
 8006990:	d917      	bls.n	80069c2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80069a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b2:	1ad2      	subs	r2, r2, r3
 80069b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	619a      	str	r2, [r3, #24]
 80069c0:	e00e      	b.n	80069e0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80069c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80069d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2200      	movs	r2, #0
 80069de:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80069e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f040 8085 	bne.w	8006afc <USB_EPStartXfer+0x14fc>
 80069f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a16:	4413      	add	r3, r2
 8006a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	011a      	lsls	r2, r3, #4
 8006a2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a2e:	4413      	add	r3, r2
 8006a30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a50:	2b3e      	cmp	r3, #62	; 0x3e
 8006a52:	d923      	bls.n	8006a9c <USB_EPStartXfer+0x149c>
 8006a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a62:	f003 031f 	and.w	r3, r3, #31
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <USB_EPStartXfer+0x1474>
 8006a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	029b      	lsls	r3, r3, #10
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	4313      	orrs	r3, r2
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a98:	801a      	strh	r2, [r3, #0]
 8006a9a:	e060      	b.n	8006b5e <USB_EPStartXfer+0x155e>
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10c      	bne.n	8006abe <USB_EPStartXfer+0x14be>
 8006aa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aba:	801a      	strh	r2, [r3, #0]
 8006abc:	e04f      	b.n	8006b5e <USB_EPStartXfer+0x155e>
 8006abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac2:	085b      	lsrs	r3, r3, #1
 8006ac4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d004      	beq.n	8006ade <USB_EPStartXfer+0x14de>
 8006ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad8:	3301      	adds	r3, #1
 8006ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	029b      	lsls	r3, r3, #10
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	4313      	orrs	r3, r2
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006af8:	801a      	strh	r2, [r3, #0]
 8006afa:	e030      	b.n	8006b5e <USB_EPStartXfer+0x155e>
 8006afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d128      	bne.n	8006b5e <USB_EPStartXfer+0x155e>
 8006b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b30:	4413      	add	r3, r2
 8006b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	011a      	lsls	r2, r3, #4
 8006b44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b48:	4413      	add	r3, r2
 8006b4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b5c:	801a      	strh	r2, [r3, #0]
 8006b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f040 8085 	bne.w	8006c88 <USB_EPStartXfer+0x1688>
 8006b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	011a      	lsls	r2, r3, #4
 8006bb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006bba:	4413      	add	r3, r2
 8006bbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bdc:	2b3e      	cmp	r3, #62	; 0x3e
 8006bde:	d923      	bls.n	8006c28 <USB_EPStartXfer+0x1628>
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d104      	bne.n	8006c00 <USB_EPStartXfer+0x1600>
 8006bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	029b      	lsls	r3, r3, #10
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	4313      	orrs	r3, r2
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	e05c      	b.n	8006ce2 <USB_EPStartXfer+0x16e2>
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10c      	bne.n	8006c4a <USB_EPStartXfer+0x164a>
 8006c30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	e04b      	b.n	8006ce2 <USB_EPStartXfer+0x16e2>
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d004      	beq.n	8006c6a <USB_EPStartXfer+0x166a>
 8006c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c64:	3301      	adds	r3, #1
 8006c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	029b      	lsls	r3, r3, #10
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c84:	801a      	strh	r2, [r3, #0]
 8006c86:	e02c      	b.n	8006ce2 <USB_EPStartXfer+0x16e2>
 8006c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	785b      	ldrb	r3, [r3, #1]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d124      	bne.n	8006ce2 <USB_EPStartXfer+0x16e2>
 8006c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cae:	4413      	add	r3, r2
 8006cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	011a      	lsls	r2, r3, #4
 8006cc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cda:	801a      	strh	r2, [r3, #0]
 8006cdc:	e001      	b.n	8006ce2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e03a      	b.n	8006d58 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d14:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b085      	sub	sp, #20
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	785b      	ldrb	r3, [r3, #1]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d020      	beq.n	8006db6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8a:	81bb      	strh	r3, [r7, #12]
 8006d8c:	89bb      	ldrh	r3, [r7, #12]
 8006d8e:	f083 0310 	eor.w	r3, r3, #16
 8006d92:	81bb      	strh	r3, [r7, #12]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	441a      	add	r2, r3
 8006d9e:	89bb      	ldrh	r3, [r7, #12]
 8006da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	8013      	strh	r3, [r2, #0]
 8006db4:	e01f      	b.n	8006df6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dcc:	81fb      	strh	r3, [r7, #14]
 8006dce:	89fb      	ldrh	r3, [r7, #14]
 8006dd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dd4:	81fb      	strh	r3, [r7, #14]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	441a      	add	r2, r3
 8006de0:	89fb      	ldrh	r3, [r7, #14]
 8006de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr

08006e02 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b087      	sub	sp, #28
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	7b1b      	ldrb	r3, [r3, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 809d 	bne.w	8006f50 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d04c      	beq.n	8006eb8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	823b      	strh	r3, [r7, #16]
 8006e2c:	8a3b      	ldrh	r3, [r7, #16]
 8006e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d01b      	beq.n	8006e6e <USB_EPClearStall+0x6c>
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4c:	81fb      	strh	r3, [r7, #14]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	441a      	add	r2, r3
 8006e58:	89fb      	ldrh	r3, [r7, #14]
 8006e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	78db      	ldrb	r3, [r3, #3]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d06c      	beq.n	8006f50 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e8c:	81bb      	strh	r3, [r7, #12]
 8006e8e:	89bb      	ldrh	r3, [r7, #12]
 8006e90:	f083 0320 	eor.w	r3, r3, #32
 8006e94:	81bb      	strh	r3, [r7, #12]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	441a      	add	r2, r3
 8006ea0:	89bb      	ldrh	r3, [r7, #12]
 8006ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	8013      	strh	r3, [r2, #0]
 8006eb6:	e04b      	b.n	8006f50 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	82fb      	strh	r3, [r7, #22]
 8006ec6:	8afb      	ldrh	r3, [r7, #22]
 8006ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01b      	beq.n	8006f08 <USB_EPClearStall+0x106>
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	82bb      	strh	r3, [r7, #20]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	441a      	add	r2, r3
 8006ef2:	8abb      	ldrh	r3, [r7, #20]
 8006ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1e:	827b      	strh	r3, [r7, #18]
 8006f20:	8a7b      	ldrh	r3, [r7, #18]
 8006f22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f26:	827b      	strh	r3, [r7, #18]
 8006f28:	8a7b      	ldrh	r3, [r7, #18]
 8006f2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f2e:	827b      	strh	r3, [r7, #18]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	441a      	add	r2, r3
 8006f3a:	8a7b      	ldrh	r3, [r7, #18]
 8006f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d103      	bne.n	8006f76 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2280      	movs	r2, #128	; 0x80
 8006f72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr

08006f82 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr

08006f96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr

08006faa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr

08006fc8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr

08006fde <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b08b      	sub	sp, #44	; 0x2c
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	4611      	mov	r1, r2
 8006fea:	461a      	mov	r2, r3
 8006fec:	460b      	mov	r3, r1
 8006fee:	80fb      	strh	r3, [r7, #6]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ff4:	88bb      	ldrh	r3, [r7, #4]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	085b      	lsrs	r3, r3, #1
 8006ffa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007004:	88fb      	ldrh	r3, [r7, #6]
 8007006:	005a      	lsls	r2, r3, #1
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007010:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
 8007016:	e01e      	b.n	8007056 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	3301      	adds	r3, #1
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	021b      	lsls	r3, r3, #8
 8007026:	b21a      	sxth	r2, r3
 8007028:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800702c:	4313      	orrs	r3, r2
 800702e:	b21b      	sxth	r3, r3
 8007030:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	8a7a      	ldrh	r2, [r7, #18]
 8007036:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	3302      	adds	r3, #2
 800703c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	3302      	adds	r3, #2
 8007042:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	3301      	adds	r3, #1
 8007048:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	3301      	adds	r3, #1
 800704e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	3b01      	subs	r3, #1
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1dd      	bne.n	8007018 <USB_WritePMA+0x3a>
  }
}
 800705c:	bf00      	nop
 800705e:	bf00      	nop
 8007060:	372c      	adds	r7, #44	; 0x2c
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr

08007068 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007068:	b480      	push	{r7}
 800706a:	b08b      	sub	sp, #44	; 0x2c
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	4611      	mov	r1, r2
 8007074:	461a      	mov	r2, r3
 8007076:	460b      	mov	r3, r1
 8007078:	80fb      	strh	r3, [r7, #6]
 800707a:	4613      	mov	r3, r2
 800707c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800707e:	88bb      	ldrh	r3, [r7, #4]
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	b29b      	uxth	r3, r3
 8007084:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	005a      	lsls	r2, r3, #1
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800709a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
 80070a0:	e01b      	b.n	80070da <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	3302      	adds	r3, #2
 80070ae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	3301      	adds	r3, #1
 80070bc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	0a1b      	lsrs	r3, r3, #8
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	3301      	adds	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	3302      	adds	r3, #2
 80070d2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	3b01      	subs	r3, #1
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e0      	bne.n	80070a2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80070e0:	88bb      	ldrh	r3, [r7, #4]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d007      	beq.n	80070fc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	701a      	strb	r2, [r3, #0]
  }
}
 80070fc:	bf00      	nop
 80070fe:	372c      	adds	r7, #44	; 0x2c
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr
	...

08007108 <__NVIC_SystemReset>:
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800710c:	f3bf 8f4f 	dsb	sy
}
 8007110:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007112:	4b06      	ldr	r3, [pc, #24]	; (800712c <__NVIC_SystemReset+0x24>)
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800711a:	4904      	ldr	r1, [pc, #16]	; (800712c <__NVIC_SystemReset+0x24>)
 800711c:	4b04      	ldr	r3, [pc, #16]	; (8007130 <__NVIC_SystemReset+0x28>)
 800711e:	4313      	orrs	r3, r2
 8007120:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007122:	f3bf 8f4f 	dsb	sy
}
 8007126:	bf00      	nop
    __NOP();
 8007128:	bf00      	nop
 800712a:	e7fd      	b.n	8007128 <__NVIC_SystemReset+0x20>
 800712c:	e000ed00 	.word	0xe000ed00
 8007130:	05fa0004 	.word	0x05fa0004

08007134 <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8007140:	f240 401c 	movw	r0, #1052	; 0x41c
 8007144:	f002 fab0 	bl	80096a8 <USBD_static_malloc>
 8007148:	4602      	mov	r2, r0
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 800715a:	2302      	movs	r3, #2
 800715c:	e03f      	b.n	80071de <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007164:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007174:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	4798      	blx	r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 80071d8:	2302      	movs	r3, #2
 80071da:	e000      	b.n	80071de <USBD_DFU_Init+0xaa>
    }
  }
  return USBD_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f8:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2202      	movs	r2, #2
 800720e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2202      	movs	r2, #2
 800721e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00e      	beq.n	800724a <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723c:	4618      	mov	r0, r3
 800723e:	f002 fa3f 	bl	80096c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007274:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800727e:	2b00      	cmp	r3, #0
 8007280:	d03f      	beq.n	8007302 <USBD_DFU_Setup+0xae>
 8007282:	2b20      	cmp	r3, #32
 8007284:	f040 80c2 	bne.w	800740c <USBD_DFU_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	785b      	ldrb	r3, [r3, #1]
 800728c:	2b06      	cmp	r3, #6
 800728e:	d830      	bhi.n	80072f2 <USBD_DFU_Setup+0x9e>
 8007290:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <USBD_DFU_Setup+0x44>)
 8007292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007296:	bf00      	nop
 8007298:	080072e9 	.word	0x080072e9
 800729c:	080072b5 	.word	0x080072b5
 80072a0:	080072bf 	.word	0x080072bf
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072d1 	.word	0x080072d1
 80072ac:	080072d9 	.word	0x080072d9
 80072b0:	080072e1 	.word	0x080072e1
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa8e 	bl	80077d8 <DFU_Download>
          break;
 80072bc:	e020      	b.n	8007300 <USBD_DFU_Setup+0xac>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 faf3 	bl	80078ac <DFU_Upload>
          break;
 80072c6:	e01b      	b.n	8007300 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fbc7 	bl	8007a5c <DFU_GetStatus>
          break;
 80072ce:	e017      	b.n	8007300 <USBD_DFU_Setup+0xac>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fc75 	bl	8007bc0 <DFU_ClearStatus>
          break;
 80072d6:	e013      	b.n	8007300 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fcc0 	bl	8007c5e <DFU_GetState>
          break;
 80072de:	e00f      	b.n	8007300 <USBD_DFU_Setup+0xac>

        case DFU_ABORT:
          DFU_Abort(pdev);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fcd0 	bl	8007c86 <DFU_Abort>
          break;
 80072e6:	e00b      	b.n	8007300 <USBD_DFU_Setup+0xac>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fa14 	bl	8007718 <DFU_Detach>
          break;
 80072f0:	e006      	b.n	8007300 <USBD_DFU_Setup+0xac>

        default:
          USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fd34 	bl	8008d62 <USBD_CtlError>
          ret = USBD_FAIL;
 80072fa:	2302      	movs	r3, #2
 80072fc:	747b      	strb	r3, [r7, #17]
          break;
 80072fe:	bf00      	nop
      }
      break;
 8007300:	e08b      	b.n	800741a <USBD_DFU_Setup+0x1c6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	2b0b      	cmp	r3, #11
 8007308:	d878      	bhi.n	80073fc <USBD_DFU_Setup+0x1a8>
 800730a:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <USBD_DFU_Setup+0xbc>)
 800730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007310:	08007341 	.word	0x08007341
 8007314:	080073fd 	.word	0x080073fd
 8007318:	080073fd 	.word	0x080073fd
 800731c:	080073fd 	.word	0x080073fd
 8007320:	080073fd 	.word	0x080073fd
 8007324:	080073fd 	.word	0x080073fd
 8007328:	08007369 	.word	0x08007369
 800732c:	080073fd 	.word	0x080073fd
 8007330:	080073fd 	.word	0x080073fd
 8007334:	080073fd 	.word	0x080073fd
 8007338:	08007393 	.word	0x08007393
 800733c:	080073bd 	.word	0x080073bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007346:	2b03      	cmp	r3, #3
 8007348:	d107      	bne.n	800735a <USBD_DFU_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800734a:	f107 030a 	add.w	r3, r7, #10
 800734e:	2202      	movs	r2, #2
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 fd6f 	bl	8008e36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007358:	e057      	b.n	800740a <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 fd00 	bl	8008d62 <USBD_CtlError>
            ret = USBD_FAIL;
 8007362:	2302      	movs	r3, #2
 8007364:	747b      	strb	r3, [r7, #17]
          break;
 8007366:	e050      	b.n	800740a <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	885b      	ldrh	r3, [r3, #2]
 800736c:	0a1b      	lsrs	r3, r3, #8
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b21      	cmp	r3, #33	; 0x21
 8007372:	d107      	bne.n	8007384 <USBD_DFU_Setup+0x130>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8007374:	4b2b      	ldr	r3, [pc, #172]	; (8007424 <USBD_DFU_Setup+0x1d0>)
 8007376:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	88db      	ldrh	r3, [r3, #6]
 800737c:	2b09      	cmp	r3, #9
 800737e:	bf28      	it	cs
 8007380:	2309      	movcs	r3, #9
 8007382:	827b      	strh	r3, [r7, #18]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8007384:	8a7b      	ldrh	r3, [r7, #18]
 8007386:	461a      	mov	r2, r3
 8007388:	6979      	ldr	r1, [r7, #20]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fd53 	bl	8008e36 <USBD_CtlSendData>
          break;
 8007390:	e03b      	b.n	800740a <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007398:	2b03      	cmp	r3, #3
 800739a:	d108      	bne.n	80073ae <USBD_DFU_Setup+0x15a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073a2:	2201      	movs	r2, #1
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 fd45 	bl	8008e36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073ac:	e02d      	b.n	800740a <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 fcd6 	bl	8008d62 <USBD_CtlError>
            ret = USBD_FAIL;
 80073b6:	2302      	movs	r3, #2
 80073b8:	747b      	strb	r3, [r7, #17]
          break;
 80073ba:	e026      	b.n	800740a <USBD_DFU_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	885b      	ldrh	r3, [r3, #2]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d113      	bne.n	80073ee <USBD_DFU_Setup+0x19a>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d107      	bne.n	80073e0 <USBD_DFU_Setup+0x18c>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	885b      	ldrh	r3, [r3, #2]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	461a      	mov	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073de:	e014      	b.n	800740a <USBD_DFU_Setup+0x1b6>
              USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fcbd 	bl	8008d62 <USBD_CtlError>
              ret = USBD_FAIL;
 80073e8:	2302      	movs	r3, #2
 80073ea:	747b      	strb	r3, [r7, #17]
          break;
 80073ec:	e00d      	b.n	800740a <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 fcb6 	bl	8008d62 <USBD_CtlError>
            ret = USBD_FAIL;
 80073f6:	2302      	movs	r3, #2
 80073f8:	747b      	strb	r3, [r7, #17]
          break;
 80073fa:	e006      	b.n	800740a <USBD_DFU_Setup+0x1b6>

        default:
          USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 fcaf 	bl	8008d62 <USBD_CtlError>
          ret = USBD_FAIL;
 8007404:	2302      	movs	r3, #2
 8007406:	747b      	strb	r3, [r7, #17]
          break;
 8007408:	bf00      	nop
      }
      break;
 800740a:	e006      	b.n	800741a <USBD_DFU_Setup+0x1c6>

    default:
      USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 fca7 	bl	8008d62 <USBD_CtlError>
      ret = USBD_FAIL;
 8007414:	2302      	movs	r3, #2
 8007416:	747b      	strb	r3, [r7, #17]
      break;
 8007418:	bf00      	nop
  }

  return ret;
 800741a:	7c7b      	ldrb	r3, [r7, #17]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	2000005a 	.word	0x2000005a

08007428 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	221b      	movs	r2, #27
 8007434:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 8007436:	4b03      	ldr	r3, [pc, #12]	; (8007444 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000048 	.word	0x20000048

08007448 <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	bc80      	pop	{r7}
 800745e:	4770      	bx	lr

08007460 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	bc80      	pop	{r7}
 8007472:	4770      	bx	lr

08007474 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007482:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800748a:	2b04      	cmp	r3, #4
 800748c:	f040 80ca 	bne.w	8007624 <USBD_DFU_EP0_TxReady+0x1b0>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007496:	2b00      	cmp	r3, #0
 8007498:	f040 8086 	bne.w	80075a8 <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <USBD_DFU_EP0_TxReady+0x3c>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	f000 809a 	beq.w	80075e4 <USBD_DFU_EP0_TxReady+0x170>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b21      	cmp	r3, #33	; 0x21
 80074b6:	d129      	bne.n	800750c <USBD_DFU_EP0_TxReady+0x98>
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074be:	2b05      	cmp	r3, #5
 80074c0:	d124      	bne.n	800750c <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	461a      	mov	r2, r3
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	789b      	ldrb	r3, [r3, #2]
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	441a      	add	r2, r3
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	78db      	ldrb	r3, [r3, #3]
 80074ec:	041b      	lsls	r3, r3, #16
 80074ee:	441a      	add	r2, r3
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	791b      	ldrb	r3, [r3, #4]
 8007500:	061b      	lsls	r3, r3, #24
 8007502:	441a      	add	r2, r3
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800750a:	e06b      	b.n	80075e4 <USBD_DFU_EP0_TxReady+0x170>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b41      	cmp	r3, #65	; 0x41
 8007512:	d136      	bne.n	8007582 <USBD_DFU_EP0_TxReady+0x10e>
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800751a:	2b05      	cmp	r3, #5
 800751c:	d131      	bne.n	8007582 <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	785b      	ldrb	r3, [r3, #1]
 8007522:	461a      	mov	r2, r3
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	789b      	ldrb	r3, [r3, #2]
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	441a      	add	r2, r3
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	78db      	ldrb	r3, [r3, #3]
 8007548:	041b      	lsls	r3, r3, #16
 800754a:	441a      	add	r2, r3
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	791b      	ldrb	r3, [r3, #4]
 800755c:	061b      	lsls	r3, r3, #24
 800755e:	441a      	add	r2, r3
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8007574:	4610      	mov	r0, r2
 8007576:	4798      	blx	r3
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d032      	beq.n	80075e4 <USBD_DFU_EP0_TxReady+0x170>
        {
          return USBD_FAIL;
 800757e:	2302      	movs	r3, #2
 8007580:	e059      	b.n	8007636 <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2200      	movs	r2, #0
 8007586:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2200      	movs	r2, #0
 800758e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8007596:	2301      	movs	r3, #1
 8007598:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 800759a:	f107 0308 	add.w	r3, r7, #8
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 fbde 	bl	8008d62 <USBD_CtlError>
 80075a6:	e01d      	b.n	80075e4 <USBD_DFU_EP0_TxReady+0x170>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d918      	bls.n	80075e4 <USBD_DFU_EP0_TxReady+0x170>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80075b8:	3b02      	subs	r3, #2
 80075ba:	029a      	lsls	r2, r3, #10
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80075c2:	4413      	add	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	6978      	ldr	r0, [r7, #20]
 80075d0:	6939      	ldr	r1, [r7, #16]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80075d8:	4798      	blx	r3
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <USBD_DFU_EP0_TxReady+0x170>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 80075e0:	2302      	movs	r3, #2
 80075e2:	e028      	b.n	8007636 <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2203      	movs	r2, #3
 80075f8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	e008      	b.n	8007636 <USBD_DFU_EP0_TxReady+0x1c2>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800762a:	2b07      	cmp	r3, #7
 800762c:	d102      	bne.n	8007634 <USBD_DFU_EP0_TxReady+0x1c0>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fb76 	bl	8007d20 <DFU_Leave>
    }
  }

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr

08007652 <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr

0800766a <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	460b      	mov	r3, r1
 8007674:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	bc80      	pop	{r7}
 8007680:	4770      	bx	lr

08007682 <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr
	...

0800769c <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	220a      	movs	r2, #10
 80076a8:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 80076aa:	4b03      	ldr	r3, [pc, #12]	; (80076b8 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	20000064 	.word	0x20000064

080076bc <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	460b      	mov	r3, r1
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	2b06      	cmp	r3, #6
 80076ce:	d80a      	bhi.n	80076e6 <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	4905      	ldr	r1, [pc, #20]	; (80076f0 <USBD_DFU_GetUsrStringDesc+0x34>)
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 fb51 	bl	8008d84 <USBD_GetString>
    return USBD_StrDesc;
 80076e2:	4b03      	ldr	r3, [pc, #12]	; (80076f0 <USBD_DFU_GetUsrStringDesc+0x34>)
 80076e4:	e000      	b.n	80076e8 <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 80076e6:	2300      	movs	r3, #0
  }
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	2000041c 	.word	0x2000041c

080076f4 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData = fops;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  return 0U;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr

08007718 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007728:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007730:	2b02      	cmp	r3, #2
 8007732:	d013      	beq.n	800775c <DFU_Detach+0x44>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800773a:	2b03      	cmp	r3, #3
 800773c:	d00e      	beq.n	800775c <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007744:	2b05      	cmp	r3, #5
 8007746:	d009      	beq.n	800775c <DFU_Detach+0x44>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800774e:	2b06      	cmp	r3, #6
 8007750:	d004      	beq.n	800775c <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007758:	2b09      	cmp	r3, #9
 800775a:	d125      	bne.n	80077a8 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <DFU_Detach+0xbc>)
 80077aa:	7d5b      	ldrb	r3, [r3, #21]
 80077ac:	f003 0310 	and.w	r3, r3, #16
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d006      	beq.n	80077c2 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fb51 	bl	8007e5c <USBD_Stop>
    USBD_Start(pdev);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fb42 	bl	8007e44 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 80077c0:	e004      	b.n	80077cc <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	885b      	ldrh	r3, [r3, #2]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7f9 fa2e 	bl	8000c28 <HAL_Delay>
}
 80077cc:	bf00      	nop
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20000048 	.word	0x20000048

080077d8 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	88db      	ldrh	r3, [r3, #6]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d02e      	beq.n	8007850 <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d004      	beq.n	8007806 <DFU_Download+0x2e>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007802:	2b05      	cmp	r3, #5
 8007804:	d11f      	bne.n	8007846 <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	885b      	ldrh	r3, [r3, #2]
 800780a:	461a      	mov	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	88db      	ldrh	r3, [r3, #6]
 8007816:	461a      	mov	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2203      	movs	r2, #3
 8007822:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8007832:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 800783a:	b29b      	uxth	r3, r3
 800783c:	461a      	mov	r2, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fb27 	bl	8008e92 <USBD_CtlPrepareRx>
 8007844:	e02e      	b.n	80078a4 <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fa8a 	bl	8008d62 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 800784e:	e029      	b.n	80078a4 <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007856:	2b05      	cmp	r3, #5
 8007858:	d004      	beq.n	8007864 <DFU_Download+0x8c>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007860:	2b02      	cmp	r3, #2
 8007862:	d11a      	bne.n	800789a <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2206      	movs	r2, #6
 8007870:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8007898:	e004      	b.n	80078a4 <DFU_Download+0xcc>
      USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 fa60 	bl	8008d62 <USBD_CtlError>
}
 80078a2:	e7ff      	b.n	80078a4 <DFU_Download+0xcc>
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078bc:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	88db      	ldrh	r3, [r3, #6]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 80ab 	beq.w	8007a26 <DFU_Upload+0x17a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d005      	beq.n	80078e6 <DFU_Upload+0x3a>
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80078e0:	2b09      	cmp	r3, #9
 80078e2:	f040 8093 	bne.w	8007a0c <DFU_Upload+0x160>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	885b      	ldrh	r3, [r3, #2]
 80078ea:	461a      	mov	r2, r3
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	88db      	ldrh	r3, [r3, #6]
 80078f6:	461a      	mov	r2, r3
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007904:	2b00      	cmp	r3, #0
 8007906:	d12c      	bne.n	8007962 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800790e:	2b03      	cmp	r3, #3
 8007910:	d901      	bls.n	8007916 <DFU_Upload+0x6a>
 8007912:	2202      	movs	r2, #2
 8007914:	e000      	b.n	8007918 <DFU_Upload+0x6c>
 8007916:	2209      	movs	r2, #9
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2221      	movs	r2, #33	; 0x21
 800794c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2241      	movs	r2, #65	; 0x41
 8007952:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2203      	movs	r2, #3
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 fa6b 	bl	8008e36 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007960:	e078      	b.n	8007a54 <DFU_Upload+0x1a8>
      }
      else if (hdfu->wblock_num > 1U)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007968:	2b01      	cmp	r3, #1
 800796a:	d934      	bls.n	80079d6 <DFU_Upload+0x12a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2209      	movs	r2, #9
 8007970:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800799e:	3b02      	subs	r3, #2
 80079a0:	029a      	lsls	r2, r3, #10
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80079a8:	4413      	add	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	6979      	ldr	r1, [r7, #20]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80079be:	4798      	blx	r3
 80079c0:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	6939      	ldr	r1, [r7, #16]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 fa31 	bl	8008e36 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80079d4:	e03e      	b.n	8007a54 <DFU_Upload+0x1a8>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	220f      	movs	r2, #15
 80079da:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f9ac 	bl	8008d62 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8007a0a:	e023      	b.n	8007a54 <DFU_Upload+0x1a8>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 f99f 	bl	8008d62 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 8007a24:	e016      	b.n	8007a54 <DFU_Upload+0x1a8>
    hdfu->dev_state = DFU_STATE_IDLE;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8007a52:	e7ff      	b.n	8007a54 <DFU_Upload+0x1a8>
 8007a54:	bf00      	nop
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6a:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d002      	beq.n	8007a7c <DFU_GetStatus+0x20>
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d055      	beq.n	8007b26 <DFU_GetStatus+0xca>
        }
      }
      break;

    default :
      break;
 8007a7a:	e092      	b.n	8007ba2 <DFU_GetStatus+0x146>
      if (hdfu->wlength != 0U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d038      	beq.n	8007af8 <DFU_GetStatus+0x9c>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2204      	movs	r2, #4
 8007a8a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d110      	bne.n	8007ade <DFU_GetStatus+0x82>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b41      	cmp	r3, #65	; 0x41
 8007ac2:	d10c      	bne.n	8007ade <DFU_GetStatus+0x82>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4798      	blx	r3
      break;
 8007adc:	e061      	b.n	8007ba2 <DFU_GetStatus+0x146>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8007af2:	2101      	movs	r1, #1
 8007af4:	4798      	blx	r3
      break;
 8007af6:	e054      	b.n	8007ba2 <DFU_GetStatus+0x146>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2205      	movs	r2, #5
 8007afc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8007b24:	e03d      	b.n	8007ba2 <DFU_GetStatus+0x146>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d116      	bne.n	8007b5e <DFU_GetStatus+0x102>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2207      	movs	r2, #7
 8007b34:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8007b5c:	e020      	b.n	8007ba0 <DFU_GetStatus+0x144>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d11b      	bne.n	8007ba0 <DFU_GetStatus+0x144>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8007b68:	4b14      	ldr	r3, [pc, #80]	; (8007bbc <DFU_GetStatus+0x160>)
 8007b6a:	7d1b      	ldrb	r3, [r3, #20]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d015      	beq.n	8007ba0 <DFU_GetStatus+0x144>
          hdfu->dev_state = DFU_STATE_IDLE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8007ba0:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8007ba8:	2206      	movs	r2, #6
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 f942 	bl	8008e36 <USBD_CtlSendData>
}
 8007bb2:	bf00      	nop
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20000048 	.word	0x20000048

08007bc0 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bce:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007bd6:	2b0a      	cmp	r3, #10
 8007bd8:	d11e      	bne.n	8007c18 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 8007c16:	e01d      	b.n	8007c54 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	220a      	movs	r2, #10
 8007c1c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	220e      	movs	r2, #14
 8007c24:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr

08007c5e <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007c74:	2201      	movs	r2, #1
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 f8dc 	bl	8008e36 <USBD_CtlSendData>
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c94:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d013      	beq.n	8007cc8 <DFU_Abort+0x42>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d00e      	beq.n	8007cc8 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007cb0:	2b05      	cmp	r3, #5
 8007cb2:	d009      	beq.n	8007cc8 <DFU_Abort+0x42>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007cba:	2b06      	cmp	r3, #6
 8007cbc:	d004      	beq.n	8007cc8 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007cc4:	2b09      	cmp	r3, #9
 8007cc6:	d125      	bne.n	8007d14 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr
	...

08007d20 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2e:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8007d38:	4b1f      	ldr	r3, [pc, #124]	; (8007db8 <DFU_Leave+0x98>)
 8007d3a:	7d1b      	ldrb	r3, [r3, #20]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d016      	beq.n	8007d72 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2206      	movs	r2, #6
 8007d48:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8007d70:	e01f      	b.n	8007db2 <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2208      	movs	r2, #8
 8007d76:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f85c 	bl	8007e5c <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8007dae:	f7ff f9ab 	bl	8007108 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20000048 	.word	0x20000048

08007dbc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e01a      	b.n	8007e0a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	79fa      	ldrb	r2, [r7, #7]
 8007e00:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f001 fae4 	bl	80093d0 <USBD_LL_Init>

  return USBD_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b085      	sub	sp, #20
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d006      	beq.n	8007e34 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
 8007e32:	e001      	b.n	8007e38 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007e34:	2302      	movs	r3, #2
 8007e36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 faff 	bl	8009450 <USBD_LL_Start>

  return USBD_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6852      	ldr	r2, [r2, #4]
 8007e70:	b2d2      	uxtb	r2, r2
 8007e72:	4611      	mov	r1, r2
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fb04 	bl	8009486 <USBD_LL_Stop>

  return USBD_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bc80      	pop	{r7}
 8007e9a:	4770      	bx	lr

08007e9c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00c      	beq.n	8007ed0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	78fa      	ldrb	r2, [r7, #3]
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	4798      	blx	r3
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	78fa      	ldrb	r2, [r7, #3]
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3

  return USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fee9 	bl	8008cea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f26:	461a      	mov	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f34:	f003 031f 	and.w	r3, r3, #31
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d016      	beq.n	8007f6a <USBD_LL_SetupStage+0x6a>
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d81c      	bhi.n	8007f7a <USBD_LL_SetupStage+0x7a>
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <USBD_LL_SetupStage+0x4a>
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d008      	beq.n	8007f5a <USBD_LL_SetupStage+0x5a>
 8007f48:	e017      	b.n	8007f7a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f9ca 	bl	80082ec <USBD_StdDevReq>
      break;
 8007f58:	e01a      	b.n	8007f90 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa2c 	bl	80083c0 <USBD_StdItfReq>
      break;
 8007f68:	e012      	b.n	8007f90 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fa6c 	bl	8008450 <USBD_StdEPReq>
      break;
 8007f78:	e00a      	b.n	8007f90 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 fabd 	bl	8009508 <USBD_LL_StallEP>
      break;
 8007f8e:	bf00      	nop
  }

  return USBD_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b086      	sub	sp, #24
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	607a      	str	r2, [r7, #4]
 8007fa6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007fa8:	7afb      	ldrb	r3, [r7, #11]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d14b      	bne.n	8008046 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007fb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d134      	bne.n	800802a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	68da      	ldr	r2, [r3, #12]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d919      	bls.n	8008000 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	1ad2      	subs	r2, r2, r3
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d203      	bcs.n	8007fee <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	e002      	b.n	8007ff4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 ff68 	bl	8008ece <USBD_CtlContinueRx>
 8007ffe:	e038      	b.n	8008072 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00a      	beq.n	8008022 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008012:	2b03      	cmp	r3, #3
 8008014:	d105      	bne.n	8008022 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 ff65 	bl	8008ef2 <USBD_CtlSendStatus>
 8008028:	e023      	b.n	8008072 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008030:	2b05      	cmp	r3, #5
 8008032:	d11e      	bne.n	8008072 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800803c:	2100      	movs	r1, #0
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f001 fa62 	bl	8009508 <USBD_LL_StallEP>
 8008044:	e015      	b.n	8008072 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00d      	beq.n	800806e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008058:	2b03      	cmp	r3, #3
 800805a:	d108      	bne.n	800806e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	7afa      	ldrb	r2, [r7, #11]
 8008066:	4611      	mov	r1, r2
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	4798      	blx	r3
 800806c:	e001      	b.n	8008072 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800806e:	2302      	movs	r3, #2
 8008070:	e000      	b.n	8008074 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	460b      	mov	r3, r1
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800808a:	7afb      	ldrb	r3, [r7, #11]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d17f      	bne.n	8008190 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3314      	adds	r3, #20
 8008094:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800809c:	2b02      	cmp	r3, #2
 800809e:	d15c      	bne.n	800815a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d915      	bls.n	80080d8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	68da      	ldr	r2, [r3, #12]
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	1ad2      	subs	r2, r2, r3
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	461a      	mov	r2, r3
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 fed2 	bl	8008e6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080ca:	2300      	movs	r3, #0
 80080cc:	2200      	movs	r2, #0
 80080ce:	2100      	movs	r1, #0
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f001 fac5 	bl	8009660 <USBD_LL_PrepareReceive>
 80080d6:	e04e      	b.n	8008176 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	6912      	ldr	r2, [r2, #16]
 80080e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80080e4:	fb01 f202 	mul.w	r2, r1, r2
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d11c      	bne.n	8008128 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d316      	bcc.n	8008128 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008104:	429a      	cmp	r2, r3
 8008106:	d20f      	bcs.n	8008128 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008108:	2200      	movs	r2, #0
 800810a:	2100      	movs	r1, #0
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 feae 	bl	8008e6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800811a:	2300      	movs	r3, #0
 800811c:	2200      	movs	r2, #0
 800811e:	2100      	movs	r1, #0
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f001 fa9d 	bl	8009660 <USBD_LL_PrepareReceive>
 8008126:	e026      	b.n	8008176 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800813a:	2b03      	cmp	r3, #3
 800813c:	d105      	bne.n	800814a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800814a:	2180      	movs	r1, #128	; 0x80
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f001 f9db 	bl	8009508 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 fee0 	bl	8008f18 <USBD_CtlReceiveStatus>
 8008158:	e00d      	b.n	8008176 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008160:	2b04      	cmp	r3, #4
 8008162:	d004      	beq.n	800816e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800816a:	2b00      	cmp	r3, #0
 800816c:	d103      	bne.n	8008176 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800816e:	2180      	movs	r1, #128	; 0x80
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f001 f9c9 	bl	8009508 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800817c:	2b01      	cmp	r3, #1
 800817e:	d11d      	bne.n	80081bc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f7ff fe81 	bl	8007e88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800818e:	e015      	b.n	80081bc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00d      	beq.n	80081b8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d108      	bne.n	80081b8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	7afa      	ldrb	r2, [r7, #11]
 80081b0:	4611      	mov	r1, r2
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	4798      	blx	r3
 80081b6:	e001      	b.n	80081bc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081b8:	2302      	movs	r3, #2
 80081ba:	e000      	b.n	80081be <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081ce:	2340      	movs	r3, #64	; 0x40
 80081d0:	2200      	movs	r2, #0
 80081d2:	2100      	movs	r1, #0
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 f971 	bl	80094bc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2240      	movs	r2, #64	; 0x40
 80081e6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081ea:	2340      	movs	r3, #64	; 0x40
 80081ec:	2200      	movs	r2, #0
 80081ee:	2180      	movs	r1, #128	; 0x80
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 f963 	bl	80094bc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2240      	movs	r2, #64	; 0x40
 8008200:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008226:	2b00      	cmp	r3, #0
 8008228:	d009      	beq.n	800823e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6852      	ldr	r2, [r2, #4]
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	4611      	mov	r1, r2
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	4798      	blx	r3
  }

  return USBD_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	bc80      	pop	{r7}
 8008264:	4770      	bx	lr

08008266 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2204      	movs	r2, #4
 800827e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr

0800828e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829c:	2b04      	cmp	r3, #4
 800829e:	d105      	bne.n	80082ac <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bc80      	pop	{r7}
 80082b6:	4770      	bx	lr

080082b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d10b      	bne.n	80082e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d005      	beq.n	80082e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d005      	beq.n	8008312 <USBD_StdDevReq+0x26>
 8008306:	2b40      	cmp	r3, #64	; 0x40
 8008308:	d84f      	bhi.n	80083aa <USBD_StdDevReq+0xbe>
 800830a:	2b00      	cmp	r3, #0
 800830c:	d009      	beq.n	8008322 <USBD_StdDevReq+0x36>
 800830e:	2b20      	cmp	r3, #32
 8008310:	d14b      	bne.n	80083aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	4798      	blx	r3
      break;
 8008320:	e048      	b.n	80083b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	785b      	ldrb	r3, [r3, #1]
 8008326:	2b09      	cmp	r3, #9
 8008328:	d839      	bhi.n	800839e <USBD_StdDevReq+0xb2>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <USBD_StdDevReq+0x44>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	08008381 	.word	0x08008381
 8008334:	08008395 	.word	0x08008395
 8008338:	0800839f 	.word	0x0800839f
 800833c:	0800838b 	.word	0x0800838b
 8008340:	0800839f 	.word	0x0800839f
 8008344:	08008363 	.word	0x08008363
 8008348:	08008359 	.word	0x08008359
 800834c:	0800839f 	.word	0x0800839f
 8008350:	08008377 	.word	0x08008377
 8008354:	0800836d 	.word	0x0800836d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f9dc 	bl	8008718 <USBD_GetDescriptor>
          break;
 8008360:	e022      	b.n	80083a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fb51 	bl	8008a0c <USBD_SetAddress>
          break;
 800836a:	e01d      	b.n	80083a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fb90 	bl	8008a94 <USBD_SetConfig>
          break;
 8008374:	e018      	b.n	80083a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fc19 	bl	8008bb0 <USBD_GetConfig>
          break;
 800837e:	e013      	b.n	80083a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fc49 	bl	8008c1a <USBD_GetStatus>
          break;
 8008388:	e00e      	b.n	80083a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fc77 	bl	8008c80 <USBD_SetFeature>
          break;
 8008392:	e009      	b.n	80083a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fc86 	bl	8008ca8 <USBD_ClrFeature>
          break;
 800839c:	e004      	b.n	80083a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fcde 	bl	8008d62 <USBD_CtlError>
          break;
 80083a6:	bf00      	nop
      }
      break;
 80083a8:	e004      	b.n	80083b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fcd8 	bl	8008d62 <USBD_CtlError>
      break;
 80083b2:	bf00      	nop
  }

  return ret;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop

080083c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083d6:	2b40      	cmp	r3, #64	; 0x40
 80083d8:	d005      	beq.n	80083e6 <USBD_StdItfReq+0x26>
 80083da:	2b40      	cmp	r3, #64	; 0x40
 80083dc:	d82e      	bhi.n	800843c <USBD_StdItfReq+0x7c>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <USBD_StdItfReq+0x26>
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d12a      	bne.n	800843c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	3b01      	subs	r3, #1
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d81d      	bhi.n	800842e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	889b      	ldrh	r3, [r3, #4]
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d813      	bhi.n	8008424 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	4798      	blx	r3
 800840a:	4603      	mov	r3, r0
 800840c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	88db      	ldrh	r3, [r3, #6]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d110      	bne.n	8008438 <USBD_StdItfReq+0x78>
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10d      	bne.n	8008438 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fd68 	bl	8008ef2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008422:	e009      	b.n	8008438 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fc9b 	bl	8008d62 <USBD_CtlError>
          break;
 800842c:	e004      	b.n	8008438 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fc96 	bl	8008d62 <USBD_CtlError>
          break;
 8008436:	e000      	b.n	800843a <USBD_StdItfReq+0x7a>
          break;
 8008438:	bf00      	nop
      }
      break;
 800843a:	e004      	b.n	8008446 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fc8f 	bl	8008d62 <USBD_CtlError>
      break;
 8008444:	bf00      	nop
  }

  return USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	889b      	ldrh	r3, [r3, #4]
 8008462:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800846c:	2b40      	cmp	r3, #64	; 0x40
 800846e:	d007      	beq.n	8008480 <USBD_StdEPReq+0x30>
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	f200 8146 	bhi.w	8008702 <USBD_StdEPReq+0x2b2>
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <USBD_StdEPReq+0x40>
 800847a:	2b20      	cmp	r3, #32
 800847c:	f040 8141 	bne.w	8008702 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
      break;
 800848e:	e13d      	b.n	800870c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008498:	2b20      	cmp	r3, #32
 800849a:	d10a      	bne.n	80084b2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	4798      	blx	r3
 80084aa:	4603      	mov	r3, r0
 80084ac:	73fb      	strb	r3, [r7, #15]

        return ret;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	e12d      	b.n	800870e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d007      	beq.n	80084ca <USBD_StdEPReq+0x7a>
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	f300 811b 	bgt.w	80086f6 <USBD_StdEPReq+0x2a6>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d072      	beq.n	80085aa <USBD_StdEPReq+0x15a>
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d03a      	beq.n	800853e <USBD_StdEPReq+0xee>
 80084c8:	e115      	b.n	80086f6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d002      	beq.n	80084da <USBD_StdEPReq+0x8a>
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d015      	beq.n	8008504 <USBD_StdEPReq+0xb4>
 80084d8:	e02b      	b.n	8008532 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00c      	beq.n	80084fa <USBD_StdEPReq+0xaa>
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	2b80      	cmp	r3, #128	; 0x80
 80084e4:	d009      	beq.n	80084fa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f001 f80c 	bl	8009508 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80084f0:	2180      	movs	r1, #128	; 0x80
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 f808 	bl	8009508 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084f8:	e020      	b.n	800853c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fc30 	bl	8008d62 <USBD_CtlError>
              break;
 8008502:	e01b      	b.n	800853c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	885b      	ldrh	r3, [r3, #2]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10e      	bne.n	800852a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <USBD_StdEPReq+0xda>
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	2b80      	cmp	r3, #128	; 0x80
 8008516:	d008      	beq.n	800852a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	88db      	ldrh	r3, [r3, #6]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d104      	bne.n	800852a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 ffef 	bl	8009508 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fce1 	bl	8008ef2 <USBD_CtlSendStatus>

              break;
 8008530:	e004      	b.n	800853c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fc14 	bl	8008d62 <USBD_CtlError>
              break;
 800853a:	bf00      	nop
          }
          break;
 800853c:	e0e0      	b.n	8008700 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008544:	2b02      	cmp	r3, #2
 8008546:	d002      	beq.n	800854e <USBD_StdEPReq+0xfe>
 8008548:	2b03      	cmp	r3, #3
 800854a:	d015      	beq.n	8008578 <USBD_StdEPReq+0x128>
 800854c:	e026      	b.n	800859c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800854e:	7bbb      	ldrb	r3, [r7, #14]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00c      	beq.n	800856e <USBD_StdEPReq+0x11e>
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	2b80      	cmp	r3, #128	; 0x80
 8008558:	d009      	beq.n	800856e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 ffd2 	bl	8009508 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008564:	2180      	movs	r1, #128	; 0x80
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 ffce 	bl	8009508 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800856c:	e01c      	b.n	80085a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fbf6 	bl	8008d62 <USBD_CtlError>
              break;
 8008576:	e017      	b.n	80085a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	885b      	ldrh	r3, [r3, #2]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d112      	bne.n	80085a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008586:	2b00      	cmp	r3, #0
 8008588:	d004      	beq.n	8008594 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 ffd9 	bl	8009546 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fcac 	bl	8008ef2 <USBD_CtlSendStatus>
              }
              break;
 800859a:	e004      	b.n	80085a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fbdf 	bl	8008d62 <USBD_CtlError>
              break;
 80085a4:	e000      	b.n	80085a8 <USBD_StdEPReq+0x158>
              break;
 80085a6:	bf00      	nop
          }
          break;
 80085a8:	e0aa      	b.n	8008700 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d002      	beq.n	80085ba <USBD_StdEPReq+0x16a>
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d032      	beq.n	800861e <USBD_StdEPReq+0x1ce>
 80085b8:	e097      	b.n	80086ea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d007      	beq.n	80085d0 <USBD_StdEPReq+0x180>
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b80      	cmp	r3, #128	; 0x80
 80085c4:	d004      	beq.n	80085d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fbca 	bl	8008d62 <USBD_CtlError>
                break;
 80085ce:	e091      	b.n	80086f4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	da0b      	bge.n	80085f0 <USBD_StdEPReq+0x1a0>
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085de:	4613      	mov	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	3310      	adds	r3, #16
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	4413      	add	r3, r2
 80085ec:	3304      	adds	r3, #4
 80085ee:	e00b      	b.n	8008608 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
 80085f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085f6:	4613      	mov	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	4413      	add	r3, r2
 8008606:	3304      	adds	r3, #4
 8008608:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2202      	movs	r2, #2
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fc0d 	bl	8008e36 <USBD_CtlSendData>
              break;
 800861c:	e06a      	b.n	80086f4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800861e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008622:	2b00      	cmp	r3, #0
 8008624:	da11      	bge.n	800864a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	f003 020f 	and.w	r2, r3, #15
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	440b      	add	r3, r1
 8008638:	3318      	adds	r3, #24
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d117      	bne.n	8008670 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fb8d 	bl	8008d62 <USBD_CtlError>
                  break;
 8008648:	e054      	b.n	80086f4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	f003 020f 	and.w	r2, r3, #15
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	440b      	add	r3, r1
 800865c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d104      	bne.n	8008670 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fb7a 	bl	8008d62 <USBD_CtlError>
                  break;
 800866e:	e041      	b.n	80086f4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008674:	2b00      	cmp	r3, #0
 8008676:	da0b      	bge.n	8008690 <USBD_StdEPReq+0x240>
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	3310      	adds	r3, #16
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	4413      	add	r3, r2
 800868c:	3304      	adds	r3, #4
 800868e:	e00b      	b.n	80086a8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008690:	7bbb      	ldrb	r3, [r7, #14]
 8008692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	4413      	add	r3, r2
 80086a6:	3304      	adds	r3, #4
 80086a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <USBD_StdEPReq+0x266>
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	2b80      	cmp	r3, #128	; 0x80
 80086b4:	d103      	bne.n	80086be <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	e00e      	b.n	80086dc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80086be:	7bbb      	ldrb	r3, [r7, #14]
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 ff5e 	bl	8009584 <USBD_LL_IsStallEP>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2201      	movs	r2, #1
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	e002      	b.n	80086dc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2202      	movs	r2, #2
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fba7 	bl	8008e36 <USBD_CtlSendData>
              break;
 80086e8:	e004      	b.n	80086f4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fb38 	bl	8008d62 <USBD_CtlError>
              break;
 80086f2:	bf00      	nop
          }
          break;
 80086f4:	e004      	b.n	8008700 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fb32 	bl	8008d62 <USBD_CtlError>
          break;
 80086fe:	bf00      	nop
      }
      break;
 8008700:	e004      	b.n	800870c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fb2c 	bl	8008d62 <USBD_CtlError>
      break;
 800870a:	bf00      	nop
  }

  return ret;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008726:	2300      	movs	r3, #0
 8008728:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	885b      	ldrh	r3, [r3, #2]
 8008732:	0a1b      	lsrs	r3, r3, #8
 8008734:	b29b      	uxth	r3, r3
 8008736:	3b01      	subs	r3, #1
 8008738:	2b06      	cmp	r3, #6
 800873a:	f200 813b 	bhi.w	80089b4 <USBD_GetDescriptor+0x29c>
 800873e:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <USBD_GetDescriptor+0x2c>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	08008761 	.word	0x08008761
 8008748:	08008779 	.word	0x08008779
 800874c:	080087b9 	.word	0x080087b9
 8008750:	080089b5 	.word	0x080089b5
 8008754:	080089b5 	.word	0x080089b5
 8008758:	08008955 	.word	0x08008955
 800875c:	08008981 	.word	0x08008981
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	7c12      	ldrb	r2, [r2, #16]
 800876c:	f107 0108 	add.w	r1, r7, #8
 8008770:	4610      	mov	r0, r2
 8008772:	4798      	blx	r3
 8008774:	60f8      	str	r0, [r7, #12]
      break;
 8008776:	e125      	b.n	80089c4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	7c1b      	ldrb	r3, [r3, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10d      	bne.n	800879c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	f107 0208 	add.w	r2, r7, #8
 800878c:	4610      	mov	r0, r2
 800878e:	4798      	blx	r3
 8008790:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	2202      	movs	r2, #2
 8008798:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800879a:	e113      	b.n	80089c4 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	f107 0208 	add.w	r2, r7, #8
 80087a8:	4610      	mov	r0, r2
 80087aa:	4798      	blx	r3
 80087ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3301      	adds	r3, #1
 80087b2:	2202      	movs	r2, #2
 80087b4:	701a      	strb	r2, [r3, #0]
      break;
 80087b6:	e105      	b.n	80089c4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	885b      	ldrh	r3, [r3, #2]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b05      	cmp	r3, #5
 80087c0:	f200 80ac 	bhi.w	800891c <USBD_GetDescriptor+0x204>
 80087c4:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <USBD_GetDescriptor+0xb4>)
 80087c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ca:	bf00      	nop
 80087cc:	080087e5 	.word	0x080087e5
 80087d0:	08008819 	.word	0x08008819
 80087d4:	0800884d 	.word	0x0800884d
 80087d8:	08008881 	.word	0x08008881
 80087dc:	080088b5 	.word	0x080088b5
 80087e0:	080088e9 	.word	0x080088e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00b      	beq.n	8008808 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	7c12      	ldrb	r2, [r2, #16]
 80087fc:	f107 0108 	add.w	r1, r7, #8
 8008800:	4610      	mov	r0, r2
 8008802:	4798      	blx	r3
 8008804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008806:	e0a4      	b.n	8008952 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 faa9 	bl	8008d62 <USBD_CtlError>
            err++;
 8008810:	7afb      	ldrb	r3, [r7, #11]
 8008812:	3301      	adds	r3, #1
 8008814:	72fb      	strb	r3, [r7, #11]
          break;
 8008816:	e09c      	b.n	8008952 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	7c12      	ldrb	r2, [r2, #16]
 8008830:	f107 0108 	add.w	r1, r7, #8
 8008834:	4610      	mov	r0, r2
 8008836:	4798      	blx	r3
 8008838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800883a:	e08a      	b.n	8008952 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fa8f 	bl	8008d62 <USBD_CtlError>
            err++;
 8008844:	7afb      	ldrb	r3, [r7, #11]
 8008846:	3301      	adds	r3, #1
 8008848:	72fb      	strb	r3, [r7, #11]
          break;
 800884a:	e082      	b.n	8008952 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00b      	beq.n	8008870 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	7c12      	ldrb	r2, [r2, #16]
 8008864:	f107 0108 	add.w	r1, r7, #8
 8008868:	4610      	mov	r0, r2
 800886a:	4798      	blx	r3
 800886c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800886e:	e070      	b.n	8008952 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa75 	bl	8008d62 <USBD_CtlError>
            err++;
 8008878:	7afb      	ldrb	r3, [r7, #11]
 800887a:	3301      	adds	r3, #1
 800887c:	72fb      	strb	r3, [r7, #11]
          break;
 800887e:	e068      	b.n	8008952 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00b      	beq.n	80088a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	7c12      	ldrb	r2, [r2, #16]
 8008898:	f107 0108 	add.w	r1, r7, #8
 800889c:	4610      	mov	r0, r2
 800889e:	4798      	blx	r3
 80088a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088a2:	e056      	b.n	8008952 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fa5b 	bl	8008d62 <USBD_CtlError>
            err++;
 80088ac:	7afb      	ldrb	r3, [r7, #11]
 80088ae:	3301      	adds	r3, #1
 80088b0:	72fb      	strb	r3, [r7, #11]
          break;
 80088b2:	e04e      	b.n	8008952 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	7c12      	ldrb	r2, [r2, #16]
 80088cc:	f107 0108 	add.w	r1, r7, #8
 80088d0:	4610      	mov	r0, r2
 80088d2:	4798      	blx	r3
 80088d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088d6:	e03c      	b.n	8008952 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fa41 	bl	8008d62 <USBD_CtlError>
            err++;
 80088e0:	7afb      	ldrb	r3, [r7, #11]
 80088e2:	3301      	adds	r3, #1
 80088e4:	72fb      	strb	r3, [r7, #11]
          break;
 80088e6:	e034      	b.n	8008952 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	7c12      	ldrb	r2, [r2, #16]
 8008900:	f107 0108 	add.w	r1, r7, #8
 8008904:	4610      	mov	r0, r2
 8008906:	4798      	blx	r3
 8008908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800890a:	e022      	b.n	8008952 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fa27 	bl	8008d62 <USBD_CtlError>
            err++;
 8008914:	7afb      	ldrb	r3, [r7, #11]
 8008916:	3301      	adds	r3, #1
 8008918:	72fb      	strb	r3, [r7, #11]
          break;
 800891a:	e01a      	b.n	8008952 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00c      	beq.n	8008942 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	8852      	ldrh	r2, [r2, #2]
 8008934:	b2d1      	uxtb	r1, r2
 8008936:	f107 0208 	add.w	r2, r7, #8
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
 800893e:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008940:	e006      	b.n	8008950 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fa0c 	bl	8008d62 <USBD_CtlError>
            err++;
 800894a:	7afb      	ldrb	r3, [r7, #11]
 800894c:	3301      	adds	r3, #1
 800894e:	72fb      	strb	r3, [r7, #11]
          break;
 8008950:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 8008952:	e037      	b.n	80089c4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	7c1b      	ldrb	r3, [r3, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d109      	bne.n	8008970 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008964:	f107 0208 	add.w	r2, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800896e:	e029      	b.n	80089c4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f9f5 	bl	8008d62 <USBD_CtlError>
        err++;
 8008978:	7afb      	ldrb	r3, [r7, #11]
 800897a:	3301      	adds	r3, #1
 800897c:	72fb      	strb	r3, [r7, #11]
      break;
 800897e:	e021      	b.n	80089c4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	7c1b      	ldrb	r3, [r3, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10d      	bne.n	80089a4 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	f107 0208 	add.w	r2, r7, #8
 8008994:	4610      	mov	r0, r2
 8008996:	4798      	blx	r3
 8008998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3301      	adds	r3, #1
 800899e:	2207      	movs	r2, #7
 80089a0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089a2:	e00f      	b.n	80089c4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f9db 	bl	8008d62 <USBD_CtlError>
        err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
      break;
 80089b2:	e007      	b.n	80089c4 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f9d3 	bl	8008d62 <USBD_CtlError>
      err++;
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	3301      	adds	r3, #1
 80089c0:	72fb      	strb	r3, [r7, #11]
      break;
 80089c2:	bf00      	nop
  }

  if (err != 0U)
 80089c4:	7afb      	ldrb	r3, [r7, #11]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d11c      	bne.n	8008a04 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80089ca:	893b      	ldrh	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d011      	beq.n	80089f4 <USBD_GetDescriptor+0x2dc>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	88db      	ldrh	r3, [r3, #6]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00d      	beq.n	80089f4 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	88da      	ldrh	r2, [r3, #6]
 80089dc:	893b      	ldrh	r3, [r7, #8]
 80089de:	4293      	cmp	r3, r2
 80089e0:	bf28      	it	cs
 80089e2:	4613      	movcs	r3, r2
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80089e8:	893b      	ldrh	r3, [r7, #8]
 80089ea:	461a      	mov	r2, r3
 80089ec:	68f9      	ldr	r1, [r7, #12]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fa21 	bl	8008e36 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	88db      	ldrh	r3, [r3, #6]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d104      	bne.n	8008a06 <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fa78 	bl	8008ef2 <USBD_CtlSendStatus>
 8008a02:	e000      	b.n	8008a06 <USBD_GetDescriptor+0x2ee>
    return;
 8008a04:	bf00      	nop
    }
  }
}
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	889b      	ldrh	r3, [r3, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d130      	bne.n	8008a80 <USBD_SetAddress+0x74>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	88db      	ldrh	r3, [r3, #6]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d12c      	bne.n	8008a80 <USBD_SetAddress+0x74>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	885b      	ldrh	r3, [r3, #2]
 8008a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a2c:	d828      	bhi.n	8008a80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d104      	bne.n	8008a4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f98b 	bl	8008d62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a4c:	e01d      	b.n	8008a8a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	7bfa      	ldrb	r2, [r7, #15]
 8008a52:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fdbe 	bl	80095dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fa46 	bl	8008ef2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d004      	beq.n	8008a76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a74:	e009      	b.n	8008a8a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7e:	e004      	b.n	8008a8a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f96d 	bl	8008d62 <USBD_CtlError>
  }
}
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	885b      	ldrh	r3, [r3, #2]
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	4b41      	ldr	r3, [pc, #260]	; (8008bac <USBD_SetConfig+0x118>)
 8008aa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008aa8:	4b40      	ldr	r3, [pc, #256]	; (8008bac <USBD_SetConfig+0x118>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d904      	bls.n	8008aba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f955 	bl	8008d62 <USBD_CtlError>
 8008ab8:	e075      	b.n	8008ba6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d002      	beq.n	8008aca <USBD_SetConfig+0x36>
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d023      	beq.n	8008b10 <USBD_SetConfig+0x7c>
 8008ac8:	e062      	b.n	8008b90 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008aca:	4b38      	ldr	r3, [pc, #224]	; (8008bac <USBD_SetConfig+0x118>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01a      	beq.n	8008b08 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008ad2:	4b36      	ldr	r3, [pc, #216]	; (8008bac <USBD_SetConfig+0x118>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2203      	movs	r2, #3
 8008ae0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ae4:	4b31      	ldr	r3, [pc, #196]	; (8008bac <USBD_SetConfig+0x118>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7ff f9d6 	bl	8007e9c <USBD_SetClassConfig>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d104      	bne.n	8008b00 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f932 	bl	8008d62 <USBD_CtlError>
            return;
 8008afe:	e052      	b.n	8008ba6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f9f6 	bl	8008ef2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b06:	e04e      	b.n	8008ba6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f9f2 	bl	8008ef2 <USBD_CtlSendStatus>
        break;
 8008b0e:	e04a      	b.n	8008ba6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008b10:	4b26      	ldr	r3, [pc, #152]	; (8008bac <USBD_SetConfig+0x118>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d112      	bne.n	8008b3e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008b20:	4b22      	ldr	r3, [pc, #136]	; (8008bac <USBD_SetConfig+0x118>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b2a:	4b20      	ldr	r3, [pc, #128]	; (8008bac <USBD_SetConfig+0x118>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff f9d2 	bl	8007eda <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f9db 	bl	8008ef2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b3c:	e033      	b.n	8008ba6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008b3e:	4b1b      	ldr	r3, [pc, #108]	; (8008bac <USBD_SetConfig+0x118>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d01d      	beq.n	8008b88 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff f9c0 	bl	8007eda <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008b5a:	4b14      	ldr	r3, [pc, #80]	; (8008bac <USBD_SetConfig+0x118>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b64:	4b11      	ldr	r3, [pc, #68]	; (8008bac <USBD_SetConfig+0x118>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff f996 	bl	8007e9c <USBD_SetClassConfig>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d104      	bne.n	8008b80 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f8f2 	bl	8008d62 <USBD_CtlError>
            return;
 8008b7e:	e012      	b.n	8008ba6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f9b6 	bl	8008ef2 <USBD_CtlSendStatus>
        break;
 8008b86:	e00e      	b.n	8008ba6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f9b2 	bl	8008ef2 <USBD_CtlSendStatus>
        break;
 8008b8e:	e00a      	b.n	8008ba6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f8e5 	bl	8008d62 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b98:	4b04      	ldr	r3, [pc, #16]	; (8008bac <USBD_SetConfig+0x118>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff f99b 	bl	8007eda <USBD_ClrClassConfig>
        break;
 8008ba4:	bf00      	nop
    }
  }
}
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	2000051b 	.word	0x2000051b

08008bb0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	88db      	ldrh	r3, [r3, #6]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d004      	beq.n	8008bcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f8cc 	bl	8008d62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008bca:	e022      	b.n	8008c12 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	dc02      	bgt.n	8008bdc <USBD_GetConfig+0x2c>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dc03      	bgt.n	8008be2 <USBD_GetConfig+0x32>
 8008bda:	e015      	b.n	8008c08 <USBD_GetConfig+0x58>
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	d00b      	beq.n	8008bf8 <USBD_GetConfig+0x48>
 8008be0:	e012      	b.n	8008c08 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3308      	adds	r3, #8
 8008bec:	2201      	movs	r2, #1
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f920 	bl	8008e36 <USBD_CtlSendData>
        break;
 8008bf6:	e00c      	b.n	8008c12 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f918 	bl	8008e36 <USBD_CtlSendData>
        break;
 8008c06:	e004      	b.n	8008c12 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f8a9 	bl	8008d62 <USBD_CtlError>
        break;
 8008c10:	bf00      	nop
}
 8008c12:	bf00      	nop
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d81e      	bhi.n	8008c6e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	88db      	ldrh	r3, [r3, #6]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d004      	beq.n	8008c42 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f891 	bl	8008d62 <USBD_CtlError>
        break;
 8008c40:	e01a      	b.n	8008c78 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f043 0202 	orr.w	r2, r3, #2
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	330c      	adds	r3, #12
 8008c62:	2202      	movs	r2, #2
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f8e5 	bl	8008e36 <USBD_CtlSendData>
      break;
 8008c6c:	e004      	b.n	8008c78 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f876 	bl	8008d62 <USBD_CtlError>
      break;
 8008c76:	bf00      	nop
  }
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	885b      	ldrh	r3, [r3, #2]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d106      	bne.n	8008ca0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f929 	bl	8008ef2 <USBD_CtlSendStatus>
  }
}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d80b      	bhi.n	8008cd6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	885b      	ldrh	r3, [r3, #2]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d10c      	bne.n	8008ce0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f90f 	bl	8008ef2 <USBD_CtlSendStatus>
      }
      break;
 8008cd4:	e004      	b.n	8008ce0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f842 	bl	8008d62 <USBD_CtlError>
      break;
 8008cde:	e000      	b.n	8008ce2 <USBD_ClrFeature+0x3a>
      break;
 8008ce0:	bf00      	nop
  }
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781a      	ldrb	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	785a      	ldrb	r2, [r3, #1]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	3302      	adds	r3, #2
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	3303      	adds	r3, #3
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	021b      	lsls	r3, r3, #8
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	4413      	add	r3, r2
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	3304      	adds	r3, #4
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	3305      	adds	r3, #5
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	021b      	lsls	r3, r3, #8
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	4413      	add	r3, r2
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	3306      	adds	r3, #6
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	3307      	adds	r3, #7
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	021b      	lsls	r3, r3, #8
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	4413      	add	r3, r2
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	80da      	strh	r2, [r3, #6]

}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bc80      	pop	{r7}
 8008d60:	4770      	bx	lr

08008d62 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008d6c:	2180      	movs	r1, #128	; 0x80
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fbca 	bl	8009508 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d74:	2100      	movs	r1, #0
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fbc6 	bl	8009508 <USBD_LL_StallEP>
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d90:	2300      	movs	r3, #0
 8008d92:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d032      	beq.n	8008e00 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 f834 	bl	8008e08 <USBD_GetLen>
 8008da0:	4603      	mov	r3, r0
 8008da2:	3301      	adds	r3, #1
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	75fa      	strb	r2, [r7, #23]
 8008db4:	461a      	mov	r2, r3
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	4413      	add	r3, r2
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	7812      	ldrb	r2, [r2, #0]
 8008dbe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	75fa      	strb	r2, [r7, #23]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4413      	add	r3, r2
 8008dcc:	2203      	movs	r2, #3
 8008dce:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008dd0:	e012      	b.n	8008df8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	1c5a      	adds	r2, r3, #1
 8008dd6:	60fa      	str	r2, [r7, #12]
 8008dd8:	7dfa      	ldrb	r2, [r7, #23]
 8008dda:	1c51      	adds	r1, r2, #1
 8008ddc:	75f9      	strb	r1, [r7, #23]
 8008dde:	4611      	mov	r1, r2
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	440a      	add	r2, r1
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	75fa      	strb	r2, [r7, #23]
 8008dee:	461a      	mov	r2, r3
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	4413      	add	r3, r2
 8008df4:	2200      	movs	r2, #0
 8008df6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e8      	bne.n	8008dd2 <USBD_GetString+0x4e>
    }
  }
}
 8008e00:	bf00      	nop
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008e14:	e005      	b.n	8008e22 <USBD_GetLen+0x1a>
  {
    len++;
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1f5      	bne.n	8008e16 <USBD_GetLen+0xe>
  }

  return len;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bc80      	pop	{r7}
 8008e34:	4770      	bx	lr

08008e36 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	60b9      	str	r1, [r7, #8]
 8008e40:	4613      	mov	r3, r2
 8008e42:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e4c:	88fa      	ldrh	r2, [r7, #6]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008e52:	88fa      	ldrh	r2, [r7, #6]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e58:	88fb      	ldrh	r3, [r7, #6]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 fbdb 	bl	800961a <USBD_LL_Transmit>

  return USBD_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	2100      	movs	r1, #0
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 fbc9 	bl	800961a <USBD_LL_Transmit>

  return USBD_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ea8:	88fa      	ldrh	r2, [r7, #6]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008eb0:	88fa      	ldrh	r2, [r7, #6]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eb8:	88fb      	ldrh	r3, [r7, #6]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 fbce 	bl	8009660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008edc:	88fb      	ldrh	r3, [r7, #6]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 fbbc 	bl	8009660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b082      	sub	sp, #8
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2204      	movs	r2, #4
 8008efe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f02:	2300      	movs	r3, #0
 8008f04:	2200      	movs	r2, #0
 8008f06:	2100      	movs	r1, #0
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fb86 	bl	800961a <USBD_LL_Transmit>

  return USBD_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2205      	movs	r2, #5
 8008f24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f28:	2300      	movs	r3, #0
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fb96 	bl	8009660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
	...

08008f40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f44:	2200      	movs	r2, #0
 8008f46:	4912      	ldr	r1, [pc, #72]	; (8008f90 <MX_USB_DEVICE_Init+0x50>)
 8008f48:	4812      	ldr	r0, [pc, #72]	; (8008f94 <MX_USB_DEVICE_Init+0x54>)
 8008f4a:	f7fe ff37 	bl	8007dbc <USBD_Init>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f54:	f7f7 fc20 	bl	8000798 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8008f58:	490f      	ldr	r1, [pc, #60]	; (8008f98 <MX_USB_DEVICE_Init+0x58>)
 8008f5a:	480e      	ldr	r0, [pc, #56]	; (8008f94 <MX_USB_DEVICE_Init+0x54>)
 8008f5c:	f7fe ff59 	bl	8007e12 <USBD_RegisterClass>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f66:	f7f7 fc17 	bl	8000798 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8008f6a:	490c      	ldr	r1, [pc, #48]	; (8008f9c <MX_USB_DEVICE_Init+0x5c>)
 8008f6c:	4809      	ldr	r0, [pc, #36]	; (8008f94 <MX_USB_DEVICE_Init+0x54>)
 8008f6e:	f7fe fbc1 	bl	80076f4 <USBD_DFU_RegisterMedia>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f78:	f7f7 fc0e 	bl	8000798 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f7c:	4805      	ldr	r0, [pc, #20]	; (8008f94 <MX_USB_DEVICE_Init+0x54>)
 8008f7e:	f7fe ff61 	bl	8007e44 <USBD_Start>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f88:	f7f7 fc06 	bl	8000798 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f8c:	bf00      	nop
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20000070 	.word	0x20000070
 8008f94:	2000051c 	.word	0x2000051c
 8008f98:	2000000c 	.word	0x2000000c
 8008f9c:	200000c0 	.word	0x200000c0

08008fa0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	6039      	str	r1, [r7, #0]
 8008faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	2212      	movs	r2, #18
 8008fb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fb2:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bc80      	pop	{r7}
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	2000008c 	.word	0x2000008c

08008fc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	6039      	str	r1, [r7, #0]
 8008fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2204      	movs	r2, #4
 8008fd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fd6:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bc80      	pop	{r7}
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	200000a0 	.word	0x200000a0

08008fe8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d105      	bne.n	8009006 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ffa:	683a      	ldr	r2, [r7, #0]
 8008ffc:	4907      	ldr	r1, [pc, #28]	; (800901c <USBD_FS_ProductStrDescriptor+0x34>)
 8008ffe:	4808      	ldr	r0, [pc, #32]	; (8009020 <USBD_FS_ProductStrDescriptor+0x38>)
 8009000:	f7ff fec0 	bl	8008d84 <USBD_GetString>
 8009004:	e004      	b.n	8009010 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	4904      	ldr	r1, [pc, #16]	; (800901c <USBD_FS_ProductStrDescriptor+0x34>)
 800900a:	4805      	ldr	r0, [pc, #20]	; (8009020 <USBD_FS_ProductStrDescriptor+0x38>)
 800900c:	f7ff feba 	bl	8008d84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009010:	4b02      	ldr	r3, [pc, #8]	; (800901c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	200007e0 	.word	0x200007e0
 8009020:	080097b0 	.word	0x080097b0

08009024 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	6039      	str	r1, [r7, #0]
 800902e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	4904      	ldr	r1, [pc, #16]	; (8009044 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009034:	4804      	ldr	r0, [pc, #16]	; (8009048 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009036:	f7ff fea5 	bl	8008d84 <USBD_GetString>
  return USBD_StrDesc;
 800903a:	4b02      	ldr	r3, [pc, #8]	; (8009044 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	200007e0 	.word	0x200007e0
 8009048:	080097d0 	.word	0x080097d0

0800904c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	4603      	mov	r3, r0
 8009054:	6039      	str	r1, [r7, #0]
 8009056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	221a      	movs	r2, #26
 800905c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800905e:	f000 f843 	bl	80090e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009062:	4b02      	ldr	r3, [pc, #8]	; (800906c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	200000a4 	.word	0x200000a4

08009070 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	6039      	str	r1, [r7, #0]
 800907a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d105      	bne.n	800908e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	4907      	ldr	r1, [pc, #28]	; (80090a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009086:	4808      	ldr	r0, [pc, #32]	; (80090a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009088:	f7ff fe7c 	bl	8008d84 <USBD_GetString>
 800908c:	e004      	b.n	8009098 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4904      	ldr	r1, [pc, #16]	; (80090a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009092:	4805      	ldr	r0, [pc, #20]	; (80090a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009094:	f7ff fe76 	bl	8008d84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009098:	4b02      	ldr	r3, [pc, #8]	; (80090a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	200007e0 	.word	0x200007e0
 80090a8:	080097e4 	.word	0x080097e4

080090ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	6039      	str	r1, [r7, #0]
 80090b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d105      	bne.n	80090ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	4907      	ldr	r1, [pc, #28]	; (80090e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090c2:	4808      	ldr	r0, [pc, #32]	; (80090e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090c4:	f7ff fe5e 	bl	8008d84 <USBD_GetString>
 80090c8:	e004      	b.n	80090d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	4904      	ldr	r1, [pc, #16]	; (80090e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ce:	4805      	ldr	r0, [pc, #20]	; (80090e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090d0:	f7ff fe58 	bl	8008d84 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090d4:	4b02      	ldr	r3, [pc, #8]	; (80090e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	200007e0 	.word	0x200007e0
 80090e4:	080097f0 	.word	0x080097f0

080090e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090ee:	4b0f      	ldr	r3, [pc, #60]	; (800912c <Get_SerialNum+0x44>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090f4:	4b0e      	ldr	r3, [pc, #56]	; (8009130 <Get_SerialNum+0x48>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090fa:	4b0e      	ldr	r3, [pc, #56]	; (8009134 <Get_SerialNum+0x4c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4413      	add	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d009      	beq.n	8009122 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800910e:	2208      	movs	r2, #8
 8009110:	4909      	ldr	r1, [pc, #36]	; (8009138 <Get_SerialNum+0x50>)
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f000 f814 	bl	8009140 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009118:	2204      	movs	r2, #4
 800911a:	4908      	ldr	r1, [pc, #32]	; (800913c <Get_SerialNum+0x54>)
 800911c:	68b8      	ldr	r0, [r7, #8]
 800911e:	f000 f80f 	bl	8009140 <IntToUnicode>
  }
}
 8009122:	bf00      	nop
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	1ffff7e8 	.word	0x1ffff7e8
 8009130:	1ffff7ec 	.word	0x1ffff7ec
 8009134:	1ffff7f0 	.word	0x1ffff7f0
 8009138:	200000a6 	.word	0x200000a6
 800913c:	200000b6 	.word	0x200000b6

08009140 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	4613      	mov	r3, r2
 800914c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009152:	2300      	movs	r3, #0
 8009154:	75fb      	strb	r3, [r7, #23]
 8009156:	e027      	b.n	80091a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	0f1b      	lsrs	r3, r3, #28
 800915c:	2b09      	cmp	r3, #9
 800915e:	d80b      	bhi.n	8009178 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	0f1b      	lsrs	r3, r3, #28
 8009164:	b2da      	uxtb	r2, r3
 8009166:	7dfb      	ldrb	r3, [r7, #23]
 8009168:	005b      	lsls	r3, r3, #1
 800916a:	4619      	mov	r1, r3
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	440b      	add	r3, r1
 8009170:	3230      	adds	r2, #48	; 0x30
 8009172:	b2d2      	uxtb	r2, r2
 8009174:	701a      	strb	r2, [r3, #0]
 8009176:	e00a      	b.n	800918e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	0f1b      	lsrs	r3, r3, #28
 800917c:	b2da      	uxtb	r2, r3
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	4619      	mov	r1, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	440b      	add	r3, r1
 8009188:	3237      	adds	r2, #55	; 0x37
 800918a:	b2d2      	uxtb	r2, r2
 800918c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009194:	7dfb      	ldrb	r3, [r7, #23]
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	3301      	adds	r3, #1
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	4413      	add	r3, r2
 800919e:	2200      	movs	r2, #0
 80091a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
 80091a4:	3301      	adds	r3, #1
 80091a6:	75fb      	strb	r3, [r7, #23]
 80091a8:	7dfa      	ldrb	r2, [r7, #23]
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d3d3      	bcc.n	8009158 <IntToUnicode+0x18>
  }
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	371c      	adds	r7, #28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bc80      	pop	{r7}
 80091ba:	4770      	bx	lr

080091bc <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80091c0:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bc80      	pop	{r7}
 80091c8:	4770      	bx	lr

080091ca <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 80091ca:	b480      	push	{r7}
 80091cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80091ce:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bc80      	pop	{r7}
 80091d6:	4770      	bx	lr

080091d8 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80091e0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bc80      	pop	{r7}
 80091ea:	4770      	bx	lr

080091ec <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 80091f8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	bc80      	pop	{r7}
 8009202:	4770      	bx	lr

08009204 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8009210:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009212:	4618      	mov	r0, r3
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	bc80      	pop	{r7}
 800921a:	4770      	bx	lr

0800921c <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	460b      	mov	r3, r1
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800922a:	7afb      	ldrb	r3, [r7, #11]
 800922c:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800922e:	bf00      	nop
  }
  return (USBD_OK);
 8009230:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009232:	4618      	mov	r0, r3
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr

0800923c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a11      	ldr	r2, [pc, #68]	; (8009290 <HAL_PCD_MspInit+0x54>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d11b      	bne.n	8009286 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800924e:	4b11      	ldr	r3, [pc, #68]	; (8009294 <HAL_PCD_MspInit+0x58>)
 8009250:	69db      	ldr	r3, [r3, #28]
 8009252:	4a10      	ldr	r2, [pc, #64]	; (8009294 <HAL_PCD_MspInit+0x58>)
 8009254:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009258:	61d3      	str	r3, [r2, #28]
 800925a:	4b0e      	ldr	r3, [pc, #56]	; (8009294 <HAL_PCD_MspInit+0x58>)
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8009266:	2200      	movs	r2, #0
 8009268:	2100      	movs	r1, #0
 800926a:	2013      	movs	r0, #19
 800926c:	f7f7 fdd7 	bl	8000e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8009270:	2013      	movs	r0, #19
 8009272:	f7f7 fdf0 	bl	8000e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009276:	2200      	movs	r2, #0
 8009278:	2100      	movs	r1, #0
 800927a:	2014      	movs	r0, #20
 800927c:	f7f7 fdcf 	bl	8000e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009280:	2014      	movs	r0, #20
 8009282:	f7f7 fde8 	bl	8000e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009286:	bf00      	nop
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	40005c00 	.word	0x40005c00
 8009294:	40021000 	.word	0x40021000

08009298 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	f7fe fe26 	bl	8007f00 <USBD_LL_SetupStage>
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	440b      	add	r3, r1
 80092dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	78fb      	ldrb	r3, [r7, #3]
 80092e4:	4619      	mov	r1, r3
 80092e6:	f7fe fe58 	bl	8007f9a <USBD_LL_DataOutStage>
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009304:	78fa      	ldrb	r2, [r7, #3]
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4613      	mov	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	440b      	add	r3, r1
 8009312:	333c      	adds	r3, #60	; 0x3c
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	4619      	mov	r1, r3
 800931a:	f7fe feaf 	bl	800807c <USBD_LL_DataInStage>
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b082      	sub	sp, #8
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe ffbf 	bl	80082b8 <USBD_LL_SOF>
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800934a:	2301      	movs	r3, #1
 800934c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	2b02      	cmp	r3, #2
 8009354:	d001      	beq.n	800935a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009356:	f7f7 fa1f 	bl	8000798 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009360:	7bfa      	ldrb	r2, [r7, #15]
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe ff6f 	bl	8008248 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe ff28 	bl	80081c6 <USBD_LL_Reset>
}
 8009376:	bf00      	nop
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe ff69 	bl	8008266 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800939c:	4b04      	ldr	r3, [pc, #16]	; (80093b0 <HAL_PCD_SuspendCallback+0x30>)
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	4a03      	ldr	r2, [pc, #12]	; (80093b0 <HAL_PCD_SuspendCallback+0x30>)
 80093a2:	f043 0306 	orr.w	r3, r3, #6
 80093a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	e000ed00 	.word	0xe000ed00

080093b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe ff63 	bl	800828e <USBD_LL_Resume>
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80093d8:	4a1b      	ldr	r2, [pc, #108]	; (8009448 <USBD_LL_Init+0x78>)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a19      	ldr	r2, [pc, #100]	; (8009448 <USBD_LL_Init+0x78>)
 80093e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80093e8:	4b17      	ldr	r3, [pc, #92]	; (8009448 <USBD_LL_Init+0x78>)
 80093ea:	4a18      	ldr	r2, [pc, #96]	; (800944c <USBD_LL_Init+0x7c>)
 80093ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80093ee:	4b16      	ldr	r3, [pc, #88]	; (8009448 <USBD_LL_Init+0x78>)
 80093f0:	2208      	movs	r2, #8
 80093f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80093f4:	4b14      	ldr	r3, [pc, #80]	; (8009448 <USBD_LL_Init+0x78>)
 80093f6:	2202      	movs	r2, #2
 80093f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80093fa:	4b13      	ldr	r3, [pc, #76]	; (8009448 <USBD_LL_Init+0x78>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009400:	4b11      	ldr	r3, [pc, #68]	; (8009448 <USBD_LL_Init+0x78>)
 8009402:	2200      	movs	r2, #0
 8009404:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009406:	4b10      	ldr	r3, [pc, #64]	; (8009448 <USBD_LL_Init+0x78>)
 8009408:	2200      	movs	r2, #0
 800940a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800940c:	480e      	ldr	r0, [pc, #56]	; (8009448 <USBD_LL_Init+0x78>)
 800940e:	f7f7 ffa4 	bl	800135a <HAL_PCD_Init>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009418:	f7f7 f9be 	bl	8000798 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009422:	2318      	movs	r3, #24
 8009424:	2200      	movs	r2, #0
 8009426:	2100      	movs	r1, #0
 8009428:	f7f9 fc8a 	bl	8002d40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009432:	2358      	movs	r3, #88	; 0x58
 8009434:	2200      	movs	r2, #0
 8009436:	2180      	movs	r1, #128	; 0x80
 8009438:	f7f9 fc82 	bl	8002d40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	200009e0 	.word	0x200009e0
 800944c:	40005c00 	.word	0x40005c00

08009450 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009466:	4618      	mov	r0, r3
 8009468:	f7f8 f876 	bl	8001558 <HAL_PCD_Start>
 800946c:	4603      	mov	r3, r0
 800946e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	4618      	mov	r0, r3
 8009474:	f000 f938 	bl	80096e8 <USBD_Get_USB_Status>
 8009478:	4603      	mov	r3, r0
 800947a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800947c:	7bbb      	ldrb	r3, [r7, #14]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800949c:	4618      	mov	r0, r3
 800949e:	f7f8 f881 	bl	80015a4 <HAL_PCD_Stop>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 f91d 	bl	80096e8 <USBD_Get_USB_Status>
 80094ae:	4603      	mov	r3, r0
 80094b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	4608      	mov	r0, r1
 80094c6:	4611      	mov	r1, r2
 80094c8:	461a      	mov	r2, r3
 80094ca:	4603      	mov	r3, r0
 80094cc:	70fb      	strb	r3, [r7, #3]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70bb      	strb	r3, [r7, #2]
 80094d2:	4613      	mov	r3, r2
 80094d4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094e4:	78bb      	ldrb	r3, [r7, #2]
 80094e6:	883a      	ldrh	r2, [r7, #0]
 80094e8:	78f9      	ldrb	r1, [r7, #3]
 80094ea:	f7f8 f9d6 	bl	800189a <HAL_PCD_EP_Open>
 80094ee:	4603      	mov	r3, r0
 80094f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 f8f7 	bl	80096e8 <USBD_Get_USB_Status>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009522:	78fa      	ldrb	r2, [r7, #3]
 8009524:	4611      	mov	r1, r2
 8009526:	4618      	mov	r0, r3
 8009528:	f7f8 fa7c 	bl	8001a24 <HAL_PCD_EP_SetStall>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f8d8 	bl	80096e8 <USBD_Get_USB_Status>
 8009538:	4603      	mov	r3, r0
 800953a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953c:	7bbb      	ldrb	r3, [r7, #14]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009560:	78fa      	ldrb	r2, [r7, #3]
 8009562:	4611      	mov	r1, r2
 8009564:	4618      	mov	r0, r3
 8009566:	f7f8 fabd 	bl	8001ae4 <HAL_PCD_EP_ClrStall>
 800956a:	4603      	mov	r3, r0
 800956c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	4618      	mov	r0, r3
 8009572:	f000 f8b9 	bl	80096e8 <USBD_Get_USB_Status>
 8009576:	4603      	mov	r3, r0
 8009578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800957a:	7bbb      	ldrb	r3, [r7, #14]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009596:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800959c:	2b00      	cmp	r3, #0
 800959e:	da0c      	bge.n	80095ba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095a6:	68f9      	ldr	r1, [r7, #12]
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	440b      	add	r3, r1
 80095b4:	3302      	adds	r3, #2
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	e00b      	b.n	80095d2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095ba:	78fb      	ldrb	r3, [r7, #3]
 80095bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095c0:	68f9      	ldr	r1, [r7, #12]
 80095c2:	4613      	mov	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	440b      	add	r3, r1
 80095cc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80095d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bc80      	pop	{r7}
 80095da:	4770      	bx	lr

080095dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095f6:	78fa      	ldrb	r2, [r7, #3]
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7f8 f928 	bl	8001850 <HAL_PCD_SetAddress>
 8009600:	4603      	mov	r3, r0
 8009602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	4618      	mov	r0, r3
 8009608:	f000 f86e 	bl	80096e8 <USBD_Get_USB_Status>
 800960c:	4603      	mov	r3, r0
 800960e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009610:	7bbb      	ldrb	r3, [r7, #14]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b086      	sub	sp, #24
 800961e:	af00      	add	r7, sp, #0
 8009620:	60f8      	str	r0, [r7, #12]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	461a      	mov	r2, r3
 8009626:	460b      	mov	r3, r1
 8009628:	72fb      	strb	r3, [r7, #11]
 800962a:	4613      	mov	r3, r2
 800962c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800963c:	893b      	ldrh	r3, [r7, #8]
 800963e:	7af9      	ldrb	r1, [r7, #11]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	f7f8 f9b8 	bl	80019b6 <HAL_PCD_EP_Transmit>
 8009646:	4603      	mov	r3, r0
 8009648:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800964a:	7dfb      	ldrb	r3, [r7, #23]
 800964c:	4618      	mov	r0, r3
 800964e:	f000 f84b 	bl	80096e8 <USBD_Get_USB_Status>
 8009652:	4603      	mov	r3, r0
 8009654:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009656:	7dbb      	ldrb	r3, [r7, #22]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	607a      	str	r2, [r7, #4]
 800966a:	461a      	mov	r2, r3
 800966c:	460b      	mov	r3, r1
 800966e:	72fb      	strb	r3, [r7, #11]
 8009670:	4613      	mov	r3, r2
 8009672:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009682:	893b      	ldrh	r3, [r7, #8]
 8009684:	7af9      	ldrb	r1, [r7, #11]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	f7f8 f964 	bl	8001954 <HAL_PCD_EP_Receive>
 800968c:	4603      	mov	r3, r0
 800968e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	4618      	mov	r0, r3
 8009694:	f000 f828 	bl	80096e8 <USBD_Get_USB_Status>
 8009698:	4603      	mov	r3, r0
 800969a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800969c:	7dbb      	ldrb	r3, [r7, #22]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096b0:	4b02      	ldr	r3, [pc, #8]	; (80096bc <USBD_static_malloc+0x14>)
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bc80      	pop	{r7}
 80096ba:	4770      	bx	lr
 80096bc:	20000cd0 	.word	0x20000cd0

080096c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]

}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bc80      	pop	{r7}
 80096d0:	4770      	bx	lr

080096d2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d2:	b480      	push	{r7}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	460b      	mov	r3, r1
 80096dc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80096de:	bf00      	nop
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bc80      	pop	{r7}
 80096e6:	4770      	bx	lr

080096e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d817      	bhi.n	800972c <USBD_Get_USB_Status+0x44>
 80096fc:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <USBD_Get_USB_Status+0x1c>)
 80096fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009702:	bf00      	nop
 8009704:	08009715 	.word	0x08009715
 8009708:	0800971b 	.word	0x0800971b
 800970c:	08009721 	.word	0x08009721
 8009710:	08009727 	.word	0x08009727
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
    break;
 8009718:	e00b      	b.n	8009732 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800971a:	2302      	movs	r3, #2
 800971c:	73fb      	strb	r3, [r7, #15]
    break;
 800971e:	e008      	b.n	8009732 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009720:	2301      	movs	r3, #1
 8009722:	73fb      	strb	r3, [r7, #15]
    break;
 8009724:	e005      	b.n	8009732 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009726:	2302      	movs	r3, #2
 8009728:	73fb      	strb	r3, [r7, #15]
    break;
 800972a:	e002      	b.n	8009732 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800972c:	2302      	movs	r3, #2
 800972e:	73fb      	strb	r3, [r7, #15]
    break;
 8009730:	bf00      	nop
  }
  return usb_status;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	bc80      	pop	{r7}
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop

08009740 <memset>:
 8009740:	4603      	mov	r3, r0
 8009742:	4402      	add	r2, r0
 8009744:	4293      	cmp	r3, r2
 8009746:	d100      	bne.n	800974a <memset+0xa>
 8009748:	4770      	bx	lr
 800974a:	f803 1b01 	strb.w	r1, [r3], #1
 800974e:	e7f9      	b.n	8009744 <memset+0x4>

08009750 <__libc_init_array>:
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	2600      	movs	r6, #0
 8009754:	4d0c      	ldr	r5, [pc, #48]	; (8009788 <__libc_init_array+0x38>)
 8009756:	4c0d      	ldr	r4, [pc, #52]	; (800978c <__libc_init_array+0x3c>)
 8009758:	1b64      	subs	r4, r4, r5
 800975a:	10a4      	asrs	r4, r4, #2
 800975c:	42a6      	cmp	r6, r4
 800975e:	d109      	bne.n	8009774 <__libc_init_array+0x24>
 8009760:	f000 f81a 	bl	8009798 <_init>
 8009764:	2600      	movs	r6, #0
 8009766:	4d0a      	ldr	r5, [pc, #40]	; (8009790 <__libc_init_array+0x40>)
 8009768:	4c0a      	ldr	r4, [pc, #40]	; (8009794 <__libc_init_array+0x44>)
 800976a:	1b64      	subs	r4, r4, r5
 800976c:	10a4      	asrs	r4, r4, #2
 800976e:	42a6      	cmp	r6, r4
 8009770:	d105      	bne.n	800977e <__libc_init_array+0x2e>
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	f855 3b04 	ldr.w	r3, [r5], #4
 8009778:	4798      	blx	r3
 800977a:	3601      	adds	r6, #1
 800977c:	e7ee      	b.n	800975c <__libc_init_array+0xc>
 800977e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009782:	4798      	blx	r3
 8009784:	3601      	adds	r6, #1
 8009786:	e7f2      	b.n	800976e <__libc_init_array+0x1e>
 8009788:	0800988c 	.word	0x0800988c
 800978c:	0800988c 	.word	0x0800988c
 8009790:	0800988c 	.word	0x0800988c
 8009794:	08009890 	.word	0x08009890

08009798 <_init>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr

080097a4 <_fini>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr
